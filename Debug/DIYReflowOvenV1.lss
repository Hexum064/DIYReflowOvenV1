
DIYReflowOvenV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000086  00020000  00020000  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000037a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002a0  00802000  000037a4  00003858  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004b2  008022a0  008022a0  00003b80  2**2
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003b7e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bdc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000598  00000000  00000000  00003c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bb1f  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004291  00000000  00000000  0000fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007267  00000000  00000000  00013f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011f8  00000000  00000000  0001b1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000335ed  00000000  00000000  0001c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f84  00000000  00000000  0004f9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000550  00000000  00000000  00054940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000b38f  00000000  00000000  00054e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_LoadFlashWord>:

.section .BOOT, "ax"
.global SP_LoadFlashWord

SP_LoadFlashWord:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
   20000:	3b b7       	in	r19, 0x3b	; 59
	movw	r0, r22                            ; Prepare flash word in R1:R0.
   20002:	0b 01       	movw	r0, r22
	ldi	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
   20004:	43 e2       	ldi	r20, 0x23	; 35
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
   20006:	13 c0       	rjmp	.+38     	; 0x2002e <SP_CommonSPM>

00020008 <SP_LoadFlashPage>:
		
.section .BOOT, "ax"
.global SP_LoadFlashPage

SP_LoadFlashPage:
	clr	ZL									; Clear low byte of Z, to indicate start of page.
   20008:	ee 27       	eor	r30, r30
	clr	ZH									; Clear high byte of Z, to indicate start of page.
   2000a:	ff 27       	eor	r31, r31

	out	RAMPX, r1							; Clear RAMPX pointer.
   2000c:	19 be       	out	0x39, r1	; 57
	movw	XL, r24							; Load X with data buffer address.
   2000e:	dc 01       	movw	r26, r24

	ldi r20, NVM_CMD_LOAD_FLASH_BUFFER_gc	; Prepare NVM command code in R20.
   20010:	43 e2       	ldi	r20, 0x23	; 35
	sts	NVM_CMD, r20						; Load it into NVM command register.
   20012:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	ldi	r21, FLASH_PAGE_SIZE / 2			; Load R21 with page word count.
   20016:	50 e8       	ldi	r21, 0x80	; 128
	ldi	r18, CCP_SPM_gc						; Prepare Protect SPM signature in R16.
   20018:	2d e9       	ldi	r18, 0x9D	; 157

0002001a <SP_LoadFlashPage_1>:

SP_LoadFlashPage_1:
	ld	r0, X+								; Load low byte from buffer into R0.
   2001a:	0d 90       	ld	r0, X+
	ld	r1, X+								; Load high byte from buffer into R1.
   2001c:	1d 90       	ld	r1, X+
	sts	CCP, r18							; Enable SPM operation (this disables interrupts for 4 cycles).
   2001e:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm										; Self-program.
   20022:	e8 95       	spm
	adiw	ZL, 2							; Move Z to next Flash word.
   20024:	32 96       	adiw	r30, 0x02	; 2


	dec	r21									; Decrement word count.
   20026:	5a 95       	dec	r21


	brne	SP_LoadFlashPage_1				; Repeat until word cont is zero.
   20028:	c1 f7       	brne	.-16     	; 0x2001a <SP_LoadFlashPage_1>

	clr	r1									; Clear R1 for GCC _zero_reg_ to function properly.
   2002a:	11 24       	eor	r1, r1
	ret
   2002c:	08 95       	ret

0002002e <SP_CommonSPM>:
; ---

.section .BOOT, "ax"

SP_CommonSPM:
	movw	ZL, r24          ; Load R25:R24 into Z.
   2002e:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20     ; Load prepared command into NVM Command register.
   20030:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_SPM_gc  ; Prepare Protect SPM signature in R18
   20034:	2d e9       	ldi	r18, 0x9D	; 157
	sts	CCP, r18         ; Enable SPM operation (this disables interrupts for 4 cycles).
   20036:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                      ; Self-program.
   2003a:	e8 95       	spm
	clr	r1               ; Clear R1 for GCC _zero_reg_ to function properly.
   2003c:	11 24       	eor	r1, r1
	out	RAMPZ, r19       ; Restore RAMPZ register.
   2003e:	3b bf       	out	0x3b, r19	; 59
	ret
   20040:	08 95       	ret

00020042 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20042:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20044:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20046:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20048:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2004c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   20050:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20052:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20056:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20058:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2005c:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   2005e:	08 95       	ret

00020060 <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   20060:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20064:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20066:	fc cf       	rjmp	.-8      	; 0x20060 <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20068:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   2006a:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2006c:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2006e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20072:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20074:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   20078:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   2007a:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2007c:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2007e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20082:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   20084:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	5a c7       	rjmp	.+3764   	; 0xeee <__vector_14>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c0       	rjmp	.+310    	; 0x254 <__bad_interrupt>
     11e:	00 00       	nop
     120:	99 c0       	rjmp	.+306    	; 0x254 <__bad_interrupt>
     122:	00 00       	nop
     124:	97 c0       	rjmp	.+302    	; 0x254 <__bad_interrupt>
     126:	00 00       	nop
     128:	95 c0       	rjmp	.+298    	; 0x254 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	8f c0       	rjmp	.+286    	; 0x254 <__bad_interrupt>
     136:	00 00       	nop
     138:	8d c0       	rjmp	.+282    	; 0x254 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8b c0       	rjmp	.+278    	; 0x254 <__bad_interrupt>
     13e:	00 00       	nop
     140:	89 c0       	rjmp	.+274    	; 0x254 <__bad_interrupt>
     142:	00 00       	nop
     144:	87 c0       	rjmp	.+270    	; 0x254 <__bad_interrupt>
     146:	00 00       	nop
     148:	85 c0       	rjmp	.+266    	; 0x254 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	83 c0       	rjmp	.+262    	; 0x254 <__bad_interrupt>
     14e:	00 00       	nop
     150:	81 c0       	rjmp	.+258    	; 0x254 <__bad_interrupt>
     152:	00 00       	nop
     154:	7f c0       	rjmp	.+254    	; 0x254 <__bad_interrupt>
     156:	00 00       	nop
     158:	7d c0       	rjmp	.+250    	; 0x254 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_125>
     1f8:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__vector_126>
     1fc:	0c 10       	cpse	r0, r12
     1fe:	0f 10       	cpse	r0, r15
     200:	12 10       	cpse	r1, r2
     202:	15 10       	cpse	r1, r5
     204:	18 10       	cpse	r1, r8
     206:	1b 10       	cpse	r1, r11
     208:	1e 10       	cpse	r1, r14

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	12 e2       	ldi	r17, 0x22	; 34
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	e4 ea       	ldi	r30, 0xA4	; 164
     22a:	f7 e3       	ldi	r31, 0x37	; 55
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a0 3a       	cpi	r26, 0xA0	; 160
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	27 e2       	ldi	r18, 0x27	; 39
     240:	a0 ea       	ldi	r26, 0xA0	; 160
     242:	b2 e2       	ldi	r27, 0x22	; 34
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a2 35       	cpi	r26, 0x52	; 82
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	d5 d6       	rcall	.+3498   	; 0xffa <main>
     250:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <SP_ReadByte>:

.section .text
.global SP_ReadByte

SP_ReadByte:
	in	r19, RAMPZ      ; Save RAMPZ.
     256:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     258:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     25a:	fb 01       	movw	r30, r22
	elpm	r24, Z          ; Extended load byte from address pointed to by Z.
     25c:	86 91       	elpm	r24, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     25e:	3b bf       	out	0x3b, r19	; 59
	ret
     260:	08 95       	ret

00000262 <SP_ReadWord>:

.section .text
.global SP_ReadWord

SP_ReadWord:
	in	r19, RAMPZ      ; Save RAMPZ.
     262:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     264:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     266:	fb 01       	movw	r30, r22
	elpm	r24, Z+         ; Extended load byte from address pointed to by Z.
     268:	87 91       	elpm	r24, Z+
	elpm	r25, Z          ; Extended load byte from address pointed to by Z.
     26a:	96 91       	elpm	r25, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     26c:	3b bf       	out	0x3b, r19	; 59
	ret
     26e:	08 95       	ret

00000270 <SP_ReadCalibrationByte>:

.section .text
.global SP_ReadCalibrationByte	

SP_ReadCalibrationByte:
	ldi	r20, NVM_CMD_READ_CALIB_ROW_gc    ; Prepare NVM command in R20.
     270:	42 e0       	ldi	r20, 0x02	; 2
	rjmp	SP_CommonLPM                      ; Jump to common LPM code.
     272:	7c c0       	rjmp	.+248    	; 0x36c <SP_CommonLPM>

00000274 <SP_ReadUserSignatureByte>:

.section .text	
.global SP_ReadUserSignatureByte

SP_ReadUserSignatureByte:
	ldi	r20, NVM_CMD_READ_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     274:	41 e0       	ldi	r20, 0x01	; 1
	rjmp	SP_CommonLPM                       ; Jump to common LPM code.
     276:	7a c0       	rjmp	.+244    	; 0x36c <SP_CommonLPM>

00000278 <SP_ReadFuseByte>:

.section .text	
.global SP_ReadFuseByte

SP_ReadFuseByte:
	sts	NVM_ADDR0, r24              ; Load fuse byte index into NVM Address Register 0.
     278:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
	clr	r24                         ; Prepare a zero.
     27c:	88 27       	eor	r24, r24
	sts	NVM_ADDR1, r24              ; Load zero into NVM Address Register 1.
     27e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
	sts	NVM_ADDR2, r24              ; Load zero into NVM Address Register 2.
     282:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
	ldi	r20, NVM_CMD_READ_FUSES_gc  ; Prepare NVM command in R20.
     286:	47 e0       	ldi	r20, 0x07	; 7
	rcall	SP_CommonCMD                ; Jump to common NVM Action code.
     288:	61 d0       	rcall	.+194    	; 0x34c <SP_CommonCMD>
	movw	r24, r22                    ; Move low byte to 1 byte return address.
     28a:	cb 01       	movw	r24, r22
	ret
     28c:	08 95       	ret

0000028e <SP_WriteLockBits>:

.section .text	
.global SP_WriteLockBits

SP_WriteLockBits:
	sts	NVM_DATA0, r24                  ; Load lock bits into NVM Data Register 0.
     28e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	ldi	r20, NVM_CMD_WRITE_LOCK_BITS_gc ; Prepare NVM command in R20.
     292:	48 e0       	ldi	r20, 0x08	; 8
	rjmp	SP_CommonCMD                    ; Jump to common NVM Action code.
     294:	5b c0       	rjmp	.+182    	; 0x34c <SP_CommonCMD>

00000296 <SP_ReadLockBits>:

.section .text		
.global SP_ReadLockBits

SP_ReadLockBits:
	lds	r24, NVM_LOCKBITS       ; Read IO-mapped lock bits.
     296:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
	ret
     29a:	08 95       	ret

0000029c <SP_EraseUserSignatureRow>:

.section .text
.global SP_EraseUserSignatureRow

SP_EraseUserSignatureRow:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     29c:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_USER_SIG_ROW_gc ; Prepare NVM command in R20.
     29e:	48 e1       	ldi	r20, 0x18	; 24
	jmp 	SP_CommonSPM                       ; Jump to common SPM code.
     2a0:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

000002a4 <SP_WriteUserSignatureRow>:

.section .text
.global SP_WriteUserSignatureRow

SP_WriteUserSignatureRow:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     2a4:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_WRITE_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     2a6:	4a e1       	ldi	r20, 0x1A	; 26
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     2a8:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

000002ac <SP_EraseApplicationSection>:

.section .text
.global SP_EraseApplicationSection

SP_EraseApplicationSection:
	in	r19, RAMPZ                 ; Save RAMPZ, which is restored in SP_CommonSPM.
     2ac:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_APP_gc  ; Prepare NVM command in R20.
     2ae:	40 e2       	ldi	r20, 0x20	; 32
	jmp	SP_CommonSPM               ; Jump to common SPM code.
     2b0:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

000002b4 <SP_EraseApplicationPage>:

.section .text	
.global SP_EraseApplicationPage

SP_EraseApplicationPage:
	in	r19, RAMPZ                      ; Save RAMPZ, which is restored in SP_CommonSPM.
     2b4:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                      ; Load RAMPZ with the MSB of the address.
     2b6:	8b bf       	out	0x3b, r24	; 59
	movw    r24, r22                        ; Move low bytes for ZH:ZL to R25:R24
     2b8:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_APP_PAGE_gc  ; Prepare NVM command in R20.
     2ba:	42 e2       	ldi	r20, 0x22	; 34
	jmp	SP_CommonSPM                    ; Jump to common SPM code.
     2bc:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

000002c0 <SP_ReadFlashPage>:
.section .text		
.global SP_ReadFlashPage

SP_ReadFlashPage:

	in	r19, RAMPZ						; Save RAMPZ during assembly.
     2c0:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r22						; Load RAMPZ with MSB of address
     2c2:	6b bf       	out	0x3b, r22	; 59
	movw    ZL, r20                     ; Load Z with Flash address.
     2c4:	fa 01       	movw	r30, r20

	out	RAMPX, r1						; Load RAMPX with data pointer
     2c6:	19 be       	out	0x39, r1	; 57
	movw	XL, r24						; Load X with data buffer address.
     2c8:	dc 01       	movw	r26, r24

	ldi	r20, NVM_CMD_NO_OPERATION_gc	; Prepare NVM command code in R20.
     2ca:	40 e0       	ldi	r20, 0x00	; 0
	sts	NVM_CMD, r20					; Set NVM command to No Operation so that LPM reads Flash.
     2cc:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	ldi	r21, FLASH_PAGE_SIZE / 2		; Load R21 with byte count.
     2d0:	50 e8       	ldi	r21, 0x80	; 128

000002d2 <SP_ReadFlashPage_1>:

SP_ReadFlashPage_1:
	elpm	r24, Z+						; Load Flash bytes into R18:r19
     2d2:	87 91       	elpm	r24, Z+
	elpm	r25, Z+
     2d4:	97 91       	elpm	r25, Z+
	st	X+, r24                         ; Write bytes to buffer.
     2d6:	8d 93       	st	X+, r24
	st	X+, r25
     2d8:	9d 93       	st	X+, r25

	dec	r21                             ; Decrement word count.
     2da:	5a 95       	dec	r21

	brne	SP_ReadFlashPage_1          ; Repeat until byte count is zero.
     2dc:	d1 f7       	brne	.-12     	; 0x2d2 <SP_ReadFlashPage_1>

	out	RAMPZ, r19
     2de:	3b bf       	out	0x3b, r19	; 59
	ret
     2e0:	08 95       	ret

000002e2 <SP_WriteApplicationPage>:

.section .text		
.global SP_WriteApplicationPage

SP_WriteApplicationPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     2e2:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     2e4:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     2e6:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_APP_PAGE_gc   ; Prepare NVM command in R20.
     2e8:	44 e2       	ldi	r20, 0x24	; 36
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     2ea:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

000002ee <SP_EraseWriteApplicationPage>:

.section .text
.global SP_EraseWriteApplicationPage

SP_EraseWriteApplicationPage:
	in	r19, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
     2ee:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                            ; Load RAMPZ with the MSB of the address.
     2f0:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                              ; Move low bytes of address to ZH:ZL from R23:R22
     2f2:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
     2f4:	45 e2       	ldi	r20, 0x25	; 37
	jmp	SP_CommonSPM                          ; Jump to common SPM code.
     2f6:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

000002fa <SP_EraseFlashBuffer>:

.section .text		
.global SP_EraseFlashBuffer

SP_EraseFlashBuffer:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     2fa:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
     2fc:	46 e2       	ldi	r20, 0x26	; 38
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     2fe:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000302 <SP_EraseBootPage>:

.section .text		
.global SP_EraseBootPage

SP_EraseBootPage:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     302:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                         ; Load RAMPZ with the MSB of the address.
     304:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                           ; Move low bytes of address to ZH:ZL from R23:R22
     306:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_BOOT_PAGE_gc    ; Prepare NVM command in R20.
     308:	4a e2       	ldi	r20, 0x2A	; 42
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
     30a:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

0000030e <SP_WriteBootPage>:

.section .text		
.global SP_WriteBootPage

SP_WriteBootPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     30e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     310:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     312:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     314:	4c e2       	ldi	r20, 0x2C	; 44
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     316:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

0000031a <SP_EraseWriteBootPage>:

.section .text		
.global SP_EraseWriteBootPage

SP_EraseWriteBootPage:
	in	r19, RAMPZ                             ; Save RAMPZ, which is restored in SP_CommonSPM.
     31a:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                             ; Load RAMPZ with the MSB of the address.
     31c:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                               ; Move low bytes of address to ZH:ZL from R23:R22
     31e:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     320:	4d e2       	ldi	r20, 0x2D	; 45
	jmp	SP_CommonSPM                           ; Jump to common SPM code.
     322:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000326 <SP_ApplicationCRC>:

.section .text	
.global SP_ApplicationCRC

SP_ApplicationCRC:
	ldi	r20, NVM_CMD_APP_CRC_gc    ; Prepare NVM command in R20.
     326:	48 e3       	ldi	r20, 0x38	; 56
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     328:	11 c0       	rjmp	.+34     	; 0x34c <SP_CommonCMD>

0000032a <SP_BootCRC>:

.section .text
.global SP_BootCRC

SP_BootCRC:
	ldi	r20, NVM_CMD_BOOT_CRC_gc   ; Prepare NVM command in R20.
     32a:	49 e3       	ldi	r20, 0x39	; 57
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     32c:	0f c0       	rjmp	.+30     	; 0x34c <SP_CommonCMD>

0000032e <SP_LockSPM>:

.section .text
.global SP_LockSPM

SP_LockSPM:
	ldi	r18, CCP_IOREG_gc     ; Prepare Protect IO-register signature in R18.
     32e:	28 ed       	ldi	r18, 0xD8	; 216
	sts	CCP, r18              ; Enable IO-register operation (this disables interrupts for 4 cycles).
     330:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	ldi	r18, NVM_SPMLOCK_bm   ; Prepare bitmask for locking SPM into R18.
     334:	21 e0       	ldi	r18, 0x01	; 1
	sts	NVM_CTRLB, r18        ; Load bitmask into NVM Control Register B, which locks SPM.
     336:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
	ret
     33a:	08 95       	ret

0000033c <SP_WaitForSPM>:

.section .text
.global SP_WaitForSPM		

SP_WaitForSPM:
	lds	r18, NVM_STATUS     ; Load the NVM Status register.
     33c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc	r18, NVM_NVMBUSY_bp ; Check if bit is cleared.
     340:	27 fd       	sbrc	r18, 7
	rjmp	SP_WaitForSPM       ; Repeat check if bit is not cleared.
     342:	fc cf       	rjmp	.-8      	; 0x33c <SP_WaitForSPM>
	clr	r18
     344:	22 27       	eor	r18, r18
	sts	NVM_CMD, r18        ; Clear up command register to NO_OPERATION.
     346:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ret
     34a:	08 95       	ret

0000034c <SP_CommonCMD>:
; ---

.section .text		

SP_CommonCMD:
	sts	NVM_CMD, r20        ; Load command into NVM Command register.
     34c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_IOREG_gc   ; Prepare Protect IO-register signature in R18.
     350:	28 ed       	ldi	r18, 0xD8	; 216
	ldi	r19, NVM_CMDEX_bm   ; Prepare bitmask for setting NVM Command Execute bit into R19.
     352:	31 e0       	ldi	r19, 0x01	; 1
	sts	CCP, r18            ; Enable IO-register operation (this disables interrupts for 4 cycles).
     354:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	sts	NVM_CTRLA, r19      ; Load bitmask into NVM Control Register A, which executes the command.
     358:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
	lds	r22, NVM_DATA0      ; Load NVM Data Register 0 into R22.
     35c:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	lds	r23, NVM_DATA1      ; Load NVM Data Register 1 into R23.
     360:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
	lds	r24, NVM_DATA2      ; Load NVM Data Register 2 into R24.
     364:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
	clr	r25                 ; Clear R25 in order to return a clean 32-bit value.
     368:	99 27       	eor	r25, r25
	ret
     36a:	08 95       	ret

0000036c <SP_CommonLPM>:
; ---

.section .text		

SP_CommonLPM:
	movw	ZL, r24             ; Load index into Z.
     36c:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20        ; Load prepared command into NVM Command register.
     36e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm	r24,Z
     372:	84 91       	lpm	r24, Z
	ret
     374:	08 95       	ret

00000376 <PrintStatusRequired>:
volatile char _args[32];
volatile char _index = 0;

void PrintStatusRequired(StatusEnum requiredStatus)
{
	switch (requiredStatus)
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	e1 f0       	breq	.+56     	; 0x3b2 <PrintStatusRequired+0x3c>
     37a:	30 f0       	brcs	.+12     	; 0x388 <PrintStatusRequired+0x12>
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	71 f1       	breq	.+92     	; 0x3dc <PrintStatusRequired+0x66>
     380:	83 30       	cpi	r24, 0x03	; 3
     382:	09 f4       	brne	.+2      	; 0x386 <PrintStatusRequired+0x10>
     384:	40 c0       	rjmp	.+128    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     386:	08 95       	ret
	{
		case Stopped:
		printf("%s %s\r\n", STATUS_PRE_MUST, STOPPED_STATUS);
     388:	86 ed       	ldi	r24, 0xD6	; 214
     38a:	90 e2       	ldi	r25, 0x20	; 32
     38c:	9f 93       	push	r25
     38e:	8f 93       	push	r24
     390:	8e ed       	ldi	r24, 0xDE	; 222
     392:	90 e2       	ldi	r25, 0x20	; 32
     394:	9f 93       	push	r25
     396:	8f 93       	push	r24
     398:	8e ee       	ldi	r24, 0xEE	; 238
     39a:	90 e2       	ldi	r25, 0x20	; 32
     39c:	9f 93       	push	r25
     39e:	8f 93       	push	r24
     3a0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	08 95       	ret
		case Running:
		printf("%s %s\r\n", STATUS_PRE_MUST, RUNNING_STATUS);
     3b2:	86 ef       	ldi	r24, 0xF6	; 246
     3b4:	90 e2       	ldi	r25, 0x20	; 32
     3b6:	9f 93       	push	r25
     3b8:	8f 93       	push	r24
     3ba:	8e ed       	ldi	r24, 0xDE	; 222
     3bc:	90 e2       	ldi	r25, 0x20	; 32
     3be:	9f 93       	push	r25
     3c0:	8f 93       	push	r24
     3c2:	8e ee       	ldi	r24, 0xEE	; 238
     3c4:	90 e2       	ldi	r25, 0x20	; 32
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	08 95       	ret
		case Test1:
		printf("%s %s\r\n", STATUS_PRE_MUST, TEST1_STATUS);
     3dc:	8e ef       	ldi	r24, 0xFE	; 254
     3de:	90 e2       	ldi	r25, 0x20	; 32
     3e0:	9f 93       	push	r25
     3e2:	8f 93       	push	r24
     3e4:	8e ed       	ldi	r24, 0xDE	; 222
     3e6:	90 e2       	ldi	r25, 0x20	; 32
     3e8:	9f 93       	push	r25
     3ea:	8f 93       	push	r24
     3ec:	8e ee       	ldi	r24, 0xEE	; 238
     3ee:	90 e2       	ldi	r25, 0x20	; 32
     3f0:	9f 93       	push	r25
     3f2:	8f 93       	push	r24
     3f4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	08 95       	ret
		case Test2:
		printf("%s %s\r\n", STATUS_PRE_MUST, Test2);
     406:	1f 92       	push	r1
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	8f 93       	push	r24
     40c:	8e ed       	ldi	r24, 0xDE	; 222
     40e:	90 e2       	ldi	r25, 0x20	; 32
     410:	9f 93       	push	r25
     412:	8f 93       	push	r24
     414:	8e ee       	ldi	r24, 0xEE	; 238
     416:	90 e2       	ldi	r25, 0x20	; 32
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	08 95       	ret

0000042e <PrintStatusCannotBe>:
	
}

void PrintStatusCannotBe(StatusEnum requiredStatus)
{
	switch (requiredStatus)
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	e1 f0       	breq	.+56     	; 0x46a <PrintStatusCannotBe+0x3c>
     432:	30 f0       	brcs	.+12     	; 0x440 <PrintStatusCannotBe+0x12>
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	71 f1       	breq	.+92     	; 0x494 <PrintStatusCannotBe+0x66>
     438:	83 30       	cpi	r24, 0x03	; 3
     43a:	09 f4       	brne	.+2      	; 0x43e <PrintStatusCannotBe+0x10>
     43c:	40 c0       	rjmp	.+128    	; 0x4be <PrintStatusCannotBe+0x90>
     43e:	08 95       	ret
	{
		case Stopped:
		printf("%s %s\r\n", STATUS_PRE_NOT, STOPPED_STATUS);
     440:	86 ed       	ldi	r24, 0xD6	; 214
     442:	90 e2       	ldi	r25, 0x20	; 32
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	91 e2       	ldi	r25, 0x21	; 33
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	8e ee       	ldi	r24, 0xEE	; 238
     452:	90 e2       	ldi	r25, 0x20	; 32
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	08 95       	ret
		case Running:
		printf("%s %s\r\n", STATUS_PRE_NOT, RUNNING_STATUS);
     46a:	86 ef       	ldi	r24, 0xF6	; 246
     46c:	90 e2       	ldi	r25, 0x20	; 32
     46e:	9f 93       	push	r25
     470:	8f 93       	push	r24
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	91 e2       	ldi	r25, 0x21	; 33
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	8e ee       	ldi	r24, 0xEE	; 238
     47c:	90 e2       	ldi	r25, 0x20	; 32
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	08 95       	ret
		case Test1:
		printf("%s %s\r\n", STATUS_PRE_NOT, TEST1_STATUS);
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	90 e2       	ldi	r25, 0x20	; 32
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	91 e2       	ldi	r25, 0x21	; 33
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	90 e2       	ldi	r25, 0x20	; 32
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	08 95       	ret
		case Test2:
		printf("%s %s\r\n", STATUS_PRE_NOT, Test2);
     4be:	1f 92       	push	r1
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	8f 93       	push	r24
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	91 e2       	ldi	r25, 0x21	; 33
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	8e ee       	ldi	r24, 0xEE	; 238
     4ce:	90 e2       	ldi	r25, 0x20	; 32
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		break;
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	08 95       	ret

000004e6 <ProcessExcCommand>:
	}
	
}

void ProcessExcCommand(char command[])
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ec 01       	movw	r28, r24
	printf("                               \r");
     4ec:	86 e1       	ldi	r24, 0x16	; 22
     4ee:	91 e2       	ldi	r25, 0x21	; 33
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	
	if (strcmp(command, LOG_ON_CMD) == 0)
     4f8:	67 e3       	ldi	r22, 0x37	; 55
     4fa:	71 e2       	ldi	r23, 0x21	; 33
     4fc:	ce 01       	movw	r24, r28
     4fe:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	89 2b       	or	r24, r25
     508:	c9 f4       	brne	.+50     	; 0x53c <ProcessExcCommand+0x56>
	{
		if (_ovenStatus != Running)
     50a:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	19 f0       	breq	.+6      	; 0x518 <ProcessExcCommand+0x32>
		{
			PrintStatusRequired(Running);
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	30 df       	rcall	.-416    	; 0x376 <PrintStatusRequired>
			return;
     516:	42 c1       	rjmp	.+644    	; 0x79c <ProcessExcCommand+0x2b6>
		}	
		printf("%.8s\r\n", LOG_ON_CMD);
     518:	87 e3       	ldi	r24, 0x37	; 55
     51a:	91 e2       	ldi	r25, 0x21	; 33
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	8d e3       	ldi	r24, 0x3D	; 61
     522:	91 e2       	ldi	r25, 0x21	; 33
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		_logEnabled = 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <_logEnabled>
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	28 c1       	rjmp	.+592    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, LOG_OFF_CMD) == 0)
     53c:	64 e4       	ldi	r22, 0x44	; 68
     53e:	71 e2       	ldi	r23, 0x21	; 33
     540:	ce 01       	movw	r24, r28
     542:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     546:	89 2b       	or	r24, r25
     548:	89 f4       	brne	.+34     	; 0x56c <ProcessExcCommand+0x86>
	{
		printf("%.8s\r\n", LOG_OFF_CMD);
     54a:	84 e4       	ldi	r24, 0x44	; 68
     54c:	91 e2       	ldi	r25, 0x21	; 33
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	8d e3       	ldi	r24, 0x3D	; 61
     554:	91 e2       	ldi	r25, 0x21	; 33
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		_logEnabled = 0;		
     55e:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <_logEnabled>
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	10 c1       	rjmp	.+544    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, HEAT_T_ON_CMD) == 0)
     56c:	6b e4       	ldi	r22, 0x4B	; 75
     56e:	71 e2       	ldi	r23, 0x21	; 33
     570:	ce 01       	movw	r24, r28
     572:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     576:	89 2b       	or	r24, r25
     578:	b1 f4       	brne	.+44     	; 0x5a6 <ProcessExcCommand+0xc0>
	{
		if (_ovenStatus != Stopped)
     57a:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     57e:	88 23       	and	r24, r24
     580:	19 f0       	breq	.+6      	; 0x588 <ProcessExcCommand+0xa2>
		{
			PrintStatusRequired(Stopped);
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	f8 de       	rcall	.-528    	; 0x376 <PrintStatusRequired>
			return;
     586:	0a c1       	rjmp	.+532    	; 0x79c <ProcessExcCommand+0x2b6>
		}		
		printf("%.8s\r\n", HEAT_T_ON_CMD);
     588:	8b e4       	ldi	r24, 0x4B	; 75
     58a:	91 e2       	ldi	r25, 0x21	; 33
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	8d e3       	ldi	r24, 0x3D	; 61
     592:	91 e2       	ldi	r25, 0x21	; 33
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	f3 c0       	rjmp	.+486    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, HEAT_T_OFF_CMD) == 0)
     5a6:	60 e5       	ldi	r22, 0x50	; 80
     5a8:	71 e2       	ldi	r23, 0x21	; 33
     5aa:	ce 01       	movw	r24, r28
     5ac:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     5b0:	89 2b       	or	r24, r25
     5b2:	b1 f4       	brne	.+44     	; 0x5e0 <ProcessExcCommand+0xfa>
	{
		if (_ovenStatus != Stopped)
     5b4:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     5b8:	88 23       	and	r24, r24
     5ba:	19 f0       	breq	.+6      	; 0x5c2 <ProcessExcCommand+0xdc>
		{
			PrintStatusRequired(Stopped);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	db de       	rcall	.-586    	; 0x376 <PrintStatusRequired>
			return;
     5c0:	ed c0       	rjmp	.+474    	; 0x79c <ProcessExcCommand+0x2b6>
		}			
		printf("%.8s\r\n", HEAT_T_OFF_CMD);
     5c2:	80 e5       	ldi	r24, 0x50	; 80
     5c4:	91 e2       	ldi	r25, 0x21	; 33
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	8d e3       	ldi	r24, 0x3D	; 61
     5cc:	91 e2       	ldi	r25, 0x21	; 33
     5ce:	9f 93       	push	r25
     5d0:	8f 93       	push	r24
     5d2:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	d6 c0       	rjmp	.+428    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, HEAT_B_ON_CMD) == 0)
     5e0:	66 e5       	ldi	r22, 0x56	; 86
     5e2:	71 e2       	ldi	r23, 0x21	; 33
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     5ea:	89 2b       	or	r24, r25
     5ec:	b1 f4       	brne	.+44     	; 0x61a <ProcessExcCommand+0x134>
	{
		if (_ovenStatus != Stopped)
     5ee:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     5f2:	88 23       	and	r24, r24
     5f4:	19 f0       	breq	.+6      	; 0x5fc <ProcessExcCommand+0x116>
		{
			PrintStatusRequired(Stopped);
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	be de       	rcall	.-644    	; 0x376 <PrintStatusRequired>
			return;
     5fa:	d0 c0       	rjmp	.+416    	; 0x79c <ProcessExcCommand+0x2b6>
		}		
		printf("%.8s\r\n", HEAT_B_ON_CMD);
     5fc:	86 e5       	ldi	r24, 0x56	; 86
     5fe:	91 e2       	ldi	r25, 0x21	; 33
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	8d e3       	ldi	r24, 0x3D	; 61
     606:	91 e2       	ldi	r25, 0x21	; 33
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	b9 c0       	rjmp	.+370    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, HEAT_B_OFF_CMD) == 0)
     61a:	6b e5       	ldi	r22, 0x5B	; 91
     61c:	71 e2       	ldi	r23, 0x21	; 33
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     624:	89 2b       	or	r24, r25
     626:	b1 f4       	brne	.+44     	; 0x654 <ProcessExcCommand+0x16e>
	{
		if (_ovenStatus != Stopped)
     628:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     62c:	88 23       	and	r24, r24
     62e:	19 f0       	breq	.+6      	; 0x636 <ProcessExcCommand+0x150>
		{
			PrintStatusRequired(Stopped);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	a1 de       	rcall	.-702    	; 0x376 <PrintStatusRequired>
			return;
     634:	b3 c0       	rjmp	.+358    	; 0x79c <ProcessExcCommand+0x2b6>
		}		
		printf("%.8s\r\n", HEAT_B_OFF_CMD);
     636:	8b e5       	ldi	r24, 0x5B	; 91
     638:	91 e2       	ldi	r25, 0x21	; 33
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	8d e3       	ldi	r24, 0x3D	; 61
     640:	91 e2       	ldi	r25, 0x21	; 33
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	9c c0       	rjmp	.+312    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, FAN_ON_CMD) == 0)
     654:	61 e6       	ldi	r22, 0x61	; 97
     656:	71 e2       	ldi	r23, 0x21	; 33
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     65e:	89 2b       	or	r24, r25
     660:	a9 f4       	brne	.+42     	; 0x68c <ProcessExcCommand+0x1a6>
	{
		if (_ovenStatus == Running)
     662:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	11 f4       	brne	.+4      	; 0x66e <ProcessExcCommand+0x188>
		{
			PrintStatusCannotBe(Running);
     66a:	e1 de       	rcall	.-574    	; 0x42e <PrintStatusCannotBe>
			return;
     66c:	97 c0       	rjmp	.+302    	; 0x79c <ProcessExcCommand+0x2b6>
		}
		printf("%.8s\r\n", FAN_ON_CMD);
     66e:	81 e6       	ldi	r24, 0x61	; 97
     670:	91 e2       	ldi	r25, 0x21	; 33
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	8d e3       	ldi	r24, 0x3D	; 61
     678:	91 e2       	ldi	r25, 0x21	; 33
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	80 c0       	rjmp	.+256    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, BACKLIGHT_ON_CMD) == 0)
     68c:	67 e6       	ldi	r22, 0x67	; 103
     68e:	71 e2       	ldi	r23, 0x21	; 33
     690:	ce 01       	movw	r24, r28
     692:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     696:	89 2b       	or	r24, r25
     698:	79 f4       	brne	.+30     	; 0x6b8 <ProcessExcCommand+0x1d2>
		printf("%.8s\r\n", BACKLIGHT_ON_CMD);
     69a:	87 e6       	ldi	r24, 0x67	; 103
     69c:	91 e2       	ldi	r25, 0x21	; 33
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	8d e3       	ldi	r24, 0x3D	; 61
     6a4:	91 e2       	ldi	r25, 0x21	; 33
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	6a c0       	rjmp	.+212    	; 0x78c <ProcessExcCommand+0x2a6>
	else if (strcmp(command, BACKLIGHT_OFF_CMD) == 0)
     6b8:	6c e6       	ldi	r22, 0x6C	; 108
     6ba:	71 e2       	ldi	r23, 0x21	; 33
     6bc:	ce 01       	movw	r24, r28
     6be:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     6c2:	89 2b       	or	r24, r25
     6c4:	79 f4       	brne	.+30     	; 0x6e4 <ProcessExcCommand+0x1fe>
		printf("%.8s\r\n", BACKLIGHT_OFF_CMD);
     6c6:	8c e6       	ldi	r24, 0x6C	; 108
     6c8:	91 e2       	ldi	r25, 0x21	; 33
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	8d e3       	ldi	r24, 0x3D	; 61
     6d0:	91 e2       	ldi	r25, 0x21	; 33
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <ProcessExcCommand+0x2a6>
	else if (strcmp(command, RUN_CMD) == 0)
     6e4:	62 e7       	ldi	r22, 0x72	; 114
     6e6:	71 e2       	ldi	r23, 0x21	; 33
     6e8:	ce 01       	movw	r24, r28
     6ea:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     6ee:	89 2b       	or	r24, r25
     6f0:	b1 f4       	brne	.+44     	; 0x71e <ProcessExcCommand+0x238>
	{
		if (_ovenStatus != Stopped)
     6f2:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     6f6:	88 23       	and	r24, r24
     6f8:	19 f0       	breq	.+6      	; 0x700 <ProcessExcCommand+0x21a>
		{
			PrintStatusRequired(Stopped);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	3c de       	rcall	.-904    	; 0x376 <PrintStatusRequired>
			return;
     6fe:	4e c0       	rjmp	.+156    	; 0x79c <ProcessExcCommand+0x2b6>
		}		
		printf("%.8s\r\n", RUN_CMD);
     700:	82 e7       	ldi	r24, 0x72	; 114
     702:	91 e2       	ldi	r25, 0x21	; 33
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	8d e3       	ldi	r24, 0x3D	; 61
     70a:	91 e2       	ldi	r25, 0x21	; 33
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	37 c0       	rjmp	.+110    	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, STOP_CMD) == 0)
     71e:	66 e7       	ldi	r22, 0x76	; 118
     720:	71 e2       	ldi	r23, 0x21	; 33
     722:	ce 01       	movw	r24, r28
     724:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     728:	89 2b       	or	r24, r25
     72a:	b1 f4       	brne	.+44     	; 0x758 <ProcessExcCommand+0x272>
	{
		if (_ovenStatus != Running)
     72c:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	19 f0       	breq	.+6      	; 0x73a <ProcessExcCommand+0x254>
		{
			PrintStatusRequired(Running);
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	1f de       	rcall	.-962    	; 0x376 <PrintStatusRequired>
			return;
     738:	31 c0       	rjmp	.+98     	; 0x79c <ProcessExcCommand+0x2b6>
		}		
		printf("%.8s\r\n", STOP_CMD);
     73a:	86 e7       	ldi	r24, 0x76	; 118
     73c:	91 e2       	ldi	r25, 0x21	; 33
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	8d e3       	ldi	r24, 0x3D	; 61
     744:	91 e2       	ldi	r25, 0x21	; 33
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	1a c0       	rjmp	.+52     	; 0x78c <ProcessExcCommand+0x2a6>
	}
	else if (strcmp(command, STOP_ALL_CMD) == 0)
     758:	6b e7       	ldi	r22, 0x7B	; 123
     75a:	71 e2       	ldi	r23, 0x21	; 33
     75c:	ce 01       	movw	r24, r28
     75e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     762:	89 2b       	or	r24, r25
     764:	79 f4       	brne	.+30     	; 0x784 <ProcessExcCommand+0x29e>
		printf("%.8s\r\n", STOP_ALL_CMD);
     766:	8b e7       	ldi	r24, 0x7B	; 123
     768:	91 e2       	ldi	r25, 0x21	; 33
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	8d e3       	ldi	r24, 0x3D	; 61
     770:	91 e2       	ldi	r25, 0x21	; 33
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	04 c0       	rjmp	.+8      	; 0x78c <ProcessExcCommand+0x2a6>
	else
		printf("UNKNOWN COMMAND\r\n");
     784:	83 e8       	ldi	r24, 0x83	; 131
     786:	91 e2       	ldi	r25, 0x21	; 33
     788:	0e 94 0c 19 	call	0x3218	; 0x3218 <puts>

	if (_ovenStatus == Test2)
     78c:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	21 f4       	brne	.+8      	; 0x79c <ProcessExcCommand+0x2b6>
	printf("Test2\r\n");
     794:	84 e9       	ldi	r24, 0x94	; 148
     796:	91 e2       	ldi	r25, 0x21	; 33
     798:	0e 94 0c 19 	call	0x3218	; 0x3218 <puts>
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <ProcessQueryCommand>:

void ProcessQueryCommand(char command[])
{
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <ProcessQueryCommand+0xa>
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	8c 01       	movw	r16, r24
	uint8_t buff[3];

	if (strcmp(command, TEMP_CMD) == 0)
     7b2:	6b e9       	ldi	r22, 0x9B	; 155
     7b4:	71 e2       	ldi	r23, 0x21	; 33
     7b6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     7ba:	89 2b       	or	r24, r25
     7bc:	01 f5       	brne	.+64     	; 0x7fe <ProcessQueryCommand+0x5c>
	{
		printf("%.8s\r\n", TEMP_CMD);
     7be:	8b e9       	ldi	r24, 0x9B	; 155
     7c0:	91 e2       	ldi	r25, 0x21	; 33
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	8d e3       	ldi	r24, 0x3D	; 61
     7c8:	91 e2       	ldi	r25, 0x21	; 33
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		nvm_flash_read_buffer(0, buff, 3);
     7d2:	23 e0       	ldi	r18, 0x03	; 3
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	8e 01       	movw	r16, r28
     7d8:	0f 5f       	subi	r16, 0xFF	; 255
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	a8 01       	movw	r20, r16
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	cb 01       	movw	r24, r22
     7e4:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <nvm_flash_read_buffer>
		printf("%.3s\r\n", buff);
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	91 e2       	ldi	r25, 0x21	; 33
     7f0:	9f 93       	push	r25
     7f2:	8f 93       	push	r24
     7f4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	22 c1       	rjmp	.+580    	; 0xa42 <ProcessQueryCommand+0x2a0>
	}
	else if (strcmp(command, TIME_CMD) == 0)
     7fe:	67 ea       	ldi	r22, 0xA7	; 167
     800:	71 e2       	ldi	r23, 0x21	; 33
     802:	c8 01       	movw	r24, r16
     804:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     808:	89 2b       	or	r24, r25
     80a:	79 f4       	brne	.+30     	; 0x82a <ProcessQueryCommand+0x88>
		printf("%.8s\r\n", TIME_CMD);
     80c:	87 ea       	ldi	r24, 0xA7	; 167
     80e:	91 e2       	ldi	r25, 0x21	; 33
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	8d e3       	ldi	r24, 0x3D	; 61
     816:	91 e2       	ldi	r25, 0x21	; 33
     818:	9f 93       	push	r25
     81a:	8f 93       	push	r24
     81c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0c c1       	rjmp	.+536    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, HEAT_T_CMD) == 0)
     82a:	6c ea       	ldi	r22, 0xAC	; 172
     82c:	71 e2       	ldi	r23, 0x21	; 33
     82e:	c8 01       	movw	r24, r16
     830:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     834:	89 2b       	or	r24, r25
     836:	79 f4       	brne	.+30     	; 0x856 <ProcessQueryCommand+0xb4>
		printf("%.8s\r\n", HEAT_T_CMD);
     838:	8c ea       	ldi	r24, 0xAC	; 172
     83a:	91 e2       	ldi	r25, 0x21	; 33
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	8d e3       	ldi	r24, 0x3D	; 61
     842:	91 e2       	ldi	r25, 0x21	; 33
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	f6 c0       	rjmp	.+492    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, HEAT_B_CMD) == 0)
     856:	6f ea       	ldi	r22, 0xAF	; 175
     858:	71 e2       	ldi	r23, 0x21	; 33
     85a:	c8 01       	movw	r24, r16
     85c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     860:	89 2b       	or	r24, r25
     862:	79 f4       	brne	.+30     	; 0x882 <ProcessQueryCommand+0xe0>
		printf("%.8s\r\n", HEAT_B_CMD);
     864:	8f ea       	ldi	r24, 0xAF	; 175
     866:	91 e2       	ldi	r25, 0x21	; 33
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	8d e3       	ldi	r24, 0x3D	; 61
     86e:	91 e2       	ldi	r25, 0x21	; 33
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	e0 c0       	rjmp	.+448    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, FAN_CMD) == 0)
     882:	62 eb       	ldi	r22, 0xB2	; 178
     884:	71 e2       	ldi	r23, 0x21	; 33
     886:	c8 01       	movw	r24, r16
     888:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     88c:	89 2b       	or	r24, r25
     88e:	79 f4       	brne	.+30     	; 0x8ae <ProcessQueryCommand+0x10c>
		printf("%.8s\r\n", FAN_CMD);
     890:	82 eb       	ldi	r24, 0xB2	; 178
     892:	91 e2       	ldi	r25, 0x21	; 33
     894:	9f 93       	push	r25
     896:	8f 93       	push	r24
     898:	8d e3       	ldi	r24, 0x3D	; 61
     89a:	91 e2       	ldi	r25, 0x21	; 33
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	ca c0       	rjmp	.+404    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, BACKLIGHT_CMD) == 0)
     8ae:	66 eb       	ldi	r22, 0xB6	; 182
     8b0:	71 e2       	ldi	r23, 0x21	; 33
     8b2:	c8 01       	movw	r24, r16
     8b4:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     8b8:	89 2b       	or	r24, r25
     8ba:	79 f4       	brne	.+30     	; 0x8da <ProcessQueryCommand+0x138>
		printf("%.8s\r\n", BACKLIGHT_CMD);
     8bc:	86 eb       	ldi	r24, 0xB6	; 182
     8be:	91 e2       	ldi	r25, 0x21	; 33
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	8d e3       	ldi	r24, 0x3D	; 61
     8c6:	91 e2       	ldi	r25, 0x21	; 33
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	b4 c0       	rjmp	.+360    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, PROFILE_CMD) == 0)
     8da:	69 eb       	ldi	r22, 0xB9	; 185
     8dc:	71 e2       	ldi	r23, 0x21	; 33
     8de:	c8 01       	movw	r24, r16
     8e0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     8e4:	89 2b       	or	r24, r25
     8e6:	79 f4       	brne	.+30     	; 0x906 <ProcessQueryCommand+0x164>
		printf("%.8s\r\n", PROFILE_CMD);
     8e8:	89 eb       	ldi	r24, 0xB9	; 185
     8ea:	91 e2       	ldi	r25, 0x21	; 33
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	8d e3       	ldi	r24, 0x3D	; 61
     8f2:	91 e2       	ldi	r25, 0x21	; 33
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	9e c0       	rjmp	.+316    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, STATUS_CMD) == 0)
     906:	6e eb       	ldi	r22, 0xBE	; 190
     908:	71 e2       	ldi	r23, 0x21	; 33
     90a:	c8 01       	movw	r24, r16
     90c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     910:	89 2b       	or	r24, r25
     912:	79 f4       	brne	.+30     	; 0x932 <ProcessQueryCommand+0x190>
		printf("%.8s\r\n", STATUS_CMD);
     914:	8e eb       	ldi	r24, 0xBE	; 190
     916:	91 e2       	ldi	r25, 0x21	; 33
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	8d e3       	ldi	r24, 0x3D	; 61
     91e:	91 e2       	ldi	r25, 0x21	; 33
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	88 c0       	rjmp	.+272    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, CAL_HIGH_CMD) == 0)
     932:	63 ec       	ldi	r22, 0xC3	; 195
     934:	71 e2       	ldi	r23, 0x21	; 33
     936:	c8 01       	movw	r24, r16
     938:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     93c:	89 2b       	or	r24, r25
     93e:	79 f4       	brne	.+30     	; 0x95e <ProcessQueryCommand+0x1bc>
		printf("%.8s\r\n", CAL_HIGH_CMD);
     940:	83 ec       	ldi	r24, 0xC3	; 195
     942:	91 e2       	ldi	r25, 0x21	; 33
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	8d e3       	ldi	r24, 0x3D	; 61
     94a:	91 e2       	ldi	r25, 0x21	; 33
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	72 c0       	rjmp	.+228    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, CAL_MID_CMD) == 0)
     95e:	68 ec       	ldi	r22, 0xC8	; 200
     960:	71 e2       	ldi	r23, 0x21	; 33
     962:	c8 01       	movw	r24, r16
     964:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     968:	89 2b       	or	r24, r25
     96a:	79 f4       	brne	.+30     	; 0x98a <ProcessQueryCommand+0x1e8>
		printf("%.8s\r\n", CAL_MID_CMD);
     96c:	88 ec       	ldi	r24, 0xC8	; 200
     96e:	91 e2       	ldi	r25, 0x21	; 33
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	8d e3       	ldi	r24, 0x3D	; 61
     976:	91 e2       	ldi	r25, 0x21	; 33
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	5c c0       	rjmp	.+184    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, CAL_LOW_CMD) == 0)
     98a:	6d ec       	ldi	r22, 0xCD	; 205
     98c:	71 e2       	ldi	r23, 0x21	; 33
     98e:	c8 01       	movw	r24, r16
     990:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     994:	89 2b       	or	r24, r25
     996:	79 f4       	brne	.+30     	; 0x9b6 <ProcessQueryCommand+0x214>
		printf("%.8s\r\n", CAL_LOW_CMD);
     998:	8d ec       	ldi	r24, 0xCD	; 205
     99a:	91 e2       	ldi	r25, 0x21	; 33
     99c:	9f 93       	push	r25
     99e:	8f 93       	push	r24
     9a0:	8d e3       	ldi	r24, 0x3D	; 61
     9a2:	91 e2       	ldi	r25, 0x21	; 33
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	46 c0       	rjmp	.+140    	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, BL_ON_TIME_CMD) == 0)
     9b6:	62 ed       	ldi	r22, 0xD2	; 210
     9b8:	71 e2       	ldi	r23, 0x21	; 33
     9ba:	c8 01       	movw	r24, r16
     9bc:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     9c0:	89 2b       	or	r24, r25
     9c2:	79 f4       	brne	.+30     	; 0x9e2 <ProcessQueryCommand+0x240>
		printf("%.8s\r\n", BL_ON_TIME_CMD);
     9c4:	82 ed       	ldi	r24, 0xD2	; 210
     9c6:	91 e2       	ldi	r25, 0x21	; 33
     9c8:	9f 93       	push	r25
     9ca:	8f 93       	push	r24
     9cc:	8d e3       	ldi	r24, 0x3D	; 61
     9ce:	91 e2       	ldi	r25, 0x21	; 33
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	30 c0       	rjmp	.+96     	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, PROFILES_CMD) == 0)
     9e2:	68 ed       	ldi	r22, 0xD8	; 216
     9e4:	71 e2       	ldi	r23, 0x21	; 33
     9e6:	c8 01       	movw	r24, r16
     9e8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     9ec:	89 2b       	or	r24, r25
     9ee:	79 f4       	brne	.+30     	; 0xa0e <ProcessQueryCommand+0x26c>
		printf("%.8s\r\n", PROFILES_CMD);
     9f0:	88 ed       	ldi	r24, 0xD8	; 216
     9f2:	91 e2       	ldi	r25, 0x21	; 33
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	8d e3       	ldi	r24, 0x3D	; 61
     9fa:	91 e2       	ldi	r25, 0x21	; 33
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	1a c0       	rjmp	.+52     	; 0xa42 <ProcessQueryCommand+0x2a0>
	else if (strcmp(command, PROF_CFG_CMD) == 0)
     a0e:	6e ed       	ldi	r22, 0xDE	; 222
     a10:	71 e2       	ldi	r23, 0x21	; 33
     a12:	c8 01       	movw	r24, r16
     a14:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     a18:	89 2b       	or	r24, r25
     a1a:	79 f4       	brne	.+30     	; 0xa3a <ProcessQueryCommand+0x298>
		printf("%.8s\r\n", PROF_CFG_CMD);
     a1c:	8e ed       	ldi	r24, 0xDE	; 222
     a1e:	91 e2       	ldi	r25, 0x21	; 33
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	8d e3       	ldi	r24, 0x3D	; 61
     a26:	91 e2       	ldi	r25, 0x21	; 33
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <ProcessQueryCommand+0x2a0>
	else
		printf("UNKNOWN QUERY COMMAND\r\n");													
     a3a:	83 ee       	ldi	r24, 0xE3	; 227
     a3c:	91 e2       	ldi	r25, 0x21	; 33
     a3e:	0e 94 0c 19 	call	0x3218	; 0x3218 <puts>
}
     a42:	23 96       	adiw	r28, 0x03	; 3
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <ProcessSetCommand>:

void ProcessSetCommand(char command[], char args[])
{
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	f6 2e       	mov	r15, r22
     a60:	17 2f       	mov	r17, r23
	printf("                               \r");
     a62:	86 e1       	ldi	r24, 0x16	; 22
     a64:	91 e2       	ldi	r25, 0x21	; 33
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	
	if (strcmp(command, TEMP_CMD) == 0)
     a6e:	6b e9       	ldi	r22, 0x9B	; 155
     a70:	71 e2       	ldi	r23, 0x21	; 33
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	89 2b       	or	r24, r25
     a7e:	e9 f4       	brne	.+58     	; 0xaba <ProcessSetCommand+0x68>
		//if (_ovenStatus != Stopped)
		//{
			//PrintStatusRequired(Stopped);
			//return;
		//}		
		printf("%.8s = %.32s\r\n", TEMP_CMD, args);
     a80:	1f 93       	push	r17
     a82:	ff 92       	push	r15
     a84:	8b e9       	ldi	r24, 0x9B	; 155
     a86:	91 e2       	ldi	r25, 0x21	; 33
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	8a ef       	ldi	r24, 0xFA	; 250
     a8e:	91 e2       	ldi	r25, 0x21	; 33
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		nvm_flash_erase_and_write_buffer(0, args, 3, false);
     a98:	00 e0       	ldi	r16, 0x00	; 0
     a9a:	23 e0       	ldi	r18, 0x03	; 3
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	4f 2d       	mov	r20, r15
     aa0:	51 2f       	mov	r21, r17
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	cb 01       	movw	r24, r22
     aa8:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nvm_flash_erase_and_write_buffer>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	c8 c0       	rjmp	.+400    	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else if (strcmp(command, PROFILE_CMD) == 0)
     aba:	69 eb       	ldi	r22, 0xB9	; 185
     abc:	71 e2       	ldi	r23, 0x21	; 33
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     ac4:	89 2b       	or	r24, r25
     ac6:	b1 f4       	brne	.+44     	; 0xaf4 <ProcessSetCommand+0xa2>
	{
		if (_ovenStatus != Stopped)
     ac8:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     acc:	88 23       	and	r24, r24
     ace:	19 f0       	breq	.+6      	; 0xad6 <ProcessSetCommand+0x84>
		{
			PrintStatusRequired(Stopped);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	51 dc       	rcall	.-1886   	; 0x376 <PrintStatusRequired>
			return;
     ad4:	ba c0       	rjmp	.+372    	; 0xc4a <ProcessSetCommand+0x1f8>
		}
		printf("%.8s\r\n", PROFILE_CMD);
     ad6:	89 eb       	ldi	r24, 0xB9	; 185
     ad8:	91 e2       	ldi	r25, 0x21	; 33
     ada:	9f 93       	push	r25
     adc:	8f 93       	push	r24
     ade:	8d e3       	ldi	r24, 0x3D	; 61
     ae0:	91 e2       	ldi	r25, 0x21	; 33
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	ab c0       	rjmp	.+342    	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else if (strcmp(command, CAL_HIGH_CMD) == 0)
     af4:	63 ec       	ldi	r22, 0xC3	; 195
     af6:	71 e2       	ldi	r23, 0x21	; 33
     af8:	ce 01       	movw	r24, r28
     afa:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     afe:	89 2b       	or	r24, r25
     b00:	b1 f4       	brne	.+44     	; 0xb2e <ProcessSetCommand+0xdc>
	{
		if (_ovenStatus != Stopped)
     b02:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     b06:	88 23       	and	r24, r24
     b08:	19 f0       	breq	.+6      	; 0xb10 <ProcessSetCommand+0xbe>
		{
			PrintStatusRequired(Stopped);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	34 dc       	rcall	.-1944   	; 0x376 <PrintStatusRequired>
			return;
     b0e:	9d c0       	rjmp	.+314    	; 0xc4a <ProcessSetCommand+0x1f8>
		}
		printf("%.8s\r\n", CAL_HIGH_CMD);
     b10:	83 ec       	ldi	r24, 0xC3	; 195
     b12:	91 e2       	ldi	r25, 0x21	; 33
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	8d e3       	ldi	r24, 0x3D	; 61
     b1a:	91 e2       	ldi	r25, 0x21	; 33
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	8e c0       	rjmp	.+284    	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else if (strcmp(command, CAL_MID_CMD) == 0)
     b2e:	68 ec       	ldi	r22, 0xC8	; 200
     b30:	71 e2       	ldi	r23, 0x21	; 33
     b32:	ce 01       	movw	r24, r28
     b34:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     b38:	89 2b       	or	r24, r25
     b3a:	b1 f4       	brne	.+44     	; 0xb68 <ProcessSetCommand+0x116>
	{
		if (_ovenStatus != Stopped)
     b3c:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     b40:	88 23       	and	r24, r24
     b42:	19 f0       	breq	.+6      	; 0xb4a <ProcessSetCommand+0xf8>
		{
			PrintStatusRequired(Stopped);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	17 dc       	rcall	.-2002   	; 0x376 <PrintStatusRequired>
			return;
     b48:	80 c0       	rjmp	.+256    	; 0xc4a <ProcessSetCommand+0x1f8>
		}		
		printf("%.8s\r\n", CAL_MID_CMD);
     b4a:	88 ec       	ldi	r24, 0xC8	; 200
     b4c:	91 e2       	ldi	r25, 0x21	; 33
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	8d e3       	ldi	r24, 0x3D	; 61
     b54:	91 e2       	ldi	r25, 0x21	; 33
     b56:	9f 93       	push	r25
     b58:	8f 93       	push	r24
     b5a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	71 c0       	rjmp	.+226    	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else if (strcmp(command, CAL_LOW_CMD) == 0)
     b68:	6d ec       	ldi	r22, 0xCD	; 205
     b6a:	71 e2       	ldi	r23, 0x21	; 33
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     b72:	89 2b       	or	r24, r25
     b74:	b1 f4       	brne	.+44     	; 0xba2 <ProcessSetCommand+0x150>
	{
		if (_ovenStatus != Stopped)
     b76:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     b7a:	88 23       	and	r24, r24
     b7c:	19 f0       	breq	.+6      	; 0xb84 <ProcessSetCommand+0x132>
		{
			PrintStatusRequired(Stopped);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	fa db       	rcall	.-2060   	; 0x376 <PrintStatusRequired>
			return;
     b82:	63 c0       	rjmp	.+198    	; 0xc4a <ProcessSetCommand+0x1f8>
		}		
		printf("%.8s\r\n", CAL_LOW_CMD);
     b84:	8d ec       	ldi	r24, 0xCD	; 205
     b86:	91 e2       	ldi	r25, 0x21	; 33
     b88:	9f 93       	push	r25
     b8a:	8f 93       	push	r24
     b8c:	8d e3       	ldi	r24, 0x3D	; 61
     b8e:	91 e2       	ldi	r25, 0x21	; 33
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	54 c0       	rjmp	.+168    	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else if (strcmp(command, BL_ON_TIME_CMD) == 0)
     ba2:	62 ed       	ldi	r22, 0xD2	; 210
     ba4:	71 e2       	ldi	r23, 0x21	; 33
     ba6:	ce 01       	movw	r24, r28
     ba8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     bac:	89 2b       	or	r24, r25
     bae:	79 f4       	brne	.+30     	; 0xbce <ProcessSetCommand+0x17c>
		printf("%.8s\r\n", BL_ON_TIME_CMD);
     bb0:	82 ed       	ldi	r24, 0xD2	; 210
     bb2:	91 e2       	ldi	r25, 0x21	; 33
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	8d e3       	ldi	r24, 0x3D	; 61
     bba:	91 e2       	ldi	r25, 0x21	; 33
     bbc:	9f 93       	push	r25
     bbe:	8f 93       	push	r24
     bc0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	3e c0       	rjmp	.+124    	; 0xc4a <ProcessSetCommand+0x1f8>
	else if (strcmp(command, PROF_CFG_CMD) == 0)
     bce:	6e ed       	ldi	r22, 0xDE	; 222
     bd0:	71 e2       	ldi	r23, 0x21	; 33
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     bd8:	89 2b       	or	r24, r25
     bda:	b1 f4       	brne	.+44     	; 0xc08 <ProcessSetCommand+0x1b6>
	{
		if (_ovenStatus != Stopped)
     bdc:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     be0:	88 23       	and	r24, r24
     be2:	19 f0       	breq	.+6      	; 0xbea <ProcessSetCommand+0x198>
		{
			PrintStatusRequired(Stopped);
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	c7 db       	rcall	.-2162   	; 0x376 <PrintStatusRequired>
			return;
     be8:	30 c0       	rjmp	.+96     	; 0xc4a <ProcessSetCommand+0x1f8>
		}		
		printf("%.8s\r\n", PROF_CFG_CMD);
     bea:	8e ed       	ldi	r24, 0xDE	; 222
     bec:	91 e2       	ldi	r25, 0x21	; 33
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	8d e3       	ldi	r24, 0x3D	; 61
     bf4:	91 e2       	ldi	r25, 0x21	; 33
     bf6:	9f 93       	push	r25
     bf8:	8f 93       	push	r24
     bfa:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	21 c0       	rjmp	.+66     	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else if (strcmp(command, PROF_DEL_CMD) == 0)
     c08:	69 e0       	ldi	r22, 0x09	; 9
     c0a:	72 e2       	ldi	r23, 0x22	; 34
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <strcmp>
     c12:	89 2b       	or	r24, r25
     c14:	b1 f4       	brne	.+44     	; 0xc42 <ProcessSetCommand+0x1f0>
	{
		if (_ovenStatus != Stopped)
     c16:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <_ovenStatus>
     c1a:	88 23       	and	r24, r24
     c1c:	19 f0       	breq	.+6      	; 0xc24 <ProcessSetCommand+0x1d2>
		{
			PrintStatusRequired(Stopped);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	aa db       	rcall	.-2220   	; 0x376 <PrintStatusRequired>
			return;
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <ProcessSetCommand+0x1f8>
		}		
		printf("%.8s\r\n", PROF_DEL_CMD);
     c24:	89 e0       	ldi	r24, 0x09	; 9
     c26:	92 e2       	ldi	r25, 0x22	; 34
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	8d e3       	ldi	r24, 0x3D	; 61
     c2e:	91 e2       	ldi	r25, 0x21	; 33
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <ProcessSetCommand+0x1f8>
	}
	else
		printf("UNKNOWN SET COMMAND\r\n");
     c42:	8e e0       	ldi	r24, 0x0E	; 14
     c44:	92 e2       	ldi	r25, 0x22	; 34
     c46:	0e 94 0c 19 	call	0x3218	; 0x3218 <puts>

}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	08 95       	ret

00000c56 <ToUpper>:



char ToUpper(char c)
{
	if (c > 96 && c < 123)
     c56:	9f e9       	ldi	r25, 0x9F	; 159
     c58:	98 0f       	add	r25, r24
     c5a:	9a 31       	cpi	r25, 0x1A	; 26
     c5c:	08 f4       	brcc	.+2      	; 0xc60 <ToUpper+0xa>
	c -= 32;
     c5e:	80 52       	subi	r24, 0x20	; 32
	
	return c;
}	 
     c60:	08 95       	ret

00000c62 <ProcessInput>:

void ProcessInput(char c)	
{
	c = ToUpper(c);
     c62:	f9 df       	rcall	.-14     	; 0xc56 <ToUpper>
	
	switch (_cmdState)
     c64:	90 91 a1 22 	lds	r25, 0x22A1	; 0x8022a1 <_cmdState>
     c68:	92 30       	cpi	r25, 0x02	; 2
     c6a:	41 f1       	breq	.+80     	; 0xcbc <ProcessInput+0x5a>
     c6c:	28 f4       	brcc	.+10     	; 0xc78 <ProcessInput+0x16>
     c6e:	99 23       	and	r25, r25
     c70:	51 f0       	breq	.+20     	; 0xc86 <ProcessInput+0x24>
     c72:	91 30       	cpi	r25, 0x01	; 1
     c74:	61 f0       	breq	.+24     	; 0xc8e <ProcessInput+0x2c>
     c76:	08 95       	ret
     c78:	93 30       	cpi	r25, 0x03	; 3
     c7a:	09 f4       	brne	.+2      	; 0xc7e <ProcessInput+0x1c>
     c7c:	54 c0       	rjmp	.+168    	; 0xd26 <ProcessInput+0xc4>
     c7e:	94 30       	cpi	r25, 0x04	; 4
     c80:	09 f4       	brne	.+2      	; 0xc84 <ProcessInput+0x22>
     c82:	5b c0       	rjmp	.+182    	; 0xd3a <ProcessInput+0xd8>
     c84:	08 95       	ret
	{
		case Waiting:
		
			if (c == 'A');
				_cmdState = A_Received;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <_cmdState>
			break;
     c8c:	08 95       	ret
		case A_Received:
			if (c == 'T')
     c8e:	84 35       	cpi	r24, 0x54	; 84
     c90:	91 f4       	brne	.+36     	; 0xcb6 <ProcessInput+0x54>
			{
				_cmdState = T_Received;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <_cmdState>
				memset(&_command[0], 0, sizeof(_command));
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	ed e2       	ldi	r30, 0x2D	; 45
     c9c:	f5 e2       	ldi	r31, 0x25	; 37
     c9e:	df 01       	movw	r26, r30
     ca0:	1d 92       	st	X+, r1
     ca2:	8a 95       	dec	r24
     ca4:	e9 f7       	brne	.-6      	; 0xca0 <ProcessInput+0x3e>
				memset(&_args[0], 0, sizeof(_args));;				
     ca6:	80 e2       	ldi	r24, 0x20	; 32
     ca8:	ed e0       	ldi	r30, 0x0D	; 13
     caa:	f5 e2       	ldi	r31, 0x25	; 37
     cac:	df 01       	movw	r26, r30
     cae:	1d 92       	st	X+, r1
     cb0:	8a 95       	dec	r24
     cb2:	e9 f7       	brne	.-6      	; 0xcae <ProcessInput+0x4c>
     cb4:	08 95       	ret
			}
			else
				_cmdState = Waiting;
     cb6:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <_cmdState>
     cba:	08 95       	ret
			break;
		case T_Received:
			if (c == '?')
     cbc:	8f 33       	cpi	r24, 0x3F	; 63
     cbe:	31 f4       	brne	.+12     	; 0xccc <ProcessInput+0x6a>
			{
				_cmdModifier = '?';
     cc0:	80 93 35 25 	sts	0x2535, r24	; 0x802535 <_cmdModifier>
				_cmdState = Query_Received;
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <_cmdState>
     cca:	08 95       	ret
			}
			else if (c == '=')
     ccc:	8d 33       	cpi	r24, 0x3D	; 61
     cce:	41 f4       	brne	.+16     	; 0xce0 <ProcessInput+0x7e>
			{
				_index = 0;
     cd0:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <__data_end>
				_cmdModifier = '=';
     cd4:	80 93 35 25 	sts	0x2535, r24	; 0x802535 <_cmdModifier>
				_cmdState = Set_Received;
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <_cmdState>
     cde:	08 95       	ret
			}
			else if (c > 46 && c < 91 && _index < 8)
     ce0:	91 ed       	ldi	r25, 0xD1	; 209
     ce2:	98 0f       	add	r25, r24
     ce4:	9c 32       	cpi	r25, 0x2C	; 44
     ce6:	88 f4       	brcc	.+34     	; 0xd0a <ProcessInput+0xa8>
     ce8:	90 91 a0 22 	lds	r25, 0x22A0	; 0x8022a0 <__data_end>
     cec:	98 30       	cpi	r25, 0x08	; 8
     cee:	6c f4       	brge	.+26     	; 0xd0a <ProcessInput+0xa8>
			{
				_command[_index++] = c;
     cf0:	e0 91 a0 22 	lds	r30, 0x22A0	; 0x8022a0 <__data_end>
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	9e 0f       	add	r25, r30
     cf8:	90 93 a0 22 	sts	0x22A0, r25	; 0x8022a0 <__data_end>
     cfc:	0e 2e       	mov	r0, r30
     cfe:	00 0c       	add	r0, r0
     d00:	ff 0b       	sbc	r31, r31
     d02:	e3 5d       	subi	r30, 0xD3	; 211
     d04:	fa 4d       	sbci	r31, 0xDA	; 218
     d06:	80 83       	st	Z, r24
     d08:	08 95       	ret
			}
			else if (c == '\r' && _index > 0)
     d0a:	8d 30       	cpi	r24, 0x0D	; 13
     d0c:	91 f5       	brne	.+100    	; 0xd72 <ProcessInput+0x110>
     d0e:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <__data_end>
     d12:	18 16       	cp	r1, r24
     d14:	74 f5       	brge	.+92     	; 0xd72 <ProcessInput+0x110>
			{
				_index = 0;
     d16:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <__data_end>
				ProcessExcCommand(_command);
     d1a:	8d e2       	ldi	r24, 0x2D	; 45
     d1c:	95 e2       	ldi	r25, 0x25	; 37
     d1e:	e3 db       	rcall	.-2106   	; 0x4e6 <ProcessExcCommand>
				_cmdState = Waiting;
     d20:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <_cmdState>
     d24:	08 95       	ret
			}
			
			break;
		case Query_Received:
			if (c == '\r')
     d26:	8d 30       	cpi	r24, 0x0D	; 13
     d28:	21 f5       	brne	.+72     	; 0xd72 <ProcessInput+0x110>
			{
				_index = 0;
     d2a:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <__data_end>
				ProcessQueryCommand(_command);
     d2e:	8d e2       	ldi	r24, 0x2D	; 45
     d30:	95 e2       	ldi	r25, 0x25	; 37
     d32:	37 dd       	rcall	.-1426   	; 0x7a2 <ProcessQueryCommand>
				_cmdState = Waiting;
     d34:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <_cmdState>
     d38:	08 95       	ret
			}
			break;
		case Set_Received:
			if (c != '\r' && _index < 32)
     d3a:	8d 30       	cpi	r24, 0x0D	; 13
     d3c:	89 f0       	breq	.+34     	; 0xd60 <ProcessInput+0xfe>
     d3e:	90 91 a0 22 	lds	r25, 0x22A0	; 0x8022a0 <__data_end>
     d42:	90 32       	cpi	r25, 0x20	; 32
     d44:	b4 f4       	brge	.+44     	; 0xd72 <ProcessInput+0x110>
			{
				_args[_index++] = c;
     d46:	e0 91 a0 22 	lds	r30, 0x22A0	; 0x8022a0 <__data_end>
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	9e 0f       	add	r25, r30
     d4e:	90 93 a0 22 	sts	0x22A0, r25	; 0x8022a0 <__data_end>
     d52:	0e 2e       	mov	r0, r30
     d54:	00 0c       	add	r0, r0
     d56:	ff 0b       	sbc	r31, r31
     d58:	e3 5f       	subi	r30, 0xF3	; 243
     d5a:	fa 4d       	sbci	r31, 0xDA	; 218
     d5c:	80 83       	st	Z, r24
     d5e:	08 95       	ret
			}
			else if (c == '\r')
			{
				_index = 0;
     d60:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <__data_end>
				ProcessSetCommand(_command, _args);
     d64:	6d e0       	ldi	r22, 0x0D	; 13
     d66:	75 e2       	ldi	r23, 0x25	; 37
     d68:	8d e2       	ldi	r24, 0x2D	; 45
     d6a:	95 e2       	ldi	r25, 0x25	; 37
     d6c:	72 de       	rcall	.-796    	; 0xa52 <ProcessSetCommand>
			
				_cmdState = Waiting;
     d6e:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <_cmdState>
     d72:	08 95       	ret

00000d74 <uart_putchar>:
}
void task(void)
{
	if (my_flag_autorize_cdc_transfert) {
		udi_cdc_putc('A');
		udi_cdc_getc();
     d74:	08 2e       	mov	r0, r24
     d76:	00 0c       	add	r0, r0
     d78:	99 0b       	sbc	r25, r25
     d7a:	8c c4       	rjmp	.+2328   	; 0x1694 <udi_cdc_putc>
     d7c:	08 95       	ret

00000d7e <my_callback_cdc_enable>:
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <my_flag_autorize_cdc_transfert>
     d84:	08 95       	ret

00000d86 <my_callback_cdc_disable>:
     d86:	10 92 a2 22 	sts	0x22A2, r1	; 0x8022a2 <my_flag_autorize_cdc_transfert>
     d8a:	08 95       	ret

00000d8c <FlashTest>:
	}
}

void FlashTest(uint8_t pagesToWrite)
{
     d8c:	2f 92       	push	r2
     d8e:	3f 92       	push	r3
     d90:	4f 92       	push	r4
     d92:	5f 92       	push	r5
     d94:	6f 92       	push	r6
     d96:	7f 92       	push	r7
     d98:	8f 92       	push	r8
     d9a:	9f 92       	push	r9
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	58 2e       	mov	r5, r24
     db2:	80 e1       	ldi	r24, 0x10	; 16
     db4:	85 15       	cp	r24, r5
     db6:	18 f4       	brcc	.+6      	; 0xdbe <FlashTest+0x32>
     db8:	68 94       	set
     dba:	55 24       	eor	r5, r5
     dbc:	54 f8       	bld	r5, 4
	
	if (pagesToWrite > 16)
		pagesToWrite = 16;
	
	printf("Running test for %d page(s)\r\n", pagesToWrite);
     dbe:	1f 92       	push	r1
     dc0:	5f 92       	push	r5
     dc2:	83 e2       	ldi	r24, 0x23	; 35
     dc4:	92 e2       	ldi	r25, 0x22	; 34
     dc6:	9f 93       	push	r25
     dc8:	8f 93       	push	r24
     dca:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>

	for (uint8_t p = 0; p < pagesToWrite; p++)
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	55 20       	and	r5, r5
     dd8:	09 f4       	brne	.+2      	; 0xddc <FlashTest+0x50>
     dda:	6b c0       	rjmp	.+214    	; 0xeb2 <FlashTest+0x126>
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
     dde:	d0 e0       	ldi	r29, 0x00	; 0
	{

		memset(ReadBuffer, 0, sizeof(ReadBuffer));
     de0:	0f 2e       	mov	r0, r31
     de2:	f6 e3       	ldi	r31, 0x36	; 54
     de4:	af 2e       	mov	r10, r31
     de6:	f6 e2       	ldi	r31, 0x26	; 38
     de8:	bf 2e       	mov	r11, r31
     dea:	f0 2d       	mov	r31, r0
		
		/* Fill up a test buffer with 512 bytes with other values. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			WriteBuffer[i] = (uint8_t) i;
			printf("Page %d WriteBuffer[%d] = %d\r\n", p, i, WriteBuffer[i] );
     dec:	0f 2e       	mov	r0, r31
     dee:	f1 e4       	ldi	r31, 0x41	; 65
     df0:	cf 2e       	mov	r12, r31
     df2:	f2 e2       	ldi	r31, 0x22	; 34
     df4:	df 2e       	mov	r13, r31
     df6:	f0 2d       	mov	r31, r0


		printf("Verify\r\n");
		/* Verify Flash contents. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			printf("Page %d ReadBuffer[%d] = %d\r\n", p, i, ReadBuffer[i] );
     df8:	0f 2e       	mov	r0, r31
     dfa:	f8 e6       	ldi	r31, 0x68	; 104
     dfc:	ef 2e       	mov	r14, r31
     dfe:	f2 e2       	ldi	r31, 0x22	; 34
     e00:	ff 2e       	mov	r15, r31
     e02:	f0 2d       	mov	r31, r0
     e04:	4c 2e       	mov	r4, r28
	printf("Running test for %d page(s)\r\n", pagesToWrite);

	for (uint8_t p = 0; p < pagesToWrite; p++)
	{

		memset(ReadBuffer, 0, sizeof(ReadBuffer));
     e06:	f5 01       	movw	r30, r10
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	11 92       	st	Z+, r1
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	e9 f7       	brne	.-6      	; 0xe0c <FlashTest+0x80>
     e12:	06 e3       	ldi	r16, 0x36	; 54
     e14:	15 e2       	ldi	r17, 0x25	; 37
		
		/* Fill up a test buffer with 512 bytes with other values. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
     e16:	81 2c       	mov	r8, r1
     e18:	91 2c       	mov	r9, r1
			WriteBuffer[i] = (uint8_t) i;
			printf("Page %d WriteBuffer[%d] = %d\r\n", p, i, WriteBuffer[i] );
     e1a:	2c 2e       	mov	r2, r28
     e1c:	3d 2e       	mov	r3, r29

		memset(ReadBuffer, 0, sizeof(ReadBuffer));
		
		/* Fill up a test buffer with 512 bytes with other values. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			WriteBuffer[i] = (uint8_t) i;
     e1e:	f8 01       	movw	r30, r16
     e20:	81 92       	st	Z+, r8
     e22:	8f 01       	movw	r16, r30
			printf("Page %d WriteBuffer[%d] = %d\r\n", p, i, WriteBuffer[i] );
     e24:	72 2c       	mov	r7, r2
     e26:	63 2c       	mov	r6, r3
     e28:	c4 01       	movw	r24, r8
     e2a:	99 27       	eor	r25, r25
     e2c:	9f 93       	push	r25
     e2e:	8f 93       	push	r24
     e30:	9f 92       	push	r9
     e32:	8f 92       	push	r8
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	df 92       	push	r13
     e3a:	cf 92       	push	r12
     e3c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	{

		memset(ReadBuffer, 0, sizeof(ReadBuffer));
		
		/* Fill up a test buffer with 512 bytes with other values. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	89 1a       	sub	r8, r25
     e44:	99 0a       	sbc	r9, r25
     e46:	ed b7       	in	r30, 0x3d	; 61
     e48:	fe b7       	in	r31, 0x3e	; 62
     e4a:	38 96       	adiw	r30, 0x08	; 8
     e4c:	ed bf       	out	0x3d, r30	; 61
     e4e:	fe bf       	out	0x3e, r31	; 62
     e50:	81 14       	cp	r8, r1
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	9f 06       	cpc	r9, r31
     e56:	19 f7       	brne	.-58     	; 0xe1e <FlashTest+0x92>
			WriteBuffer[i] = (uint8_t) i;
			printf("Page %d WriteBuffer[%d] = %d\r\n", p, i, WriteBuffer[i] );
		}
				
		/* Load the flashbuffer with the test buffer. */
		SP_LoadFlashPage(WriteBuffer);
     e58:	86 e3       	ldi	r24, 0x36	; 54
     e5a:	95 e2       	ldi	r25, 0x25	; 37
     e5c:	0f 94 04 00 	call	0x20008	; 0x20008 <SP_LoadFlashPage>
			
		/* Do a Erase-Write of the page. */
		EraseWriteAppTablePage(p);
     e60:	84 2d       	mov	r24, r4
     e62:	ed d0       	rcall	.+474    	; 0x103e <EraseWriteAppTablePage>

		/* Read a flashpage into the read buffer. */
		ReadFlashPage(ReadBuffer, p);
     e64:	64 2d       	mov	r22, r4
     e66:	c5 01       	movw	r24, r10
     e68:	f9 d0       	rcall	.+498    	; 0x105c <ReadFlashPage>


		printf("Verify\r\n");
     e6a:	80 e6       	ldi	r24, 0x60	; 96
     e6c:	92 e2       	ldi	r25, 0x22	; 34
     e6e:	0e 94 0c 19 	call	0x3218	; 0x3218 <puts>
     e72:	85 01       	movw	r16, r10
		/* Verify Flash contents. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
     e74:	81 2c       	mov	r8, r1
     e76:	91 2c       	mov	r9, r1
			printf("Page %d ReadBuffer[%d] = %d\r\n", p, i, ReadBuffer[i] );
     e78:	f8 01       	movw	r30, r16
     e7a:	81 91       	ld	r24, Z+
     e7c:	8f 01       	movw	r16, r30
     e7e:	1f 92       	push	r1
     e80:	8f 93       	push	r24
     e82:	9f 92       	push	r9
     e84:	8f 92       	push	r8
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	ff 92       	push	r15
     e8c:	ef 92       	push	r14
     e8e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		ReadFlashPage(ReadBuffer, p);


		printf("Verify\r\n");
		/* Verify Flash contents. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
     e92:	ff ef       	ldi	r31, 0xFF	; 255
     e94:	8f 1a       	sub	r8, r31
     e96:	9f 0a       	sbc	r9, r31
     e98:	8d b7       	in	r24, 0x3d	; 61
     e9a:	9e b7       	in	r25, 0x3e	; 62
     e9c:	08 96       	adiw	r24, 0x08	; 8
     e9e:	8d bf       	out	0x3d, r24	; 61
     ea0:	9e bf       	out	0x3e, r25	; 62
     ea2:	81 14       	cp	r8, r1
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	99 06       	cpc	r9, r25
     ea8:	39 f7       	brne	.-50     	; 0xe78 <FlashTest+0xec>
     eaa:	21 96       	adiw	r28, 0x01	; 1
	if (pagesToWrite > 16)
		pagesToWrite = 16;
	
	printf("Running test for %d page(s)\r\n", pagesToWrite);

	for (uint8_t p = 0; p < pagesToWrite; p++)
     eac:	c5 15       	cp	r28, r5
     eae:	08 f4       	brcc	.+2      	; 0xeb2 <FlashTest+0x126>
     eb0:	a9 cf       	rjmp	.-174    	; 0xe04 <FlashTest+0x78>
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			printf("Page %d ReadBuffer[%d] = %d\r\n", p, i, ReadBuffer[i] );
		}
	}
	
	printf("Done\r\n");
     eb2:	86 e8       	ldi	r24, 0x86	; 134
     eb4:	92 e2       	ldi	r25, 0x22	; 34
     eb6:	0e 94 0c 19 	call	0x3218	; 0x3218 <puts>
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	5f 90       	pop	r5
     ed8:	4f 90       	pop	r4
     eda:	3f 90       	pop	r3
     edc:	2f 90       	pop	r2
     ede:	08 95       	ret

00000ee0 <my_callback_rx_notify>:


void my_callback_rx_notify(uint8_t port)
{
	char c = udi_cdc_getc();
     ee0:	50 d3       	rcall	.+1696   	; 0x1582 <udi_cdc_getc>
	
	doFlashTest = true;
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	90 93 a3 22 	sts	0x22A3, r25	; 0x8022a3 <doFlashTest>
	
	ProcessInput(c);
     ee8:	bc ce       	rjmp	.-648    	; 0xc62 <ProcessInput>
     eea:	08 95       	ret

00000eec <my_callback_tx_empty_notify>:
}

void my_callback_tx_empty_notify(uint8_t port)
{
     eec:	08 95       	ret

00000eee <__vector_14>:
	
	
}

ISR(TCC0_OVF_vect)
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	08 b6       	in	r0, 0x38	; 56
     efa:	0f 92       	push	r0
     efc:	18 be       	out	0x38, r1	; 56
     efe:	09 b6       	in	r0, 0x39	; 57
     f00:	0f 92       	push	r0
     f02:	19 be       	out	0x39, r1	; 57
     f04:	0b b6       	in	r0, 0x3b	; 59
     f06:	0f 92       	push	r0
     f08:	1b be       	out	0x3b, r1	; 59
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
	count++;
     f22:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <count>
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <count>
	
	if (count == 125)
     f2c:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <count>
     f30:	8d 37       	cpi	r24, 0x7D	; 125
     f32:	b9 f5       	brne	.+110    	; 0xfa2 <__vector_14+0xb4>
	{
		PORTB.OUTTGL = PIN0_bm;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
		count = 0;		
     f3a:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <count>
		
		if (_logEnabled)
     f3e:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <_logEnabled>
     f42:	88 23       	and	r24, r24
     f44:	71 f1       	breq	.+92     	; 0xfa2 <__vector_14+0xb4>
		{
			printf("%d: %02x\r\n", index, nvm_eeprom_read_byte(index));
     f46:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <index>
     f4a:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <index+0x1>
     f4e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <nvm_eeprom_read_byte>
     f52:	20 91 a4 22 	lds	r18, 0x22A4	; 0x8022a4 <index>
     f56:	30 91 a5 22 	lds	r19, 0x22A5	; 0x8022a5 <index+0x1>
     f5a:	1f 92       	push	r1
     f5c:	8f 93       	push	r24
     f5e:	3f 93       	push	r19
     f60:	2f 93       	push	r18
     f62:	8c e8       	ldi	r24, 0x8C	; 140
     f64:	92 e2       	ldi	r25, 0x22	; 34
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
			index++;
     f6e:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <index>
     f72:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <index+0x1>
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <index>
     f7c:	90 93 a5 22 	sts	0x22A5, r25	; 0x8022a5 <index+0x1>
			
			if (index >= 1280)
     f80:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <index>
     f84:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <index+0x1>
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	81 15       	cp	r24, r1
     f96:	95 40       	sbci	r25, 0x05	; 5
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__vector_14+0xb4>
				index = 0;
     f9a:	10 92 a4 22 	sts	0x22A4, r1	; 0x8022a4 <index>
     f9e:	10 92 a5 22 	sts	0x22A5, r1	; 0x8022a5 <index+0x1>
		}
	}
}
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0b be       	out	0x3b, r0	; 59
     fbe:	0f 90       	pop	r0
     fc0:	09 be       	out	0x39, r0	; 57
     fc2:	0f 90       	pop	r0
     fc4:	08 be       	out	0x38, r0	; 56
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <init_timer>:


void init_timer()
{	
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <sysclk_enable_module>
	
	TCC0.PER = 750;                 // Period register
     fd8:	e0 e0       	ldi	r30, 0x00	; 0
     fda:	f8 e0       	ldi	r31, 0x08	; 8
     fdc:	8e ee       	ldi	r24, 0xEE	; 238
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	86 a3       	std	Z+38, r24	; 0x26
     fe2:	97 a3       	std	Z+39, r25	; 0x27
		
	TCC0.INTCTRLA = TC_TC0_OVFINTLVL_LO_gc; // Overflow, LOW Priority
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	86 83       	std	Z+6, r24	; 0x06
	
	TCC0.INTCTRLB = 0;              // Compare
     fe8:	17 82       	std	Z+7, r1	; 0x07
	TCC0.INTFLAGS = 0;              // Overflow Flag in bit 0
     fea:	14 86       	std	Z+12, r1	; 0x0c
	
	TCC0.CTRLA =  TC_TC0_CLKSEL_DIV64_gc; // PortC T/C 0, Source = Clock, Div by 8
     fec:	85 e0       	ldi	r24, 0x05	; 5
     fee:	80 83       	st	Z, r24
	TCC0.CTRLB = 0;                 // Normal Mode, Update on Top
     ff0:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CTRLC = 0;                 // Waveform
     ff2:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0;                 // Event System
     ff4:	13 82       	std	Z+3, r1	; 0x03
	TCC0.CTRLE = 0;                 // 8-Bit Mode
     ff6:	14 82       	std	Z+4, r1	; 0x04
     ff8:	08 95       	ret

00000ffa <main>:

int main(void)
{


	PORTB.DIR = PIN0_bm | PIN1_bm | PIN2_bm;
     ffa:	c7 e0       	ldi	r28, 0x07	; 7
     ffc:	c0 93 20 06 	sts	0x0620, r28	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	
	cli();
    1000:	f8 94       	cli

	sysclk_init();
    1002:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <sysclk_init>

	init_timer();
    1006:	e4 df       	rcall	.-56     	; 0xfd0 <init_timer>
	udc_start();
    1008:	2e d4       	rcall	.+2140   	; 0x1866 <udc_start>
	
	stdout = &mystdout;	
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e2       	ldi	r25, 0x20	; 32
    100e:	80 93 4e 27 	sts	0x274E, r24	; 0x80274e <__iob+0x2>
    1012:	90 93 4f 27 	sts	0x274F, r25	; 0x80274f <__iob+0x3>
	irq_initialize_vectors();
    1016:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	_ovenStatus = Running;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 a8 22 	sts	0x22A8, r24	; 0x8022a8 <_ovenStatus>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    1020:	ec ec       	ldi	r30, 0xCC	; 204
    1022:	f1 e0       	ldi	r31, 0x01	; 1
    1024:	80 81       	ld	r24, Z
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	80 83       	st	Z, r24
	eeprom_enable_mapping();


	sei();
    102a:	78 94       	sei
		
		
    /* Replace with your application code */
    while (1) 
    {
		if (doFlashTest)
    102c:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <doFlashTest>
    1030:	88 23       	and	r24, r24
    1032:	e1 f3       	breq	.-8      	; 0x102c <main+0x32>
		{
			FlashTest(3);
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	aa de       	rcall	.-684    	; 0xd8c <FlashTest>
			doFlashTest = false;
    1038:	10 92 a3 22 	sts	0x22A3, r1	; 0x8022a3 <doFlashTest>
    103c:	f7 cf       	rjmp	.-18     	; 0x102c <main+0x32>

0000103e <EraseWriteAppTablePage>:
 *  \param pageAddress Page address to the page to erase/write.
 */
void EraseWriteAppTablePage(uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
    103e:	68 2f       	mov	r22, r24
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	76 2f       	mov	r23, r22
    1044:	66 27       	eor	r22, r22
	
	/* Perform page erase. */
	SP_EraseWriteApplicationPage(APPTABLE_SECTION_START + tableAddress);
    1046:	cb 01       	movw	r24, r22
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	70 52       	subi	r23, 0x20	; 32
    1052:	8e 4f       	sbci	r24, 0xFE	; 254
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	4b d9       	rcall	.-3434   	; 0x2ee <SP_EraseWriteApplicationPage>

	/* Wait for NVM to finish. */
	SP_WaitForSPM();
    1058:	71 c9       	rjmp	.-3358   	; 0x33c <SP_WaitForSPM>
    105a:	08 95       	ret

0000105c <ReadFlashPage>:
 *  \param pageAddress  Page address to read from. 
 */
void ReadFlashPage(const uint8_t * data, uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
    105c:	46 2f       	mov	r20, r22
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	54 2f       	mov	r21, r20
    1062:	44 27       	eor	r20, r20
	
	/* Read the flash page into the buffer. */
	SP_ReadFlashPage(data, (APPTABLE_SECTION_START + tableAddress));
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	50 52       	subi	r21, 0x20	; 32
    106a:	6e 4f       	sbci	r22, 0xFE	; 254
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	28 c9       	rjmp	.-3504   	; 0x2c0 <SP_ReadFlashPage>
    1070:	08 95       	ret

00001072 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    1072:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <udi_cdc_nb_comm_enabled>
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	80 93 be 23 	sts	0x23BE, r24	; 0x8023be <udi_cdc_nb_comm_enabled>
    107c:	08 95       	ret

0000107e <udi_cdc_data_setup>:
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	08 95       	ret

00001082 <udi_cdc_getsetting>:
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret

00001086 <udi_cdc_comm_setup>:
    1086:	80 91 36 27 	lds	r24, 0x2736	; 0x802736 <udd_g_ctrlreq>
    108a:	88 23       	and	r24, r24
    108c:	cc f4       	brge	.+50     	; 0x10c0 <udi_cdc_comm_setup+0x3a>
    108e:	80 76       	andi	r24, 0x60	; 96
    1090:	80 32       	cpi	r24, 0x20	; 32
    1092:	b9 f5       	brne	.+110    	; 0x1102 <udi_cdc_comm_setup+0x7c>
    1094:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1098:	81 32       	cpi	r24, 0x21	; 33
    109a:	a9 f5       	brne	.+106    	; 0x1106 <udi_cdc_comm_setup+0x80>
    109c:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    10a0:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    10a4:	07 97       	sbiw	r24, 0x07	; 7
    10a6:	89 f5       	brne	.+98     	; 0x110a <udi_cdc_comm_setup+0x84>
    10a8:	e6 e3       	ldi	r30, 0x36	; 54
    10aa:	f7 e2       	ldi	r31, 0x27	; 39
    10ac:	8c ec       	ldi	r24, 0xCC	; 204
    10ae:	93 e2       	ldi	r25, 0x23	; 35
    10b0:	80 87       	std	Z+8, r24	; 0x08
    10b2:	91 87       	std	Z+9, r25	; 0x09
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	82 87       	std	Z+10, r24	; 0x0a
    10ba:	93 87       	std	Z+11, r25	; 0x0b
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	08 95       	ret
    10c0:	80 76       	andi	r24, 0x60	; 96
    10c2:	80 32       	cpi	r24, 0x20	; 32
    10c4:	21 f5       	brne	.+72     	; 0x110e <udi_cdc_comm_setup+0x88>
    10c6:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    10ca:	80 32       	cpi	r24, 0x20	; 32
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <udi_cdc_comm_setup+0x50>
    10ce:	82 32       	cpi	r24, 0x22	; 34
    10d0:	01 f1       	breq	.+64     	; 0x1112 <udi_cdc_comm_setup+0x8c>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	08 95       	ret
    10d6:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    10da:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    10de:	07 97       	sbiw	r24, 0x07	; 7
    10e0:	d1 f4       	brne	.+52     	; 0x1116 <udi_cdc_comm_setup+0x90>
    10e2:	e6 e3       	ldi	r30, 0x36	; 54
    10e4:	f7 e2       	ldi	r31, 0x27	; 39
    10e6:	8d e8       	ldi	r24, 0x8D	; 141
    10e8:	98 e0       	ldi	r25, 0x08	; 8
    10ea:	84 87       	std	Z+12, r24	; 0x0c
    10ec:	95 87       	std	Z+13, r25	; 0x0d
    10ee:	8c ec       	ldi	r24, 0xCC	; 204
    10f0:	93 e2       	ldi	r25, 0x23	; 35
    10f2:	80 87       	std	Z+8, r24	; 0x08
    10f4:	91 87       	std	Z+9, r25	; 0x09
    10f6:	87 e0       	ldi	r24, 0x07	; 7
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	82 87       	std	Z+10, r24	; 0x0a
    10fc:	93 87       	std	Z+11, r25	; 0x0b
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	08 95       	ret
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	08 95       	ret
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	08 95       	ret
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	08 95       	ret
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	08 95       	ret

0000111a <udi_cdc_line_coding_received>:
    111a:	08 95       	ret

0000111c <udi_cdc_comm_enable>:
    111c:	10 92 be 23 	sts	0x23BE, r1	; 0x8023be <udi_cdc_nb_comm_enabled>
    1120:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <udi_cdc_state>
    1124:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <udi_cdc_state+0x1>
    1128:	e0 ec       	ldi	r30, 0xC0	; 192
    112a:	f3 e2       	ldi	r31, 0x23	; 35
    112c:	81 ea       	ldi	r24, 0xA1	; 161
    112e:	80 83       	st	Z, r24
    1130:	80 e2       	ldi	r24, 0x20	; 32
    1132:	81 83       	std	Z+1, r24	; 0x01
    1134:	12 82       	std	Z+2, r1	; 0x02
    1136:	13 82       	std	Z+3, r1	; 0x03
    1138:	14 82       	std	Z+4, r1	; 0x04
    113a:	15 82       	std	Z+5, r1	; 0x05
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	86 83       	std	Z+6, r24	; 0x06
    1142:	97 83       	std	Z+7, r25	; 0x07
    1144:	10 86       	std	Z+8, r1	; 0x08
    1146:	11 86       	std	Z+9, r1	; 0x09
    1148:	ec ec       	ldi	r30, 0xCC	; 204
    114a:	f3 e2       	ldi	r31, 0x23	; 35
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	92 ec       	ldi	r25, 0xC2	; 194
    1150:	a1 e0       	ldi	r26, 0x01	; 1
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	80 83       	st	Z, r24
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	a2 83       	std	Z+2, r26	; 0x02
    115a:	b3 83       	std	Z+3, r27	; 0x03
    115c:	14 82       	std	Z+4, r1	; 0x04
    115e:	15 82       	std	Z+5, r1	; 0x05
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	86 83       	std	Z+6, r24	; 0x06
    1164:	0c de       	rcall	.-1000   	; 0xd7e <my_callback_cdc_enable>
    1166:	88 23       	and	r24, r24
    1168:	29 f0       	breq	.+10     	; 0x1174 <udi_cdc_comm_enable+0x58>
    116a:	90 91 be 23 	lds	r25, 0x23BE	; 0x8023be <udi_cdc_nb_comm_enabled>
    116e:	9f 5f       	subi	r25, 0xFF	; 255
    1170:	90 93 be 23 	sts	0x23BE, r25	; 0x8023be <udi_cdc_nb_comm_enabled>
    1174:	08 95       	ret

00001176 <udi_cdc_tx_send>:
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	1f 92       	push	r1
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <udi_cdc_tx_trans_ongoing>
    118a:	81 11       	cpse	r24, r1
    118c:	9e c0       	rjmp	.+316    	; 0x12ca <udi_cdc_tx_send+0x154>
    118e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <udd_is_high_speed>
    1192:	88 23       	and	r24, r24
    1194:	51 f0       	breq	.+20     	; 0x11aa <udi_cdc_tx_send+0x34>
    1196:	00 91 ad 22 	lds	r16, 0x22AD	; 0x8022ad <udi_cdc_tx_sof_num>
    119a:	10 91 ae 22 	lds	r17, 0x22AE	; 0x8022ae <udi_cdc_tx_sof_num+0x1>
    119e:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <udd_get_micro_frame_number>
    11a2:	08 17       	cp	r16, r24
    11a4:	19 07       	cpc	r17, r25
    11a6:	59 f4       	brne	.+22     	; 0x11be <udi_cdc_tx_send+0x48>
    11a8:	90 c0       	rjmp	.+288    	; 0x12ca <udi_cdc_tx_send+0x154>
    11aa:	00 91 ad 22 	lds	r16, 0x22AD	; 0x8022ad <udi_cdc_tx_sof_num>
    11ae:	10 91 ae 22 	lds	r17, 0x22AE	; 0x8022ae <udi_cdc_tx_sof_num+0x1>
    11b2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <udd_get_frame_number>
    11b6:	08 17       	cp	r16, r24
    11b8:	19 07       	cpc	r17, r25
    11ba:	09 f4       	brne	.+2      	; 0x11be <udi_cdc_tx_send+0x48>
    11bc:	86 c0       	rjmp	.+268    	; 0x12ca <udi_cdc_tx_send+0x154>
    11be:	8f b7       	in	r24, 0x3f	; 63
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	f8 94       	cli
    11c4:	19 81       	ldd	r17, Y+1	; 0x01
    11c6:	00 91 af 22 	lds	r16, 0x22AF	; 0x8022af <udi_cdc_tx_buf_sel>
    11ca:	e0 2f       	mov	r30, r16
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	e0 55       	subi	r30, 0x50	; 80
    11d4:	fd 4d       	sbci	r31, 0xDD	; 221
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	89 2b       	or	r24, r25
    11dc:	09 f5       	brne	.+66     	; 0x1220 <udi_cdc_tx_send+0xaa>
    11de:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <sof_zlp_counter.4973>
    11e2:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <sof_zlp_counter.4973+0x1>
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <sof_zlp_counter.4973>
    11ec:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <sof_zlp_counter.4973+0x1>
    11f0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <udd_is_high_speed>
    11f4:	81 11       	cpse	r24, r1
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <udi_cdc_tx_send+0x90>
    11f8:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <sof_zlp_counter.4973>
    11fc:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <sof_zlp_counter.4973+0x1>
    1200:	84 36       	cpi	r24, 0x64	; 100
    1202:	91 05       	cpc	r25, r1
    1204:	58 f0       	brcs	.+22     	; 0x121c <udi_cdc_tx_send+0xa6>
    1206:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <udd_is_high_speed>
    120a:	88 23       	and	r24, r24
    120c:	49 f0       	breq	.+18     	; 0x1220 <udi_cdc_tx_send+0xaa>
    120e:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <sof_zlp_counter.4973>
    1212:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <sof_zlp_counter.4973+0x1>
    1216:	80 32       	cpi	r24, 0x20	; 32
    1218:	93 40       	sbci	r25, 0x03	; 3
    121a:	10 f4       	brcc	.+4      	; 0x1220 <udi_cdc_tx_send+0xaa>
    121c:	1f bf       	out	0x3f, r17	; 63
    121e:	55 c0       	rjmp	.+170    	; 0x12ca <udi_cdc_tx_send+0x154>
    1220:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <sof_zlp_counter.4973>
    1224:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <sof_zlp_counter.4973+0x1>
    1228:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udi_cdc_tx_both_buf_to_send>
    122c:	81 11       	cpse	r24, r1
    122e:	06 c0       	rjmp	.+12     	; 0x123c <udi_cdc_tx_send+0xc6>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	01 11       	cpse	r16, r1
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <udi_cdc_tx_buf_sel>
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <udi_cdc_tx_send+0xce>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	01 11       	cpse	r16, r1
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 2f       	mov	r16, r24
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <udi_cdc_tx_trans_ongoing>
    124a:	1f bf       	out	0x3f, r17	; 63
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	f8 01       	movw	r30, r16
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e0 55       	subi	r30, 0x50	; 80
    1256:	fd 4d       	sbci	r31, 0xDD	; 221
    1258:	ff 24       	eor	r15, r15
    125a:	f3 94       	inc	r15
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	80 34       	cpi	r24, 0x40	; 64
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <udi_cdc_tx_send+0xf2>
    1266:	f1 2c       	mov	r15, r1
    1268:	ff 20       	and	r15, r15
    126a:	91 f0       	breq	.+36     	; 0x1290 <udi_cdc_tx_send+0x11a>
    126c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <udd_is_high_speed>
    1270:	88 23       	and	r24, r24
    1272:	39 f0       	breq	.+14     	; 0x1282 <udi_cdc_tx_send+0x10c>
    1274:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <udd_get_micro_frame_number>
    1278:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <udi_cdc_tx_sof_num>
    127c:	90 93 ae 22 	sts	0x22AE, r25	; 0x8022ae <udi_cdc_tx_sof_num+0x1>
    1280:	0b c0       	rjmp	.+22     	; 0x1298 <udi_cdc_tx_send+0x122>
    1282:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <udd_get_frame_number>
    1286:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <udi_cdc_tx_sof_num>
    128a:	90 93 ae 22 	sts	0x22AE, r25	; 0x8022ae <udi_cdc_tx_sof_num+0x1>
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <udi_cdc_tx_send+0x122>
    1290:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <udi_cdc_tx_sof_num>
    1294:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <udi_cdc_tx_sof_num+0x1>
    1298:	f8 01       	movw	r30, r16
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	e0 55       	subi	r30, 0x50	; 80
    12a0:	fd 4d       	sbci	r31, 0xDD	; 221
    12a2:	20 81       	ld	r18, Z
    12a4:	31 81       	ldd	r19, Z+1	; 0x01
    12a6:	a8 01       	movw	r20, r16
    12a8:	00 24       	eor	r0, r0
    12aa:	56 95       	lsr	r21
    12ac:	47 95       	ror	r20
    12ae:	07 94       	ror	r0
    12b0:	56 95       	lsr	r21
    12b2:	47 95       	ror	r20
    12b4:	07 94       	ror	r0
    12b6:	54 2f       	mov	r21, r20
    12b8:	40 2d       	mov	r20, r0
    12ba:	4c 54       	subi	r20, 0x4C	; 76
    12bc:	5d 4d       	sbci	r21, 0xDD	; 221
    12be:	0f e6       	ldi	r16, 0x6F	; 111
    12c0:	19 e0       	ldi	r17, 0x09	; 9
    12c2:	6f 2d       	mov	r22, r15
    12c4:	81 e8       	ldi	r24, 0x81	; 129
    12c6:	0e 94 cd 13 	call	0x279a	; 0x279a <udd_ep_run>
    12ca:	0f 90       	pop	r0
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	08 95       	ret

000012d8 <udi_cdc_data_sof_notify>:
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	4d cf       	rjmp	.-358    	; 0x1176 <udi_cdc_tx_send>
    12dc:	08 95       	ret

000012de <udi_cdc_data_sent>:
    12de:	81 11       	cpse	r24, r1
    12e0:	19 c0       	rjmp	.+50     	; 0x1314 <udi_cdc_data_sent+0x36>
    12e2:	20 91 af 22 	lds	r18, 0x22AF	; 0x8022af <udi_cdc_tx_buf_sel>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	22 23       	and	r18, r18
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <udi_cdc_data_sent+0x14>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	fc 01       	movw	r30, r24
    12f8:	e0 55       	subi	r30, 0x50	; 80
    12fa:	fd 4d       	sbci	r31, 0xDD	; 221
    12fc:	10 82       	st	Z, r1
    12fe:	11 82       	std	Z+1, r1	; 0x01
    1300:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udi_cdc_tx_both_buf_to_send>
    1304:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <udi_cdc_tx_trans_ongoing>
    1308:	67 2b       	or	r22, r23
    130a:	11 f0       	breq	.+4      	; 0x1310 <udi_cdc_data_sent+0x32>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	ee dd       	rcall	.-1060   	; 0xeec <my_callback_tx_empty_notify>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	31 cf       	rjmp	.-414    	; 0x1176 <udi_cdc_tx_send>
    1314:	08 95       	ret

00001316 <udi_cdc_data_disable>:
    1316:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udi_cdc_nb_data_enabled>
    131a:	81 50       	subi	r24, 0x01	; 1
    131c:	80 93 bd 23 	sts	0x23BD, r24	; 0x8023bd <udi_cdc_nb_data_enabled>
    1320:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udi_cdc_nb_data_enabled>
    1324:	30 dd       	rcall	.-1440   	; 0xd86 <my_callback_cdc_disable>
    1326:	10 92 bc 23 	sts	0x23BC, r1	; 0x8023bc <udi_cdc_data_running>
    132a:	08 95       	ret

0000132c <udi_cdc_multi_get_nb_received_data>:
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	1f 92       	push	r1
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	8f b7       	in	r24, 0x3f	; 63
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	f8 94       	cli
    133c:	49 81       	ldd	r20, Y+1	; 0x01
    133e:	20 91 35 23 	lds	r18, 0x2335	; 0x802335 <udi_cdc_rx_pos>
    1342:	30 91 36 23 	lds	r19, 0x2336	; 0x802336 <udi_cdc_rx_pos+0x1>
    1346:	e0 91 37 23 	lds	r30, 0x2337	; 0x802337 <udi_cdc_rx_buf_sel>
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	e8 5c       	subi	r30, 0xC8	; 200
    1352:	fc 4d       	sbci	r31, 0xDC	; 220
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	4f bf       	out	0x3f, r20	; 63
    135a:	82 1b       	sub	r24, r18
    135c:	93 0b       	sbc	r25, r19
    135e:	0f 90       	pop	r0
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <udi_cdc_multi_is_rx_ready>:
    1366:	e2 df       	rcall	.-60     	; 0x132c <udi_cdc_multi_get_nb_received_data>
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	89 2b       	or	r24, r25
    136c:	09 f4       	brne	.+2      	; 0x1370 <udi_cdc_multi_is_rx_ready+0xa>
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	82 2f       	mov	r24, r18
    1372:	08 95       	ret

00001374 <udi_cdc_rx_start>:
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	1f 92       	push	r1
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	8f b7       	in	r24, 0x3f	; 63
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	f8 94       	cli
    1388:	99 81       	ldd	r25, Y+1	; 0x01
    138a:	20 91 37 23 	lds	r18, 0x2337	; 0x802337 <udi_cdc_rx_buf_sel>
    138e:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udi_cdc_rx_trans_ongoing>
    1392:	81 11       	cpse	r24, r1
    1394:	10 c0       	rjmp	.+32     	; 0x13b6 <udi_cdc_rx_start+0x42>
    1396:	60 91 35 23 	lds	r22, 0x2335	; 0x802335 <udi_cdc_rx_pos>
    139a:	70 91 36 23 	lds	r23, 0x2336	; 0x802336 <udi_cdc_rx_pos+0x1>
    139e:	02 2f       	mov	r16, r18
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	f8 01       	movw	r30, r16
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e8 5c       	subi	r30, 0xC8	; 200
    13aa:	fc 4d       	sbci	r31, 0xDC	; 220
    13ac:	40 81       	ld	r20, Z
    13ae:	51 81       	ldd	r21, Z+1	; 0x01
    13b0:	64 17       	cp	r22, r20
    13b2:	75 07       	cpc	r23, r21
    13b4:	18 f4       	brcc	.+6      	; 0x13bc <udi_cdc_rx_start+0x48>
    13b6:	9f bf       	out	0x3f, r25	; 63
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	27 c0       	rjmp	.+78     	; 0x140a <udi_cdc_rx_start+0x96>
    13bc:	10 92 35 23 	sts	0x2335, r1	; 0x802335 <udi_cdc_rx_pos>
    13c0:	10 92 36 23 	sts	0x2336, r1	; 0x802336 <udi_cdc_rx_pos+0x1>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	21 11       	cpse	r18, r1
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <udi_cdc_rx_buf_sel>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <udi_cdc_rx_trans_ongoing>
    13d4:	9f bf       	out	0x3f, r25	; 63
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	c6 df       	rcall	.-116    	; 0x1366 <udi_cdc_multi_is_rx_ready>
    13da:	88 23       	and	r24, r24
    13dc:	11 f0       	breq	.+4      	; 0x13e2 <udi_cdc_rx_start+0x6e>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	7f dd       	rcall	.-1282   	; 0xee0 <my_callback_rx_notify>
    13e2:	a8 01       	movw	r20, r16
    13e4:	00 24       	eor	r0, r0
    13e6:	56 95       	lsr	r21
    13e8:	47 95       	ror	r20
    13ea:	07 94       	ror	r0
    13ec:	56 95       	lsr	r21
    13ee:	47 95       	ror	r20
    13f0:	07 94       	ror	r0
    13f2:	54 2f       	mov	r21, r20
    13f4:	40 2d       	mov	r20, r0
    13f6:	44 5c       	subi	r20, 0xC4	; 196
    13f8:	5c 4d       	sbci	r21, 0xDC	; 220
    13fa:	0d e3       	ldi	r16, 0x3D	; 61
    13fc:	1a e0       	ldi	r17, 0x0A	; 10
    13fe:	20 e4       	ldi	r18, 0x40	; 64
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	0e 94 cd 13 	call	0x279a	; 0x279a <udd_ep_run>
    140a:	0f 90       	pop	r0
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <udi_cdc_data_enable>:
    1416:	10 92 bd 23 	sts	0x23BD, r1	; 0x8023bd <udi_cdc_nb_data_enabled>
    141a:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <udi_cdc_tx_trans_ongoing>
    141e:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udi_cdc_tx_both_buf_to_send>
    1422:	10 92 af 22 	sts	0x22AF, r1	; 0x8022af <udi_cdc_tx_buf_sel>
    1426:	e0 eb       	ldi	r30, 0xB0	; 176
    1428:	f2 e2       	ldi	r31, 0x22	; 34
    142a:	10 82       	st	Z, r1
    142c:	11 82       	std	Z+1, r1	; 0x01
    142e:	12 82       	std	Z+2, r1	; 0x02
    1430:	13 82       	std	Z+3, r1	; 0x03
    1432:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <udi_cdc_tx_sof_num>
    1436:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <udi_cdc_tx_sof_num+0x1>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	9c de       	rcall	.-712    	; 0x1176 <udi_cdc_tx_send>
    143e:	10 92 34 23 	sts	0x2334, r1	; 0x802334 <udi_cdc_rx_trans_ongoing>
    1442:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <udi_cdc_rx_buf_sel>
    1446:	e8 e3       	ldi	r30, 0x38	; 56
    1448:	f3 e2       	ldi	r31, 0x23	; 35
    144a:	10 82       	st	Z, r1
    144c:	11 82       	std	Z+1, r1	; 0x01
    144e:	12 82       	std	Z+2, r1	; 0x02
    1450:	13 82       	std	Z+3, r1	; 0x03
    1452:	10 92 35 23 	sts	0x2335, r1	; 0x802335 <udi_cdc_rx_pos>
    1456:	10 92 36 23 	sts	0x2336, r1	; 0x802336 <udi_cdc_rx_pos+0x1>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	8b df       	rcall	.-234    	; 0x1374 <udi_cdc_rx_start>
    145e:	88 23       	and	r24, r24
    1460:	59 f0       	breq	.+22     	; 0x1478 <udi_cdc_data_enable+0x62>
    1462:	90 91 bd 23 	lds	r25, 0x23BD	; 0x8023bd <udi_cdc_nb_data_enabled>
    1466:	9f 5f       	subi	r25, 0xFF	; 255
    1468:	90 93 bd 23 	sts	0x23BD, r25	; 0x8023bd <udi_cdc_nb_data_enabled>
    146c:	90 91 bd 23 	lds	r25, 0x23BD	; 0x8023bd <udi_cdc_nb_data_enabled>
    1470:	91 30       	cpi	r25, 0x01	; 1
    1472:	11 f4       	brne	.+4      	; 0x1478 <udi_cdc_data_enable+0x62>
    1474:	90 93 bc 23 	sts	0x23BC, r25	; 0x8023bc <udi_cdc_data_running>
    1478:	08 95       	ret

0000147a <udi_cdc_data_received>:
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	81 11       	cpse	r24, r1
    1480:	29 c0       	rjmp	.+82     	; 0x14d4 <udi_cdc_data_received+0x5a>
    1482:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <udi_cdc_rx_buf_sel>
    1486:	e1 e0       	ldi	r30, 0x01	; 1
    1488:	81 11       	cpse	r24, r1
    148a:	e0 e0       	ldi	r30, 0x00	; 0
    148c:	84 2f       	mov	r24, r20
    148e:	61 15       	cp	r22, r1
    1490:	71 05       	cpc	r23, r1
    1492:	a9 f4       	brne	.+42     	; 0x14be <udi_cdc_data_received+0x44>
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	00 24       	eor	r0, r0
    1498:	f6 95       	lsr	r31
    149a:	e7 95       	ror	r30
    149c:	07 94       	ror	r0
    149e:	f6 95       	lsr	r31
    14a0:	e7 95       	ror	r30
    14a2:	07 94       	ror	r0
    14a4:	fe 2f       	mov	r31, r30
    14a6:	e0 2d       	mov	r30, r0
    14a8:	af 01       	movw	r20, r30
    14aa:	44 5c       	subi	r20, 0xC4	; 196
    14ac:	5c 4d       	sbci	r21, 0xDC	; 220
    14ae:	0d e3       	ldi	r16, 0x3D	; 61
    14b0:	1a e0       	ldi	r17, 0x0A	; 10
    14b2:	20 e4       	ldi	r18, 0x40	; 64
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	0e 94 cd 13 	call	0x279a	; 0x279a <udd_ep_run>
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4 <udi_cdc_data_received+0x5a>
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	e8 5c       	subi	r30, 0xC8	; 200
    14c6:	fc 4d       	sbci	r31, 0xDC	; 220
    14c8:	60 83       	st	Z, r22
    14ca:	71 83       	std	Z+1, r23	; 0x01
    14cc:	10 92 34 23 	sts	0x2334, r1	; 0x802334 <udi_cdc_rx_trans_ongoing>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	50 df       	rcall	.-352    	; 0x1374 <udi_cdc_rx_start>
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	08 95       	ret

000014da <udi_cdc_multi_getc>:
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	1f 92       	push	r1
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	11 e0       	ldi	r17, 0x01	; 1
    14ec:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_line_coding+0x6>
    14f0:	89 30       	cpi	r24, 0x09	; 9
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <udi_cdc_multi_getc+0x1c>
    14f4:	10 e0       	ldi	r17, 0x00	; 0
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	8f b7       	in	r24, 0x3f	; 63
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	f8 94       	cli
    1500:	a9 81       	ldd	r26, Y+1	; 0x01
    1502:	20 91 35 23 	lds	r18, 0x2335	; 0x802335 <udi_cdc_rx_pos>
    1506:	30 91 36 23 	lds	r19, 0x2336	; 0x802336 <udi_cdc_rx_pos+0x1>
    150a:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <udi_cdc_rx_buf_sel>
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	e8 5c       	subi	r30, 0xC8	; 200
    1518:	fc 4d       	sbci	r31, 0xDC	; 220
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	af bf       	out	0x3f, r26	; 63
    1520:	26 17       	cp	r18, r22
    1522:	37 07       	cpc	r19, r23
    1524:	30 f0       	brcs	.+12     	; 0x1532 <udi_cdc_multi_getc+0x58>
    1526:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udi_cdc_data_running>
    152a:	81 11       	cpse	r24, r1
    152c:	e6 cf       	rjmp	.-52     	; 0x14fa <udi_cdc_multi_getc+0x20>
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	21 c0       	rjmp	.+66     	; 0x1574 <udi_cdc_multi_getc+0x9a>
    1532:	fc 01       	movw	r30, r24
    1534:	00 24       	eor	r0, r0
    1536:	f6 95       	lsr	r31
    1538:	e7 95       	ror	r30
    153a:	07 94       	ror	r0
    153c:	f6 95       	lsr	r31
    153e:	e7 95       	ror	r30
    1540:	07 94       	ror	r0
    1542:	fe 2f       	mov	r31, r30
    1544:	e0 2d       	mov	r30, r0
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	e4 5c       	subi	r30, 0xC4	; 196
    154c:	fc 4d       	sbci	r31, 0xDC	; 220
    154e:	80 81       	ld	r24, Z
    1550:	7a 01       	movw	r14, r20
    1552:	e8 2a       	or	r14, r24
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	20 93 35 23 	sts	0x2335, r18	; 0x802335 <udi_cdc_rx_pos>
    155c:	30 93 36 23 	sts	0x2336, r19	; 0x802336 <udi_cdc_rx_pos+0x1>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	08 df       	rcall	.-496    	; 0x1374 <udi_cdc_rx_start>
    1564:	11 23       	and	r17, r17
    1566:	21 f0       	breq	.+8      	; 0x1570 <udi_cdc_multi_getc+0x96>
    1568:	5e 2d       	mov	r21, r14
    156a:	44 27       	eor	r20, r20
    156c:	10 e0       	ldi	r17, 0x00	; 0
    156e:	c5 cf       	rjmp	.-118    	; 0x14fa <udi_cdc_multi_getc+0x20>
    1570:	8e 2d       	mov	r24, r14
    1572:	9f 2d       	mov	r25, r15
    1574:	0f 90       	pop	r0
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	08 95       	ret

00001582 <udi_cdc_getc>:
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	aa cf       	rjmp	.-172    	; 0x14da <udi_cdc_multi_getc>
    1586:	08 95       	ret

00001588 <udi_cdc_multi_get_free_tx_buffer>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	1f 92       	push	r1
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	8f b7       	in	r24, 0x3f	; 63
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	f8 94       	cli
    1598:	99 81       	ldd	r25, Y+1	; 0x01
    159a:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <udi_cdc_tx_buf_sel>
    159e:	e8 2f       	mov	r30, r24
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	e0 55       	subi	r30, 0x50	; 80
    15a8:	fd 4d       	sbci	r31, 0xDD	; 221
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	20 34       	cpi	r18, 0x40	; 64
    15b0:	31 05       	cpc	r19, r1
    15b2:	89 f4       	brne	.+34     	; 0x15d6 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    15b4:	40 91 ac 22 	lds	r20, 0x22AC	; 0x8022ac <udi_cdc_tx_trans_ongoing>
    15b8:	41 11       	cpse	r20, r1
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    15bc:	40 91 ab 22 	lds	r20, 0x22AB	; 0x8022ab <udi_cdc_tx_both_buf_to_send>
    15c0:	41 11       	cpse	r20, r1
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	20 93 ab 22 	sts	0x22AB, r18	; 0x8022ab <udi_cdc_tx_both_buf_to_send>
    15ca:	81 11       	cpse	r24, r1
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	20 93 af 22 	sts	0x22AF, r18	; 0x8022af <udi_cdc_tx_buf_sel>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	9f bf       	out	0x3f, r25	; 63
    15d8:	80 e4       	ldi	r24, 0x40	; 64
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	82 1b       	sub	r24, r18
    15de:	93 0b       	sbc	r25, r19
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <udi_cdc_multi_is_tx_ready>:
    15e8:	cf df       	rcall	.-98     	; 0x1588 <udi_cdc_multi_get_free_tx_buffer>
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	89 2b       	or	r24, r25
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <udi_cdc_multi_is_tx_ready+0xa>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	82 2f       	mov	r24, r18
    15f4:	08 95       	ret

000015f6 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	f6 2e       	mov	r15, r22
    1608:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    160a:	01 e0       	ldi	r16, 0x01	; 1
    160c:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_line_coding+0x6>
    1610:	89 30       	cpi	r24, 0x09	; 9
    1612:	09 f0       	breq	.+2      	; 0x1616 <udi_cdc_multi_putc+0x20>
    1614:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	e7 df       	rcall	.-50     	; 0x15e8 <udi_cdc_multi_is_tx_ready>
    161a:	81 11       	cpse	r24, r1
    161c:	07 c0       	rjmp	.+14     	; 0x162c <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
    161e:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udi_cdc_data_running>
    1622:	81 11       	cpse	r24, r1
    1624:	f8 cf       	rjmp	.-16     	; 0x1616 <udi_cdc_multi_putc+0x20>
			return false;
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2d c0       	rjmp	.+90     	; 0x1686 <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    162c:	8f b7       	in	r24, 0x3f	; 63
    162e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1630:	f8 94       	cli
	return flags;
    1632:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    1634:	e0 91 af 22 	lds	r30, 0x22AF	; 0x8022af <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	df 01       	movw	r26, r30
    163c:	aa 0f       	add	r26, r26
    163e:	bb 1f       	adc	r27, r27
    1640:	a0 55       	subi	r26, 0x50	; 80
    1642:	bd 4d       	sbci	r27, 0xDD	; 221
    1644:	8d 91       	ld	r24, X+
    1646:	9c 91       	ld	r25, X
    1648:	11 97       	sbiw	r26, 0x01	; 1
    164a:	ac 01       	movw	r20, r24
    164c:	4f 5f       	subi	r20, 0xFF	; 255
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	4d 93       	st	X+, r20
    1652:	5c 93       	st	X, r21
    1654:	00 24       	eor	r0, r0
    1656:	f6 95       	lsr	r31
    1658:	e7 95       	ror	r30
    165a:	07 94       	ror	r0
    165c:	f6 95       	lsr	r31
    165e:	e7 95       	ror	r30
    1660:	07 94       	ror	r0
    1662:	fe 2f       	mov	r31, r30
    1664:	e0 2d       	mov	r30, r0
    1666:	8e 0f       	add	r24, r30
    1668:	9f 1f       	adc	r25, r31
    166a:	fc 01       	movw	r30, r24
    166c:	ec 54       	subi	r30, 0x4C	; 76
    166e:	fd 4d       	sbci	r31, 0xDD	; 221
    1670:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1672:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    1674:	00 23       	and	r16, r16
    1676:	29 f0       	breq	.+10     	; 0x1682 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    1678:	f1 2e       	mov	r15, r17
    167a:	11 0f       	add	r17, r17
    167c:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    167e:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    1680:	ca cf       	rjmp	.-108    	; 0x1616 <udi_cdc_multi_putc+0x20>
	}
	return true;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
}
    1686:	0f 90       	pop	r0
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	08 95       	ret

00001694 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    1694:	bc 01       	movw	r22, r24
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	ae cf       	rjmp	.-164    	; 0x15f6 <udi_cdc_multi_putc>
}
    169a:	08 95       	ret

0000169c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    169c:	e0 91 d8 23 	lds	r30, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    16a0:	f0 91 d9 23 	lds	r31, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    16a4:	01 90       	ld	r0, Z+
    16a6:	f0 81       	ld	r31, Z
    16a8:	e0 2d       	mov	r30, r0
    16aa:	22 81       	ldd	r18, Z+2	; 0x02
    16ac:	33 81       	ldd	r19, Z+3	; 0x03
    16ae:	2e 0f       	add	r18, r30
    16b0:	3f 1f       	adc	r19, r31
    16b2:	fc 01       	movw	r30, r24
    16b4:	40 81       	ld	r20, Z
    16b6:	e4 0f       	add	r30, r20
    16b8:	f1 1d       	adc	r31, r1
    16ba:	e2 17       	cp	r30, r18
    16bc:	f3 07       	cpc	r31, r19
    16be:	b8 f4       	brcc	.+46     	; 0x16ee <udc_next_desc_in_iface+0x52>
    16c0:	81 81       	ldd	r24, Z+1	; 0x01
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	b9 f0       	breq	.+46     	; 0x16f4 <udc_next_desc_in_iface+0x58>
    16c6:	86 13       	cpse	r24, r22
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <udc_next_desc_in_iface+0x40>
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <udc_next_desc_in_iface+0x3a>
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	a1 f0       	breq	.+40     	; 0x16fa <udc_next_desc_in_iface+0x5e>
    16d2:	86 13       	cpse	r24, r22
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <udc_next_desc_in_iface+0x40>
    16d6:	8e 2f       	mov	r24, r30
    16d8:	9f 2f       	mov	r25, r31
    16da:	08 95       	ret
    16dc:	80 81       	ld	r24, Z
    16de:	e8 0f       	add	r30, r24
    16e0:	f1 1d       	adc	r31, r1
    16e2:	e2 17       	cp	r30, r18
    16e4:	f3 07       	cpc	r31, r19
    16e6:	90 f3       	brcs	.-28     	; 0x16cc <udc_next_desc_in_iface+0x30>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	08 95       	ret
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	08 95       	ret
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	08 95       	ret
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	08 95       	ret

00001700 <udc_valid_address>:
    1700:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    1704:	8f 77       	andi	r24, 0x7F	; 127
    1706:	5a c7       	rjmp	.+3764   	; 0x25bc <udd_set_address>
    1708:	08 95       	ret

0000170a <udc_update_iface_desc>:
    170a:	90 91 da 23 	lds	r25, 0x23DA	; 0x8023da <udc_num_configuration>
    170e:	99 23       	and	r25, r25
    1710:	81 f1       	breq	.+96     	; 0x1772 <udc_update_iface_desc+0x68>
    1712:	e0 91 d8 23 	lds	r30, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1716:	f0 91 d9 23 	lds	r31, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    171a:	01 90       	ld	r0, Z+
    171c:	f0 81       	ld	r31, Z
    171e:	e0 2d       	mov	r30, r0
    1720:	94 81       	ldd	r25, Z+4	; 0x04
    1722:	89 17       	cp	r24, r25
    1724:	40 f5       	brcc	.+80     	; 0x1776 <udc_update_iface_desc+0x6c>
    1726:	e0 93 d6 23 	sts	0x23D6, r30	; 0x8023d6 <udc_ptr_iface>
    172a:	f0 93 d7 23 	sts	0x23D7, r31	; 0x8023d7 <udc_ptr_iface+0x1>
    172e:	22 81       	ldd	r18, Z+2	; 0x02
    1730:	33 81       	ldd	r19, Z+3	; 0x03
    1732:	2e 0f       	add	r18, r30
    1734:	3f 1f       	adc	r19, r31
    1736:	e2 17       	cp	r30, r18
    1738:	f3 07       	cpc	r31, r19
    173a:	f8 f4       	brcc	.+62     	; 0x177a <udc_update_iface_desc+0x70>
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	94 30       	cpi	r25, 0x04	; 4
    1740:	61 f4       	brne	.+24     	; 0x175a <udc_update_iface_desc+0x50>
    1742:	92 81       	ldd	r25, Z+2	; 0x02
    1744:	98 13       	cpse	r25, r24
    1746:	09 c0       	rjmp	.+18     	; 0x175a <udc_update_iface_desc+0x50>
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	96 13       	cpse	r25, r22
    174c:	06 c0       	rjmp	.+12     	; 0x175a <udc_update_iface_desc+0x50>
    174e:	e0 93 d6 23 	sts	0x23D6, r30	; 0x8023d6 <udc_ptr_iface>
    1752:	f0 93 d7 23 	sts	0x23D7, r31	; 0x8023d7 <udc_ptr_iface+0x1>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	08 95       	ret
    175a:	90 81       	ld	r25, Z
    175c:	e9 0f       	add	r30, r25
    175e:	f1 1d       	adc	r31, r1
    1760:	e2 17       	cp	r30, r18
    1762:	f3 07       	cpc	r31, r19
    1764:	58 f3       	brcs	.-42     	; 0x173c <udc_update_iface_desc+0x32>
    1766:	e0 93 d6 23 	sts	0x23D6, r30	; 0x8023d6 <udc_ptr_iface>
    176a:	f0 93 d7 23 	sts	0x23D7, r31	; 0x8023d7 <udc_ptr_iface+0x1>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	08 95       	ret
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	08 95       	ret
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	08 95       	ret
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret

0000177e <udc_iface_disable>:
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	c8 2f       	mov	r28, r24
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	be df       	rcall	.-132    	; 0x170a <udc_update_iface_desc>
    178e:	18 2f       	mov	r17, r24
    1790:	88 23       	and	r24, r24
    1792:	81 f1       	breq	.+96     	; 0x17f4 <udc_iface_disable+0x76>
    1794:	a0 91 d8 23 	lds	r26, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1798:	b0 91 d9 23 	lds	r27, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    179c:	ec 2f       	mov	r30, r28
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	12 96       	adiw	r26, 0x02	; 2
    17a6:	8d 91       	ld	r24, X+
    17a8:	9c 91       	ld	r25, X
    17aa:	13 97       	sbiw	r26, 0x03	; 3
    17ac:	e8 0f       	add	r30, r24
    17ae:	f9 1f       	adc	r31, r25
    17b0:	e0 80       	ld	r14, Z
    17b2:	f1 80       	ldd	r15, Z+1	; 0x01
    17b4:	d7 01       	movw	r26, r14
    17b6:	16 96       	adiw	r26, 0x06	; 6
    17b8:	ed 91       	ld	r30, X+
    17ba:	fc 91       	ld	r31, X
    17bc:	17 97       	sbiw	r26, 0x07	; 7
    17be:	19 95       	eicall
    17c0:	68 2f       	mov	r22, r24
    17c2:	8c 2f       	mov	r24, r28
    17c4:	a2 df       	rcall	.-188    	; 0x170a <udc_update_iface_desc>
    17c6:	18 2f       	mov	r17, r24
    17c8:	88 23       	and	r24, r24
    17ca:	a1 f0       	breq	.+40     	; 0x17f4 <udc_iface_disable+0x76>
    17cc:	c0 91 d6 23 	lds	r28, 0x23D6	; 0x8023d6 <udc_ptr_iface>
    17d0:	d0 91 d7 23 	lds	r29, 0x23D7	; 0x8023d7 <udc_ptr_iface+0x1>
    17d4:	65 e0       	ldi	r22, 0x05	; 5
    17d6:	ce 01       	movw	r24, r28
    17d8:	61 df       	rcall	.-318    	; 0x169c <udc_next_desc_in_iface>
    17da:	ec 01       	movw	r28, r24
    17dc:	89 2b       	or	r24, r25
    17de:	21 f0       	breq	.+8      	; 0x17e8 <udc_iface_disable+0x6a>
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	0e 94 dd 14 	call	0x29ba	; 0x29ba <udd_ep_free>
    17e6:	f6 cf       	rjmp	.-20     	; 0x17d4 <udc_iface_disable+0x56>
    17e8:	d7 01       	movw	r26, r14
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	ed 91       	ld	r30, X+
    17ee:	fc 91       	ld	r31, X
    17f0:	13 97       	sbiw	r26, 0x03	; 3
    17f2:	19 95       	eicall
    17f4:	81 2f       	mov	r24, r17
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	08 95       	ret

00001802 <udc_iface_enable>:
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	18 2f       	mov	r17, r24
    180a:	7f df       	rcall	.-258    	; 0x170a <udc_update_iface_desc>
    180c:	88 23       	and	r24, r24
    180e:	39 f1       	breq	.+78     	; 0x185e <udc_iface_enable+0x5c>
    1810:	c0 91 d6 23 	lds	r28, 0x23D6	; 0x8023d6 <udc_ptr_iface>
    1814:	d0 91 d7 23 	lds	r29, 0x23D7	; 0x8023d7 <udc_ptr_iface+0x1>
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	ce 01       	movw	r24, r28
    181c:	3f df       	rcall	.-386    	; 0x169c <udc_next_desc_in_iface>
    181e:	ec 01       	movw	r28, r24
    1820:	89 2b       	or	r24, r25
    1822:	41 f0       	breq	.+16     	; 0x1834 <udc_iface_enable+0x32>
    1824:	4c 81       	ldd	r20, Y+4	; 0x04
    1826:	5d 81       	ldd	r21, Y+5	; 0x05
    1828:	6b 81       	ldd	r22, Y+3	; 0x03
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	dc d6       	rcall	.+3512   	; 0x25e6 <udd_ep_alloc>
    182e:	81 11       	cpse	r24, r1
    1830:	f3 cf       	rjmp	.-26     	; 0x1818 <udc_iface_enable+0x16>
    1832:	15 c0       	rjmp	.+42     	; 0x185e <udc_iface_enable+0x5c>
    1834:	a0 91 d8 23 	lds	r26, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1838:	b0 91 d9 23 	lds	r27, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    183c:	e1 2f       	mov	r30, r17
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	12 96       	adiw	r26, 0x02	; 2
    1846:	8d 91       	ld	r24, X+
    1848:	9c 91       	ld	r25, X
    184a:	13 97       	sbiw	r26, 0x03	; 3
    184c:	e8 0f       	add	r30, r24
    184e:	f9 1f       	adc	r31, r25
    1850:	01 90       	ld	r0, Z+
    1852:	f0 81       	ld	r31, Z
    1854:	e0 2d       	mov	r30, r0
    1856:	01 90       	ld	r0, Z+
    1858:	f0 81       	ld	r31, Z
    185a:	e0 2d       	mov	r30, r0
    185c:	19 95       	eicall
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	08 95       	ret

00001866 <udc_start>:
    1866:	26 c6       	rjmp	.+3148   	; 0x24b4 <udd_enable>
    1868:	08 95       	ret

0000186a <udc_reset>:
    186a:	cf 93       	push	r28
    186c:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_num_configuration>
    1870:	88 23       	and	r24, r24
    1872:	c1 f0       	breq	.+48     	; 0x18a4 <udc_reset+0x3a>
    1874:	e0 91 d8 23 	lds	r30, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1878:	f0 91 d9 23 	lds	r31, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    187c:	01 90       	ld	r0, Z+
    187e:	f0 81       	ld	r31, Z
    1880:	e0 2d       	mov	r30, r0
    1882:	84 81       	ldd	r24, Z+4	; 0x04
    1884:	88 23       	and	r24, r24
    1886:	71 f0       	breq	.+28     	; 0x18a4 <udc_reset+0x3a>
    1888:	c0 e0       	ldi	r28, 0x00	; 0
    188a:	8c 2f       	mov	r24, r28
    188c:	78 df       	rcall	.-272    	; 0x177e <udc_iface_disable>
    188e:	cf 5f       	subi	r28, 0xFF	; 255
    1890:	e0 91 d8 23 	lds	r30, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1894:	f0 91 d9 23 	lds	r31, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1898:	01 90       	ld	r0, Z+
    189a:	f0 81       	ld	r31, Z
    189c:	e0 2d       	mov	r30, r0
    189e:	84 81       	ldd	r24, Z+4	; 0x04
    18a0:	c8 17       	cp	r28, r24
    18a2:	98 f3       	brcs	.-26     	; 0x188a <udc_reset+0x20>
    18a4:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <udc_num_configuration>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <udc_device_status>
    18b0:	90 93 df 23 	sts	0x23DF, r25	; 0x8023df <udc_device_status+0x1>
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    18b8:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    18ba:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_num_configuration>
    18be:	88 23       	and	r24, r24
    18c0:	49 f1       	breq	.+82     	; 0x1914 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18c2:	a0 91 d8 23 	lds	r26, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    18c6:	b0 91 d9 23 	lds	r27, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    18ca:	ed 91       	ld	r30, X+
    18cc:	fc 91       	ld	r31, X
    18ce:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18d0:	84 81       	ldd	r24, Z+4	; 0x04
    18d2:	88 23       	and	r24, r24
    18d4:	f9 f0       	breq	.+62     	; 0x1914 <udc_sof_notify+0x5c>
    18d6:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    18d8:	ec 2f       	mov	r30, r28
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	12 96       	adiw	r26, 0x02	; 2
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	13 97       	sbiw	r26, 0x03	; 3
    18e8:	e8 0f       	add	r30, r24
    18ea:	f9 1f       	adc	r31, r25
    18ec:	01 90       	ld	r0, Z+
    18ee:	f0 81       	ld	r31, Z
    18f0:	e0 2d       	mov	r30, r0
    18f2:	00 84       	ldd	r0, Z+8	; 0x08
    18f4:	f1 85       	ldd	r31, Z+9	; 0x09
    18f6:	e0 2d       	mov	r30, r0
    18f8:	30 97       	sbiw	r30, 0x00	; 0
    18fa:	09 f0       	breq	.+2      	; 0x18fe <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18fc:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    18fe:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1900:	a0 91 d8 23 	lds	r26, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1904:	b0 91 d9 23 	lds	r27, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1908:	ed 91       	ld	r30, X+
    190a:	fc 91       	ld	r31, X
    190c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    190e:	84 81       	ldd	r24, Z+4	; 0x04
    1910:	c8 17       	cp	r28, r24
    1912:	10 f3       	brcs	.-60     	; 0x18d8 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1920:	e6 e3       	ldi	r30, 0x36	; 54
    1922:	f7 e2       	ldi	r31, 0x27	; 39
    1924:	12 86       	std	Z+10, r1	; 0x0a
    1926:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1928:	14 86       	std	Z+12, r1	; 0x0c
    192a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    192c:	16 86       	std	Z+14, r1	; 0x0e
    192e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1930:	80 81       	ld	r24, Z
    1932:	88 23       	and	r24, r24
    1934:	0c f0       	brlt	.+2      	; 0x1938 <udc_process_setup+0x20>
    1936:	63 c2       	rjmp	.+1222   	; 0x1dfe <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1938:	20 91 3c 27 	lds	r18, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    193c:	30 91 3d 27 	lds	r19, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1940:	21 15       	cp	r18, r1
    1942:	31 05       	cpc	r19, r1
    1944:	09 f0       	breq	.+2      	; 0x1948 <udc_process_setup+0x30>
    1946:	56 c2       	rjmp	.+1196   	; 0x1df4 <udc_process_setup+0x4dc>
    1948:	51 c2       	rjmp	.+1186   	; 0x1dec <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    194a:	8f 71       	andi	r24, 0x1F	; 31
    194c:	09 f0       	breq	.+2      	; 0x1950 <udc_process_setup+0x38>
    194e:	a7 c0       	rjmp	.+334    	; 0x1a9e <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1950:	90 91 37 27 	lds	r25, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1954:	96 30       	cpi	r25, 0x06	; 6
    1956:	79 f0       	breq	.+30     	; 0x1976 <udc_process_setup+0x5e>
    1958:	98 30       	cpi	r25, 0x08	; 8
    195a:	09 f4       	brne	.+2      	; 0x195e <udc_process_setup+0x46>
    195c:	96 c0       	rjmp	.+300    	; 0x1a8a <udc_process_setup+0x172>
    195e:	91 11       	cpse	r25, r1
    1960:	9e c0       	rjmp	.+316    	; 0x1a9e <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	09 f0       	breq	.+2      	; 0x196a <udc_process_setup+0x52>
    1968:	ca c1       	rjmp	.+916    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	8e ed       	ldi	r24, 0xDE	; 222
    1970:	93 e2       	ldi	r25, 0x23	; 35
    1972:	32 d6       	rcall	.+3172   	; 0x25d8 <udd_set_setup_payload>
    1974:	4d c2       	rjmp	.+1178   	; 0x1e10 <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1976:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    197a:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    197e:	29 2f       	mov	r18, r25
    1980:	33 27       	eor	r19, r19
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	a9 f0       	breq	.+42     	; 0x19b2 <udc_process_setup+0x9a>
    1988:	24 f4       	brge	.+8      	; 0x1992 <udc_process_setup+0x7a>
    198a:	21 30       	cpi	r18, 0x01	; 1
    198c:	31 05       	cpc	r19, r1
    198e:	41 f0       	breq	.+16     	; 0x19a0 <udc_process_setup+0x88>
    1990:	ad c1       	rjmp	.+858    	; 0x1cec <udc_process_setup+0x3d4>
    1992:	23 30       	cpi	r18, 0x03	; 3
    1994:	31 05       	cpc	r19, r1
    1996:	d9 f1       	breq	.+118    	; 0x1a0e <udc_process_setup+0xf6>
    1998:	2f 30       	cpi	r18, 0x0F	; 15
    199a:	31 05       	cpc	r19, r1
    199c:	51 f1       	breq	.+84     	; 0x19f2 <udc_process_setup+0xda>
    199e:	a6 c1       	rjmp	.+844    	; 0x1cec <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    19a0:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <udc_config>
    19a4:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    19a8:	dc 01       	movw	r26, r24
    19aa:	6c 91       	ld	r22, X
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	14 d6       	rcall	.+3112   	; 0x25d8 <udd_set_setup_payload>
    19b0:	5d c0       	rjmp	.+186    	; 0x1a6c <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    19b2:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    19b6:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
    19ba:	21 89       	ldd	r18, Z+17	; 0x11
    19bc:	82 17       	cp	r24, r18
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <udc_process_setup+0xaa>
    19c0:	9e c1       	rjmp	.+828    	; 0x1cfe <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    19c2:	99 27       	eor	r25, r25
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    19d0:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    19d4:	e8 0f       	add	r30, r24
    19d6:	f9 1f       	adc	r31, r25
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    19dc:	fc 01       	movw	r30, r24
    19de:	62 81       	ldd	r22, Z+2	; 0x02
    19e0:	73 81       	ldd	r23, Z+3	; 0x03
    19e2:	fa d5       	rcall	.+3060   	; 0x25d8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19e4:	e0 91 3e 27 	lds	r30, 0x273E	; 0x80273e <udd_g_ctrlreq+0x8>
    19e8:	f0 91 3f 27 	lds	r31, 0x273F	; 0x80273f <udd_g_ctrlreq+0x9>
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	81 83       	std	Z+1, r24	; 0x01
    19f0:	3d c0       	rjmp	.+122    	; 0x1a6c <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    19f2:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <udc_config+0x4>
    19f6:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <udc_config+0x5>
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <udc_process_setup+0xe8>
    19fe:	7f c1       	rjmp	.+766    	; 0x1cfe <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a00:	dc 01       	movw	r26, r24
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	6d 91       	ld	r22, X+
    1a06:	7c 91       	ld	r23, X
    1a08:	13 97       	sbiw	r26, 0x03	; 3
    1a0a:	e6 d5       	rcall	.+3020   	; 0x25d8 <udd_set_setup_payload>
    1a0c:	2f c0       	rjmp	.+94     	; 0x1a6c <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a0e:	99 27       	eor	r25, r25
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	91 f0       	breq	.+36     	; 0x1a3a <udc_process_setup+0x122>
    1a16:	58 f0       	brcs	.+22     	; 0x1a2e <udc_process_setup+0x116>
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <udc_process_setup+0x108>
    1a1e:	f4 c1       	rjmp	.+1000   	; 0x1e08 <udc_process_setup+0x4f0>
    1a20:	03 97       	sbiw	r24, 0x03	; 3
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <udc_process_setup+0x10e>
    1a24:	6c c1       	rjmp	.+728    	; 0x1cfe <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1a26:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
    1a28:	87 e9       	ldi	r24, 0x97	; 151
    1a2a:	92 e2       	ldi	r25, 0x22	; 34
    1a2c:	09 c0       	rjmp	.+18     	; 0x1a40 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	8e e6       	ldi	r24, 0x6E	; 110
    1a34:	90 e2       	ldi	r25, 0x20	; 32
    1a36:	d0 d5       	rcall	.+2976   	; 0x25d8 <udd_set_setup_payload>
    1a38:	19 c0       	rjmp	.+50     	; 0x1a6c <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a3a:	8b e5       	ldi	r24, 0x5B	; 91
    1a3c:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a3e:	22 e1       	ldi	r18, 0x12	; 18
    1a40:	38 2f       	mov	r19, r24
    1a42:	a4 e2       	ldi	r26, 0x24	; 36
    1a44:	b0 e2       	ldi	r27, 0x20	; 32
    1a46:	e8 2f       	mov	r30, r24
    1a48:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a4a:	81 91       	ld	r24, Z+
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	8d 93       	st	X+, r24
    1a50:	9d 93       	st	X+, r25
    1a52:	8e 2f       	mov	r24, r30
    1a54:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1a56:	82 17       	cp	r24, r18
    1a58:	c0 f3       	brcs	.-16     	; 0x1a4a <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a5a:	62 2f       	mov	r22, r18
    1a5c:	66 0f       	add	r22, r22
    1a5e:	6e 5f       	subi	r22, 0xFE	; 254
    1a60:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <udc_string_desc>
		udd_set_setup_payload(
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	82 e2       	ldi	r24, 0x22	; 34
    1a68:	90 e2       	ldi	r25, 0x20	; 32
    1a6a:	b6 d5       	rcall	.+2924   	; 0x25d8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a6c:	e6 e3       	ldi	r30, 0x36	; 54
    1a6e:	f7 e2       	ldi	r31, 0x27	; 39
    1a70:	86 81       	ldd	r24, Z+6	; 0x06
    1a72:	97 81       	ldd	r25, Z+7	; 0x07
    1a74:	22 85       	ldd	r18, Z+10	; 0x0a
    1a76:	33 85       	ldd	r19, Z+11	; 0x0b
    1a78:	82 17       	cp	r24, r18
    1a7a:	93 07       	cpc	r25, r19
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <udc_process_setup+0x168>
    1a7e:	c8 c1       	rjmp	.+912    	; 0x1e10 <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a80:	80 93 40 27 	sts	0x2740, r24	; 0x802740 <udd_g_ctrlreq+0xa>
    1a84:	90 93 41 27 	sts	0x2741, r25	; 0x802741 <udd_g_ctrlreq+0xb>
    1a88:	c3 c1       	rjmp	.+902    	; 0x1e10 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a8a:	21 30       	cpi	r18, 0x01	; 1
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <udc_process_setup+0x17a>
    1a90:	36 c1       	rjmp	.+620    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	8a ed       	ldi	r24, 0xDA	; 218
    1a98:	93 e2       	ldi	r25, 0x23	; 35
    1a9a:	9e d5       	rcall	.+2876   	; 0x25d8 <udd_set_setup_payload>
    1a9c:	b9 c1       	rjmp	.+882    	; 0x1e10 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	e1 f5       	brne	.+120    	; 0x1b1a <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1aa2:	90 91 37 27 	lds	r25, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1aa6:	9a 30       	cpi	r25, 0x0A	; 10
    1aa8:	c1 f5       	brne	.+112    	; 0x1b1a <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1aaa:	21 30       	cpi	r18, 0x01	; 1
    1aac:	31 05       	cpc	r19, r1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <udc_process_setup+0x19a>
    1ab0:	26 c1       	rjmp	.+588    	; 0x1cfe <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ab2:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_num_configuration>
    1ab6:	88 23       	and	r24, r24
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <udc_process_setup+0x1a4>
    1aba:	21 c1       	rjmp	.+578    	; 0x1cfe <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1abc:	c0 91 3a 27 	lds	r28, 0x273A	; 0x80273a <udd_g_ctrlreq+0x4>
    1ac0:	d0 91 3b 27 	lds	r29, 0x273B	; 0x80273b <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ac4:	00 91 d8 23 	lds	r16, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1ac8:	10 91 d9 23 	lds	r17, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1acc:	d8 01       	movw	r26, r16
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	84 81       	ldd	r24, Z+4	; 0x04
    1ad4:	c8 17       	cp	r28, r24
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <udc_process_setup+0x1c2>
    1ad8:	12 c1       	rjmp	.+548    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	8c 2f       	mov	r24, r28
    1ade:	15 de       	rcall	.-982    	; 0x170a <udc_update_iface_desc>
    1ae0:	88 23       	and	r24, r24
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <udc_process_setup+0x1ce>
    1ae4:	0c c1       	rjmp	.+536    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	99 27       	eor	r25, r25
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	d8 01       	movw	r26, r16
    1af0:	12 96       	adiw	r26, 0x02	; 2
    1af2:	ed 91       	ld	r30, X+
    1af4:	fc 91       	ld	r31, X
    1af6:	13 97       	sbiw	r26, 0x03	; 3
    1af8:	e8 0f       	add	r30, r24
    1afa:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1afc:	01 90       	ld	r0, Z+
    1afe:	f0 81       	ld	r31, Z
    1b00:	e0 2d       	mov	r30, r0
    1b02:	86 81       	ldd	r24, Z+6	; 0x06
    1b04:	97 81       	ldd	r25, Z+7	; 0x07
    1b06:	fc 01       	movw	r30, r24
    1b08:	19 95       	eicall
    1b0a:	80 93 dc 23 	sts	0x23DC, r24	; 0x8023dc <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	8c ed       	ldi	r24, 0xDC	; 220
    1b14:	93 e2       	ldi	r25, 0x23	; 35
    1b16:	60 d5       	rcall	.+2752   	; 0x25d8 <udd_set_setup_payload>
    1b18:	7b c1       	rjmp	.+758    	; 0x1e10 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <udc_process_setup+0x208>
    1b1e:	ef c0       	rjmp	.+478    	; 0x1cfe <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b20:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1b24:	81 11       	cpse	r24, r1
    1b26:	e4 c0       	rjmp	.+456    	; 0x1cf0 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <udc_process_setup+0x218>
    1b2e:	e7 c0       	rjmp	.+462    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b30:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <udd_g_ctrlreq+0x4>
    1b34:	e0 d5       	rcall	.+3008   	; 0x26f6 <udd_ep_is_halted>
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <udc_ep_status.4671>
    1b3c:	90 93 d5 23 	sts	0x23D5, r25	; 0x8023d5 <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b40:	62 e0       	ldi	r22, 0x02	; 2
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	84 ed       	ldi	r24, 0xD4	; 212
    1b46:	93 e2       	ldi	r25, 0x23	; 35
    1b48:	47 d5       	rcall	.+2702   	; 0x25d8 <udd_set_setup_payload>
    1b4a:	62 c1       	rjmp	.+708    	; 0x1e10 <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b4c:	8f 71       	andi	r24, 0x1F	; 31
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <udc_process_setup+0x23a>
    1b50:	83 c0       	rjmp	.+262    	; 0x1c58 <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b52:	90 91 37 27 	lds	r25, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1b56:	93 30       	cpi	r25, 0x03	; 3
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <udc_process_setup+0x244>
    1b5a:	cc c0       	rjmp	.+408    	; 0x1cf4 <udc_process_setup+0x3dc>
    1b5c:	18 f4       	brcc	.+6      	; 0x1b64 <udc_process_setup+0x24c>
    1b5e:	91 30       	cpi	r25, 0x01	; 1
    1b60:	a1 f0       	breq	.+40     	; 0x1b8a <udc_process_setup+0x272>
    1b62:	7a c0       	rjmp	.+244    	; 0x1c58 <udc_process_setup+0x340>
    1b64:	95 30       	cpi	r25, 0x05	; 5
    1b66:	19 f0       	breq	.+6      	; 0x1b6e <udc_process_setup+0x256>
    1b68:	99 30       	cpi	r25, 0x09	; 9
    1b6a:	39 f1       	breq	.+78     	; 0x1bba <udc_process_setup+0x2a2>
    1b6c:	75 c0       	rjmp	.+234    	; 0x1c58 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b6e:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1b72:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <udc_process_setup+0x264>
    1b7a:	c1 c0       	rjmp	.+386    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b7c:	80 e8       	ldi	r24, 0x80	; 128
    1b7e:	9b e0       	ldi	r25, 0x0B	; 11
    1b80:	80 93 42 27 	sts	0x2742, r24	; 0x802742 <udd_g_ctrlreq+0xc>
    1b84:	90 93 43 27 	sts	0x2743, r25	; 0x802743 <udd_g_ctrlreq+0xd>
    1b88:	43 c1       	rjmp	.+646    	; 0x1e10 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b8a:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1b8e:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1b92:	89 2b       	or	r24, r25
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <udc_process_setup+0x280>
    1b96:	b3 c0       	rjmp	.+358    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b98:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    1b9c:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <udd_g_ctrlreq+0x3>
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <udc_process_setup+0x28e>
    1ba4:	ac c0       	rjmp	.+344    	; 0x1cfe <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1ba6:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <udc_device_status>
    1baa:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <udc_device_status+0x1>
    1bae:	8d 7f       	andi	r24, 0xFD	; 253
    1bb0:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <udc_device_status>
    1bb4:	90 93 df 23 	sts	0x23DF, r25	; 0x8023df <udc_device_status+0x1>
    1bb8:	2b c1       	rjmp	.+598    	; 0x1e10 <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1bba:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1bbe:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1bc2:	89 2b       	or	r24, r25
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <udc_process_setup+0x2b0>
    1bc6:	9b c0       	rjmp	.+310    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1bc8:	fc d4       	rcall	.+2552   	; 0x25c2 <udd_getaddress>
    1bca:	88 23       	and	r24, r24
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <udc_process_setup+0x2b8>
    1bce:	97 c0       	rjmp	.+302    	; 0x1cfe <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1bd0:	20 91 38 27 	lds	r18, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    1bd4:	30 91 39 27 	lds	r19, 0x2739	; 0x802739 <udd_g_ctrlreq+0x3>
    1bd8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1bda:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    1bde:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1be2:	81 89       	ldd	r24, Z+17	; 0x11
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	82 17       	cp	r24, r18
    1be8:	93 07       	cpc	r25, r19
    1bea:	08 f4       	brcc	.+2      	; 0x1bee <udc_process_setup+0x2d6>
    1bec:	88 c0       	rjmp	.+272    	; 0x1cfe <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1bee:	3d de       	rcall	.-902    	; 0x186a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1bf0:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    1bf4:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <udd_g_ctrlreq+0x3>
    1bf8:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1bfc:	88 23       	and	r24, r24
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <udc_process_setup+0x2ea>
    1c00:	07 c1       	rjmp	.+526    	; 0x1e10 <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c02:	99 27       	eor	r25, r25
    1c04:	81 50       	subi	r24, 0x01	; 1
    1c06:	90 4c       	sbci	r25, 0xC0	; 192
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    1c14:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    1c18:	e8 0f       	add	r30, r24
    1c1a:	f9 1f       	adc	r31, r25
    1c1c:	e0 93 d8 23 	sts	0x23D8, r30	; 0x8023d8 <udc_ptr_conf>
    1c20:	f0 93 d9 23 	sts	0x23D9, r31	; 0x8023d9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c24:	01 90       	ld	r0, Z+
    1c26:	f0 81       	ld	r31, Z
    1c28:	e0 2d       	mov	r30, r0
    1c2a:	84 81       	ldd	r24, Z+4	; 0x04
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <udc_process_setup+0x31a>
    1c30:	ef c0       	rjmp	.+478    	; 0x1e10 <udc_process_setup+0x4f8>
    1c32:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	8c 2f       	mov	r24, r28
    1c38:	e4 dd       	rcall	.-1080   	; 0x1802 <udc_iface_enable>
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <udc_process_setup+0x328>
    1c3e:	5f c0       	rjmp	.+190    	; 0x1cfe <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c40:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c42:	e0 91 d8 23 	lds	r30, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1c46:	f0 91 d9 23 	lds	r31, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	f0 81       	ld	r31, Z
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	84 81       	ldd	r24, Z+4	; 0x04
    1c52:	c8 17       	cp	r28, r24
    1c54:	78 f3       	brcs	.-34     	; 0x1c34 <udc_process_setup+0x31c>
    1c56:	dc c0       	rjmp	.+440    	; 0x1e10 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	e1 f4       	brne	.+56     	; 0x1c94 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c5c:	90 91 37 27 	lds	r25, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1c60:	9b 30       	cpi	r25, 0x0B	; 11
    1c62:	c1 f4       	brne	.+48     	; 0x1c94 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1c64:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1c68:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1c6c:	89 2b       	or	r24, r25
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <udc_process_setup+0x35a>
    1c70:	46 c0       	rjmp	.+140    	; 0x1cfe <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c72:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_num_configuration>
    1c76:	88 23       	and	r24, r24
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <udc_process_setup+0x364>
    1c7a:	41 c0       	rjmp	.+130    	; 0x1cfe <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c7c:	e6 e3       	ldi	r30, 0x36	; 54
    1c7e:	f7 e2       	ldi	r31, 0x27	; 39
    1c80:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c82:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1c84:	8c 2f       	mov	r24, r28
    1c86:	7b dd       	rcall	.-1290   	; 0x177e <udc_iface_disable>
    1c88:	88 23       	and	r24, r24
    1c8a:	c9 f1       	breq	.+114    	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1c8c:	6d 2f       	mov	r22, r29
    1c8e:	8c 2f       	mov	r24, r28
    1c90:	b8 dd       	rcall	.-1168   	; 0x1802 <udc_iface_enable>
    1c92:	33 c0       	rjmp	.+102    	; 0x1cfa <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	99 f5       	brne	.+102    	; 0x1cfe <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c98:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <udd_g_ctrlreq+0x1>
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <udc_process_setup+0x38e>
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	89 f0       	breq	.+34     	; 0x1cc6 <udc_process_setup+0x3ae>
    1ca4:	29 c0       	rjmp	.+82     	; 0x1cf8 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ca6:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1caa:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1cae:	89 2b       	or	r24, r25
    1cb0:	31 f5       	brne	.+76     	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cb2:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    1cb6:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <udd_g_ctrlreq+0x3>
    1cba:	89 2b       	or	r24, r25
    1cbc:	01 f5       	brne	.+64     	; 0x1cfe <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cbe:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <udd_g_ctrlreq+0x4>
    1cc2:	34 d5       	rcall	.+2664   	; 0x272c <udd_ep_clear_halt>
    1cc4:	1a c0       	rjmp	.+52     	; 0x1cfa <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cc6:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1cca:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1cce:	89 2b       	or	r24, r25
    1cd0:	b1 f4       	brne	.+44     	; 0x1cfe <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cd2:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <udd_g_ctrlreq+0x2>
    1cd6:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <udd_g_ctrlreq+0x3>
    1cda:	89 2b       	or	r24, r25
    1cdc:	81 f4       	brne	.+32     	; 0x1cfe <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cde:	c6 e3       	ldi	r28, 0x36	; 54
    1ce0:	d7 e2       	ldi	r29, 0x27	; 39
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	21 d6       	rcall	.+3138   	; 0x2928 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	84 d6       	rcall	.+3336   	; 0x29f2 <udd_ep_set_halt>
    1cea:	07 c0       	rjmp	.+14     	; 0x1cfa <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	8a c0       	rjmp	.+276    	; 0x1e12 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1cfe:	80 91 36 27 	lds	r24, 0x2736	; 0x802736 <udd_g_ctrlreq>
    1d02:	8f 71       	andi	r24, 0x1F	; 31
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	71 f5       	brne	.+92     	; 0x1d64 <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d08:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_num_configuration>
    1d0c:	88 23       	and	r24, r24
    1d0e:	51 f1       	breq	.+84     	; 0x1d64 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d10:	00 91 3a 27 	lds	r16, 0x273A	; 0x80273a <udd_g_ctrlreq+0x4>
    1d14:	10 91 3b 27 	lds	r17, 0x273B	; 0x80273b <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d18:	c0 91 d8 23 	lds	r28, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1d1c:	d0 91 d9 23 	lds	r29, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1d20:	e8 81       	ld	r30, Y
    1d22:	f9 81       	ldd	r31, Y+1	; 0x01
    1d24:	84 81       	ldd	r24, Z+4	; 0x04
    1d26:	08 17       	cp	r16, r24
    1d28:	e8 f4       	brcc	.+58     	; 0x1d64 <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	80 2f       	mov	r24, r16
    1d2e:	ed dc       	rcall	.-1574   	; 0x170a <udc_update_iface_desc>
    1d30:	88 23       	and	r24, r24
    1d32:	c1 f0       	breq	.+48     	; 0x1d64 <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d34:	f8 01       	movw	r30, r16
    1d36:	ff 27       	eor	r31, r31
    1d38:	cf 01       	movw	r24, r30
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d40:	fb 81       	ldd	r31, Y+3	; 0x03
    1d42:	e8 0f       	add	r30, r24
    1d44:	f9 1f       	adc	r31, r25
    1d46:	c0 81       	ld	r28, Z
    1d48:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d4a:	ee 81       	ldd	r30, Y+6	; 0x06
    1d4c:	ff 81       	ldd	r31, Y+7	; 0x07
    1d4e:	19 95       	eicall
    1d50:	68 2f       	mov	r22, r24
    1d52:	80 2f       	mov	r24, r16
    1d54:	da dc       	rcall	.-1612   	; 0x170a <udc_update_iface_desc>
    1d56:	88 23       	and	r24, r24
    1d58:	29 f0       	breq	.+10     	; 0x1d64 <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1d5a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d5c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d5e:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1d60:	81 11       	cpse	r24, r1
    1d62:	57 c0       	rjmp	.+174    	; 0x1e12 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d64:	80 91 36 27 	lds	r24, 0x2736	; 0x802736 <udd_g_ctrlreq>
    1d68:	8f 71       	andi	r24, 0x1F	; 31
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <udc_process_setup+0x458>
    1d6e:	40 c0       	rjmp	.+128    	; 0x1df0 <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d70:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_num_configuration>
    1d74:	88 23       	and	r24, r24
    1d76:	b1 f1       	breq	.+108    	; 0x1de4 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d78:	a0 91 d8 23 	lds	r26, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1d7c:	b0 91 d9 23 	lds	r27, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1d80:	ed 91       	ld	r30, X+
    1d82:	fc 91       	ld	r31, X
    1d84:	11 97       	sbiw	r26, 0x01	; 1
    1d86:	84 81       	ldd	r24, Z+4	; 0x04
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f1       	breq	.+92     	; 0x1de8 <udc_process_setup+0x4d0>
    1d8c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d8e:	ec 2f       	mov	r30, r28
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	12 96       	adiw	r26, 0x02	; 2
    1d98:	8d 91       	ld	r24, X+
    1d9a:	9c 91       	ld	r25, X
    1d9c:	13 97       	sbiw	r26, 0x03	; 3
    1d9e:	e8 0f       	add	r30, r24
    1da0:	f9 1f       	adc	r31, r25
    1da2:	00 81       	ld	r16, Z
    1da4:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1da6:	d8 01       	movw	r26, r16
    1da8:	16 96       	adiw	r26, 0x06	; 6
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	17 97       	sbiw	r26, 0x07	; 7
    1db0:	19 95       	eicall
    1db2:	68 2f       	mov	r22, r24
    1db4:	8c 2f       	mov	r24, r28
    1db6:	a9 dc       	rcall	.-1710   	; 0x170a <udc_update_iface_desc>
    1db8:	88 23       	and	r24, r24
    1dba:	59 f1       	breq	.+86     	; 0x1e12 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1dbc:	d8 01       	movw	r26, r16
    1dbe:	14 96       	adiw	r26, 0x04	; 4
    1dc0:	ed 91       	ld	r30, X+
    1dc2:	fc 91       	ld	r31, X
    1dc4:	15 97       	sbiw	r26, 0x05	; 5
    1dc6:	19 95       	eicall
    1dc8:	81 11       	cpse	r24, r1
    1dca:	23 c0       	rjmp	.+70     	; 0x1e12 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1dcc:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dce:	a0 91 d8 23 	lds	r26, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    1dd2:	b0 91 d9 23 	lds	r27, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    1dd6:	ed 91       	ld	r30, X+
    1dd8:	fc 91       	ld	r31, X
    1dda:	11 97       	sbiw	r26, 0x01	; 1
    1ddc:	94 81       	ldd	r25, Z+4	; 0x04
    1dde:	c9 17       	cp	r28, r25
    1de0:	b0 f2       	brcs	.-84     	; 0x1d8e <udc_process_setup+0x476>
    1de2:	17 c0       	rjmp	.+46     	; 0x1e12 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	15 c0       	rjmp	.+42     	; 0x1e12 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	13 c0       	rjmp	.+38     	; 0x1e12 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	11 c0       	rjmp	.+34     	; 0x1e12 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1df4:	98 2f       	mov	r25, r24
    1df6:	90 76       	andi	r25, 0x60	; 96
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <udc_process_setup+0x4e4>
    1dfa:	81 cf       	rjmp	.-254    	; 0x1cfe <udc_process_setup+0x3e6>
    1dfc:	a6 cd       	rjmp	.-1204   	; 0x194a <udc_process_setup+0x32>
    1dfe:	98 2f       	mov	r25, r24
    1e00:	90 76       	andi	r25, 0x60	; 96
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <udc_process_setup+0x4ee>
    1e04:	7c cf       	rjmp	.-264    	; 0x1cfe <udc_process_setup+0x3e6>
    1e06:	a2 ce       	rjmp	.-700    	; 0x1b4c <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1e08:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    1e0a:	88 e4       	ldi	r24, 0x48	; 72
    1e0c:	90 e2       	ldi	r25, 0x20	; 32
    1e0e:	18 ce       	rjmp	.-976    	; 0x1a40 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	08 95       	ret

00001e1c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	1f 92       	push	r1
    1e22:	1f 92       	push	r1
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	81 11       	cpse	r24, r1
    1e2a:	26 c0       	rjmp	.+76     	; 0x1e78 <udd_sleep_mode+0x5c>
    1e2c:	90 91 0c 25 	lds	r25, 0x250C	; 0x80250c <udd_b_idle>
    1e30:	99 23       	and	r25, r25
    1e32:	f9 f0       	breq	.+62     	; 0x1e72 <udd_sleep_mode+0x56>
    1e34:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <sleepmgr_locks+0x1>
    1e38:	91 11       	cpse	r25, r1
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <udd_sleep_mode+0x22>
    1e3c:	ff cf       	rjmp	.-2      	; 0x1e3c <udd_sleep_mode+0x20>
    1e3e:	9f b7       	in	r25, 0x3f	; 63
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	f8 94       	cli
    1e44:	2a 81       	ldd	r18, Y+2	; 0x02
    1e46:	e6 e4       	ldi	r30, 0x46	; 70
    1e48:	f7 e2       	ldi	r31, 0x27	; 39
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	91 50       	subi	r25, 0x01	; 1
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	2f bf       	out	0x3f, r18	; 63
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <udd_sleep_mode+0x56>
    1e54:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <sleepmgr_locks+0x1>
    1e58:	9f 3f       	cpi	r25, 0xFF	; 255
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <udd_sleep_mode+0x42>
    1e5c:	ff cf       	rjmp	.-2      	; 0x1e5c <udd_sleep_mode+0x40>
    1e5e:	9f b7       	in	r25, 0x3f	; 63
    1e60:	99 83       	std	Y+1, r25	; 0x01
    1e62:	f8 94       	cli
    1e64:	29 81       	ldd	r18, Y+1	; 0x01
    1e66:	e6 e4       	ldi	r30, 0x46	; 70
    1e68:	f7 e2       	ldi	r31, 0x27	; 39
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	9f 5f       	subi	r25, 0xFF	; 255
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	2f bf       	out	0x3f, r18	; 63
    1e72:	80 93 0c 25 	sts	0x250C, r24	; 0x80250c <udd_b_idle>
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <udd_sleep_mode+0x66>
    1e78:	90 91 0c 25 	lds	r25, 0x250C	; 0x80250c <udd_b_idle>
    1e7c:	99 23       	and	r25, r25
    1e7e:	51 f3       	breq	.-44     	; 0x1e54 <udd_sleep_mode+0x38>
    1e80:	f8 cf       	rjmp	.-16     	; 0x1e72 <udd_sleep_mode+0x56>
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <udd_ctrl_init>:
    1e8c:	0f 93       	push	r16
    1e8e:	e8 ec       	ldi	r30, 0xC8	; 200
    1e90:	f4 e0       	ldi	r31, 0x04	; 4
    1e92:	80 81       	ld	r24, Z
    1e94:	8f 7d       	andi	r24, 0xDF	; 223
    1e96:	80 83       	st	Z, r24
    1e98:	80 81       	ld	r24, Z
    1e9a:	8f 7d       	andi	r24, 0xDF	; 223
    1e9c:	80 83       	st	Z, r24
    1e9e:	e0 ee       	ldi	r30, 0xE0	; 224
    1ea0:	f4 e2       	ldi	r31, 0x24	; 36
    1ea2:	02 e0       	ldi	r16, 0x02	; 2
    1ea4:	05 93       	las	Z, r16
    1ea6:	10 92 e2 24 	sts	0x24E2, r1	; 0x8024e2 <udd_sram+0x16>
    1eaa:	10 92 e3 24 	sts	0x24E3, r1	; 0x8024e3 <udd_sram+0x17>
    1eae:	00 e2       	ldi	r16, 0x20	; 32
    1eb0:	06 93       	lac	Z, r16
    1eb2:	00 e4       	ldi	r16, 0x40	; 64
    1eb4:	06 93       	lac	Z, r16
    1eb6:	e8 ed       	ldi	r30, 0xD8	; 216
    1eb8:	f4 e2       	ldi	r31, 0x24	; 36
    1eba:	00 e4       	ldi	r16, 0x40	; 64
    1ebc:	06 93       	lac	Z, r16
    1ebe:	e6 e3       	ldi	r30, 0x36	; 54
    1ec0:	f7 e2       	ldi	r31, 0x27	; 39
    1ec2:	14 86       	std	Z+12, r1	; 0x0c
    1ec4:	15 86       	std	Z+13, r1	; 0x0d
    1ec6:	16 86       	std	Z+14, r1	; 0x0e
    1ec8:	17 86       	std	Z+15, r1	; 0x0f
    1eca:	12 86       	std	Z+10, r1	; 0x0a
    1ecc:	13 86       	std	Z+11, r1	; 0x0b
    1ece:	10 92 c9 24 	sts	0x24C9, r1	; 0x8024c9 <udd_ep_control_state>
    1ed2:	0f 91       	pop	r16
    1ed4:	08 95       	ret

00001ed6 <udd_ctrl_stall_data>:
    1ed6:	0f 93       	push	r16
    1ed8:	85 e0       	ldi	r24, 0x05	; 5
    1eda:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <udd_ep_control_state>
    1ede:	e1 ee       	ldi	r30, 0xE1	; 225
    1ee0:	f4 e2       	ldi	r31, 0x24	; 36
    1ee2:	04 e0       	ldi	r16, 0x04	; 4
    1ee4:	05 93       	las	Z, r16
    1ee6:	e9 ed       	ldi	r30, 0xD9	; 217
    1ee8:	f4 e2       	ldi	r31, 0x24	; 36
    1eea:	04 e0       	ldi	r16, 0x04	; 4
    1eec:	05 93       	las	Z, r16
    1eee:	0f 91       	pop	r16
    1ef0:	08 95       	ret

00001ef2 <udd_ctrl_send_zlp_in>:
    1ef2:	0f 93       	push	r16
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <udd_ep_control_state>
    1efa:	10 92 e2 24 	sts	0x24E2, r1	; 0x8024e2 <udd_sram+0x16>
    1efe:	10 92 e3 24 	sts	0x24E3, r1	; 0x8024e3 <udd_sram+0x17>
    1f02:	e0 ee       	ldi	r30, 0xE0	; 224
    1f04:	f4 e2       	ldi	r31, 0x24	; 36
    1f06:	02 e0       	ldi	r16, 0x02	; 2
    1f08:	06 93       	lac	Z, r16
    1f0a:	0f 91       	pop	r16
    1f0c:	08 95       	ret

00001f0e <udd_ctrl_endofrequest>:
    1f0e:	e0 91 42 27 	lds	r30, 0x2742	; 0x802742 <udd_g_ctrlreq+0xc>
    1f12:	f0 91 43 27 	lds	r31, 0x2743	; 0x802743 <udd_g_ctrlreq+0xd>
    1f16:	30 97       	sbiw	r30, 0x00	; 0
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <udd_ctrl_endofrequest+0xe>
    1f1a:	19 95       	eicall
    1f1c:	08 95       	ret

00001f1e <udd_ctrl_in_sent>:
    1f1e:	0f 93       	push	r16
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <udd_ep_control_state>
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <udd_ctrl_in_sent+0x14>
    1f2c:	f0 df       	rcall	.-32     	; 0x1f0e <udd_ctrl_endofrequest>
    1f2e:	ae df       	rcall	.-164    	; 0x1e8c <udd_ctrl_init>
    1f30:	5e c0       	rjmp	.+188    	; 0x1fee <udd_ctrl_in_sent+0xd0>
    1f32:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    1f36:	90 91 c6 24 	lds	r25, 0x24C6	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    1f3a:	c0 91 40 27 	lds	r28, 0x2740	; 0x802740 <udd_g_ctrlreq+0xa>
    1f3e:	d0 91 41 27 	lds	r29, 0x2741	; 0x802741 <udd_g_ctrlreq+0xb>
    1f42:	c8 1b       	sub	r28, r24
    1f44:	d9 0b       	sbc	r29, r25
    1f46:	71 f5       	brne	.+92     	; 0x1fa4 <udd_ctrl_in_sent+0x86>
    1f48:	20 91 c7 24 	lds	r18, 0x24C7	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    1f4c:	30 91 c8 24 	lds	r19, 0x24C8	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f50:	82 0f       	add	r24, r18
    1f52:	93 1f       	adc	r25, r19
    1f54:	80 93 c7 24 	sts	0x24C7, r24	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    1f58:	90 93 c8 24 	sts	0x24C8, r25	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f5c:	20 91 3c 27 	lds	r18, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    1f60:	30 91 3d 27 	lds	r19, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    1f64:	82 17       	cp	r24, r18
    1f66:	93 07       	cpc	r25, r19
    1f68:	21 f0       	breq	.+8      	; 0x1f72 <udd_ctrl_in_sent+0x54>
    1f6a:	80 91 e0 23 	lds	r24, 0x23E0	; 0x8023e0 <b_shortpacket.5381>
    1f6e:	88 23       	and	r24, r24
    1f70:	41 f0       	breq	.+16     	; 0x1f82 <udd_ctrl_in_sent+0x64>
    1f72:	84 e0       	ldi	r24, 0x04	; 4
    1f74:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <udd_ep_control_state>
    1f78:	e8 ed       	ldi	r30, 0xD8	; 216
    1f7a:	f4 e2       	ldi	r31, 0x24	; 36
    1f7c:	02 e0       	ldi	r16, 0x02	; 2
    1f7e:	06 93       	lac	Z, r16
    1f80:	36 c0       	rjmp	.+108    	; 0x1fee <udd_ctrl_in_sent+0xd0>
    1f82:	e0 91 44 27 	lds	r30, 0x2744	; 0x802744 <udd_g_ctrlreq+0xe>
    1f86:	f0 91 45 27 	lds	r31, 0x2745	; 0x802745 <udd_g_ctrlreq+0xf>
    1f8a:	30 97       	sbiw	r30, 0x00	; 0
    1f8c:	99 f0       	breq	.+38     	; 0x1fb4 <udd_ctrl_in_sent+0x96>
    1f8e:	19 95       	eicall
    1f90:	88 23       	and	r24, r24
    1f92:	81 f0       	breq	.+32     	; 0x1fb4 <udd_ctrl_in_sent+0x96>
    1f94:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    1f98:	10 92 c6 24 	sts	0x24C6, r1	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    1f9c:	c0 91 40 27 	lds	r28, 0x2740	; 0x802740 <udd_g_ctrlreq+0xa>
    1fa0:	d0 91 41 27 	lds	r29, 0x2741	; 0x802741 <udd_g_ctrlreq+0xb>
    1fa4:	c0 34       	cpi	r28, 0x40	; 64
    1fa6:	d1 05       	cpc	r29, r1
    1fa8:	28 f0       	brcs	.+10     	; 0x1fb4 <udd_ctrl_in_sent+0x96>
    1faa:	10 92 e0 23 	sts	0x23E0, r1	; 0x8023e0 <b_shortpacket.5381>
    1fae:	c0 e4       	ldi	r28, 0x40	; 64
    1fb0:	d0 e0       	ldi	r29, 0x00	; 0
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <udd_ctrl_in_sent+0x9c>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 93 e0 23 	sts	0x23E0, r24	; 0x8023e0 <b_shortpacket.5381>
    1fba:	ec ec       	ldi	r30, 0xCC	; 204
    1fbc:	f4 e2       	ldi	r31, 0x24	; 36
    1fbe:	c6 8b       	std	Z+22, r28	; 0x16
    1fc0:	d7 8b       	std	Z+23, r29	; 0x17
    1fc2:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    1fc6:	90 91 c6 24 	lds	r25, 0x24C6	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    1fca:	20 91 3e 27 	lds	r18, 0x273E	; 0x80273e <udd_g_ctrlreq+0x8>
    1fce:	30 91 3f 27 	lds	r19, 0x273F	; 0x80273f <udd_g_ctrlreq+0x9>
    1fd2:	28 0f       	add	r18, r24
    1fd4:	39 1f       	adc	r19, r25
    1fd6:	20 8f       	std	Z+24, r18	; 0x18
    1fd8:	31 8f       	std	Z+25, r19	; 0x19
    1fda:	c8 0f       	add	r28, r24
    1fdc:	d9 1f       	adc	r29, r25
    1fde:	c0 93 c5 24 	sts	0x24C5, r28	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    1fe2:	d0 93 c6 24 	sts	0x24C6, r29	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    1fe6:	e0 ee       	ldi	r30, 0xE0	; 224
    1fe8:	f4 e2       	ldi	r31, 0x24	; 36
    1fea:	02 e0       	ldi	r16, 0x02	; 2
    1fec:	06 93       	lac	Z, r16
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	0f 91       	pop	r16
    1ff4:	08 95       	ret

00001ff6 <udd_ep_get_size>:
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	81 81       	ldd	r24, Z+1	; 0x01
    1ffa:	e8 2f       	mov	r30, r24
    1ffc:	e7 70       	andi	r30, 0x07	; 7
    1ffe:	8e 2f       	mov	r24, r30
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fc 01       	movw	r30, r24
    2004:	31 97       	sbiw	r30, 0x01	; 1
    2006:	e7 30       	cpi	r30, 0x07	; 7
    2008:	f1 05       	cpc	r31, r1
    200a:	d8 f4       	brcc	.+54     	; 0x2042 <udd_ep_get_size+0x4c>
    200c:	88 27       	eor	r24, r24
    200e:	e2 50       	subi	r30, 0x02	; 2
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	8f 4f       	sbci	r24, 0xFF	; 255
    2014:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__tablejump2__>
    2018:	80 e1       	ldi	r24, 0x10	; 16
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	08 95       	ret
    201e:	80 e2       	ldi	r24, 0x20	; 32
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	08 95       	ret
    2024:	80 e4       	ldi	r24, 0x40	; 64
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	08 95       	ret
    202a:	80 e8       	ldi	r24, 0x80	; 128
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	08 95       	ret
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	08 95       	ret
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	08 95       	ret
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	08 95       	ret
    2042:	88 e0       	ldi	r24, 0x08	; 8
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	08 95       	ret

00002048 <udd_ep_get_job>:
    2048:	28 2f       	mov	r18, r24
    204a:	2f 70       	andi	r18, 0x0F	; 15
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	22 0f       	add	r18, r18
    2050:	33 1f       	adc	r19, r19
    2052:	08 2e       	mov	r0, r24
    2054:	00 0c       	add	r0, r0
    2056:	99 0b       	sbc	r25, r25
    2058:	88 27       	eor	r24, r24
    205a:	99 0f       	add	r25, r25
    205c:	88 1f       	adc	r24, r24
    205e:	99 27       	eor	r25, r25
    2060:	82 0f       	add	r24, r18
    2062:	93 1f       	adc	r25, r19
    2064:	02 97       	sbiw	r24, 0x02	; 2
    2066:	9c 01       	movw	r18, r24
    2068:	22 0f       	add	r18, r18
    206a:	33 1f       	adc	r19, r19
    206c:	22 0f       	add	r18, r18
    206e:	33 1f       	adc	r19, r19
    2070:	22 0f       	add	r18, r18
    2072:	33 1f       	adc	r19, r19
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	8f 59       	subi	r24, 0x9F	; 159
    207a:	9b 4d       	sbci	r25, 0xDB	; 219
    207c:	08 95       	ret

0000207e <udd_ctrl_interrupt_tc_setup>:
    207e:	0f 93       	push	r16
    2080:	cf 93       	push	r28
    2082:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2086:	80 ff       	sbrs	r24, 0
    2088:	64 c0       	rjmp	.+200    	; 0x2152 <udd_ctrl_interrupt_tc_setup+0xd4>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2090:	e8 ed       	ldi	r30, 0xD8	; 216
    2092:	f4 e2       	ldi	r31, 0x24	; 36
    2094:	00 e8       	ldi	r16, 0x80	; 128
    2096:	06 93       	lac	Z, r16
    2098:	e0 ee       	ldi	r30, 0xE0	; 224
    209a:	f4 e2       	ldi	r31, 0x24	; 36
    209c:	00 e8       	ldi	r16, 0x80	; 128
    209e:	06 93       	lac	Z, r16
    20a0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    20a4:	e8 ed       	ldi	r30, 0xD8	; 216
    20a6:	f4 e2       	ldi	r31, 0x24	; 36
    20a8:	00 e1       	ldi	r16, 0x10	; 16
    20aa:	06 93       	lac	Z, r16
    20ac:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <udd_ep_control_state>
    20b0:	88 23       	and	r24, r24
    20b2:	29 f0       	breq	.+10     	; 0x20be <udd_ctrl_interrupt_tc_setup+0x40>
    20b4:	83 50       	subi	r24, 0x03	; 3
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <udd_ctrl_interrupt_tc_setup+0x3e>
    20ba:	29 df       	rcall	.-430    	; 0x1f0e <udd_ctrl_endofrequest>
    20bc:	e7 de       	rcall	.-562    	; 0x1e8c <udd_ctrl_init>
    20be:	80 91 da 24 	lds	r24, 0x24DA	; 0x8024da <udd_sram+0xe>
    20c2:	90 91 db 24 	lds	r25, 0x24DB	; 0x8024db <udd_sram+0xf>
    20c6:	08 97       	sbiw	r24, 0x08	; 8
    20c8:	09 f0       	breq	.+2      	; 0x20cc <udd_ctrl_interrupt_tc_setup+0x4e>
    20ca:	45 c0       	rjmp	.+138    	; 0x2156 <udd_ctrl_interrupt_tc_setup+0xd8>
    20cc:	88 e0       	ldi	r24, 0x08	; 8
    20ce:	e5 e8       	ldi	r30, 0x85	; 133
    20d0:	f4 e2       	ldi	r31, 0x24	; 36
    20d2:	a6 e3       	ldi	r26, 0x36	; 54
    20d4:	b7 e2       	ldi	r27, 0x27	; 39
    20d6:	01 90       	ld	r0, Z+
    20d8:	0d 92       	st	X+, r0
    20da:	8a 95       	dec	r24
    20dc:	e1 f7       	brne	.-8      	; 0x20d6 <udd_ctrl_interrupt_tc_setup+0x58>
    20de:	e8 ec       	ldi	r30, 0xC8	; 200
    20e0:	f4 e0       	ldi	r31, 0x04	; 4
    20e2:	80 81       	ld	r24, Z
    20e4:	80 62       	ori	r24, 0x20	; 32
    20e6:	80 83       	st	Z, r24
    20e8:	80 81       	ld	r24, Z
    20ea:	80 62       	ori	r24, 0x20	; 32
    20ec:	80 83       	st	Z, r24
    20ee:	14 dc       	rcall	.-2008   	; 0x1918 <udc_process_setup>
    20f0:	c8 2f       	mov	r28, r24
    20f2:	81 11       	cpse	r24, r1
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <udd_ctrl_interrupt_tc_setup+0x7e>
    20f6:	ef de       	rcall	.-546    	; 0x1ed6 <udd_ctrl_stall_data>
    20f8:	c1 e0       	ldi	r28, 0x01	; 1
    20fa:	2e c0       	rjmp	.+92     	; 0x2158 <udd_ctrl_interrupt_tc_setup+0xda>
    20fc:	80 91 36 27 	lds	r24, 0x2736	; 0x802736 <udd_g_ctrlreq>
    2100:	88 23       	and	r24, r24
    2102:	6c f4       	brge	.+26     	; 0x211e <udd_ctrl_interrupt_tc_setup+0xa0>
    2104:	10 92 c7 24 	sts	0x24C7, r1	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    2108:	10 92 c8 24 	sts	0x24C8, r1	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
    210c:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    2110:	10 92 c6 24 	sts	0x24C6, r1	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <udd_ep_control_state>
    211a:	01 df       	rcall	.-510    	; 0x1f1e <udd_ctrl_in_sent>
    211c:	1d c0       	rjmp	.+58     	; 0x2158 <udd_ctrl_interrupt_tc_setup+0xda>
    211e:	80 91 3c 27 	lds	r24, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    2122:	90 91 3d 27 	lds	r25, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    2126:	89 2b       	or	r24, r25
    2128:	11 f4       	brne	.+4      	; 0x212e <udd_ctrl_interrupt_tc_setup+0xb0>
    212a:	e3 de       	rcall	.-570    	; 0x1ef2 <udd_ctrl_send_zlp_in>
    212c:	15 c0       	rjmp	.+42     	; 0x2158 <udd_ctrl_interrupt_tc_setup+0xda>
    212e:	10 92 c7 24 	sts	0x24C7, r1	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    2132:	10 92 c8 24 	sts	0x24C8, r1	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2136:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    213a:	10 92 c6 24 	sts	0x24C6, r1	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <udd_ep_control_state>
    2144:	e8 ed       	ldi	r30, 0xD8	; 216
    2146:	f4 e2       	ldi	r31, 0x24	; 36
    2148:	02 e0       	ldi	r16, 0x02	; 2
    214a:	06 93       	lac	Z, r16
    214c:	00 e2       	ldi	r16, 0x20	; 32
    214e:	06 93       	lac	Z, r16
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <udd_ctrl_interrupt_tc_setup+0xda>
    2152:	c0 e0       	ldi	r28, 0x00	; 0
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <udd_ctrl_interrupt_tc_setup+0xda>
    2156:	c1 e0       	ldi	r28, 0x01	; 1
    2158:	8c 2f       	mov	r24, r28
    215a:	cf 91       	pop	r28
    215c:	0f 91       	pop	r16
    215e:	08 95       	ret

00002160 <udd_ep_trans_complet>:
    2160:	8f 92       	push	r8
    2162:	9f 92       	push	r9
    2164:	af 92       	push	r10
    2166:	bf 92       	push	r11
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	d8 2e       	mov	r13, r24
    2178:	67 df       	rcall	.-306    	; 0x2048 <udd_ep_get_job>
    217a:	8c 01       	movw	r16, r24
    217c:	bd 2c       	mov	r11, r13
    217e:	bb 1c       	adc	r11, r11
    2180:	bb 24       	eor	r11, r11
    2182:	bb 1c       	adc	r11, r11
    2184:	cd 2d       	mov	r28, r13
    2186:	cf 70       	andi	r28, 0x0F	; 15
    2188:	d0 e0       	ldi	r29, 0x00	; 0
    218a:	cc 0f       	add	r28, r28
    218c:	dd 1f       	adc	r29, r29
    218e:	cb 0d       	add	r28, r11
    2190:	d1 1d       	adc	r29, r1
    2192:	ce 01       	movw	r24, r28
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	9c 01       	movw	r18, r24
    21a2:	28 52       	subi	r18, 0x28	; 40
    21a4:	3b 4d       	sbci	r19, 0xDB	; 219
    21a6:	79 01       	movw	r14, r18
    21a8:	c9 01       	movw	r24, r18
    21aa:	25 df       	rcall	.-438    	; 0x1ff6 <udd_ep_get_size>
    21ac:	4c 01       	movw	r8, r24
    21ae:	bb 20       	and	r11, r11
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <udd_ep_trans_complet+0x54>
    21b2:	79 c0       	rjmp	.+242    	; 0x22a6 <udd_ep_trans_complet+0x146>
    21b4:	fe 01       	movw	r30, r28
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	e4 53       	subi	r30, 0x34	; 52
    21c4:	fb 4d       	sbci	r31, 0xDB	; 219
    21c6:	22 89       	ldd	r18, Z+18	; 0x12
    21c8:	33 89       	ldd	r19, Z+19	; 0x13
    21ca:	d8 01       	movw	r26, r16
    21cc:	15 96       	adiw	r26, 0x05	; 5
    21ce:	8d 91       	ld	r24, X+
    21d0:	9c 91       	ld	r25, X
    21d2:	16 97       	sbiw	r26, 0x06	; 6
    21d4:	82 0f       	add	r24, r18
    21d6:	93 1f       	adc	r25, r19
    21d8:	15 96       	adiw	r26, 0x05	; 5
    21da:	8d 93       	st	X+, r24
    21dc:	9c 93       	st	X, r25
    21de:	16 97       	sbiw	r26, 0x06	; 6
    21e0:	13 96       	adiw	r26, 0x03	; 3
    21e2:	2d 91       	ld	r18, X+
    21e4:	3c 91       	ld	r19, X
    21e6:	14 97       	sbiw	r26, 0x04	; 4
    21e8:	82 17       	cp	r24, r18
    21ea:	93 07       	cpc	r25, r19
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <udd_ep_trans_complet+0x90>
    21ee:	45 c0       	rjmp	.+138    	; 0x227a <udd_ep_trans_complet+0x11a>
    21f0:	28 1b       	sub	r18, r24
    21f2:	39 0b       	sbc	r19, r25
    21f4:	21 15       	cp	r18, r1
    21f6:	b4 e0       	ldi	r27, 0x04	; 4
    21f8:	3b 07       	cpc	r19, r27
    21fa:	38 f0       	brcs	.+14     	; 0x220a <udd_ep_trans_complet+0xaa>
    21fc:	2f ef       	ldi	r18, 0xFF	; 255
    21fe:	33 e0       	ldi	r19, 0x03	; 3
    2200:	c9 01       	movw	r24, r18
    2202:	b4 01       	movw	r22, r8
    2204:	c7 d7       	rcall	.+3982   	; 0x3194 <__udivmodhi4>
    2206:	28 1b       	sub	r18, r24
    2208:	39 0b       	sbc	r19, r25
    220a:	f8 01       	movw	r30, r16
    220c:	80 81       	ld	r24, Z
    220e:	81 ff       	sbrs	r24, 1
    2210:	09 c0       	rjmp	.+18     	; 0x2224 <udd_ep_trans_complet+0xc4>
    2212:	c9 01       	movw	r24, r18
    2214:	b4 01       	movw	r22, r8
    2216:	be d7       	rcall	.+3964   	; 0x3194 <__udivmodhi4>
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	89 2b       	or	r24, r25
    221c:	09 f0       	breq	.+2      	; 0x2220 <udd_ep_trans_complet+0xc0>
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	84 2f       	mov	r24, r20
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <udd_ep_trans_complet+0xc6>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	d8 01       	movw	r26, r16
    2228:	9c 91       	ld	r25, X
    222a:	80 fb       	bst	r24, 0
    222c:	91 f9       	bld	r25, 1
    222e:	9c 93       	st	X, r25
    2230:	fe 01       	movw	r30, r28
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	e4 53       	subi	r30, 0x34	; 52
    2240:	fb 4d       	sbci	r31, 0xDB	; 219
    2242:	12 8a       	std	Z+18, r1	; 0x12
    2244:	13 8a       	std	Z+19, r1	; 0x13
    2246:	26 87       	std	Z+14, r18	; 0x0e
    2248:	37 87       	std	Z+15, r19	; 0x0f
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	2d 91       	ld	r18, X+
    224e:	3c 91       	ld	r19, X
    2250:	12 97       	sbiw	r26, 0x02	; 2
    2252:	15 96       	adiw	r26, 0x05	; 5
    2254:	8d 91       	ld	r24, X+
    2256:	9c 91       	ld	r25, X
    2258:	16 97       	sbiw	r26, 0x06	; 6
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	cc 0f       	add	r28, r28
    2260:	dd 1f       	adc	r29, r29
    2262:	cc 0f       	add	r28, r28
    2264:	dd 1f       	adc	r29, r29
    2266:	cc 0f       	add	r28, r28
    2268:	dd 1f       	adc	r29, r29
    226a:	c4 52       	subi	r28, 0x24	; 36
    226c:	db 4d       	sbci	r29, 0xDB	; 219
    226e:	88 83       	st	Y, r24
    2270:	99 83       	std	Y+1, r25	; 0x01
    2272:	f7 01       	movw	r30, r14
    2274:	02 e0       	ldi	r16, 0x02	; 2
    2276:	06 93       	lac	Z, r16
    2278:	e4 c0       	rjmp	.+456    	; 0x2442 <udd_ep_trans_complet+0x2e2>
    227a:	d8 01       	movw	r26, r16
    227c:	8c 91       	ld	r24, X
    227e:	81 ff       	sbrs	r24, 1
    2280:	cd c0       	rjmp	.+410    	; 0x241c <udd_ep_trans_complet+0x2bc>
    2282:	8d 7f       	andi	r24, 0xFD	; 253
    2284:	8c 93       	st	X, r24
    2286:	cc 0f       	add	r28, r28
    2288:	dd 1f       	adc	r29, r29
    228a:	cc 0f       	add	r28, r28
    228c:	dd 1f       	adc	r29, r29
    228e:	cc 0f       	add	r28, r28
    2290:	dd 1f       	adc	r29, r29
    2292:	c4 53       	subi	r28, 0x34	; 52
    2294:	db 4d       	sbci	r29, 0xDB	; 219
    2296:	1a 8a       	std	Y+18, r1	; 0x12
    2298:	1b 8a       	std	Y+19, r1	; 0x13
    229a:	1e 86       	std	Y+14, r1	; 0x0e
    229c:	1f 86       	std	Y+15, r1	; 0x0f
    229e:	f7 01       	movw	r30, r14
    22a0:	02 e0       	ldi	r16, 0x02	; 2
    22a2:	06 93       	lac	Z, r16
    22a4:	ce c0       	rjmp	.+412    	; 0x2442 <udd_ep_trans_complet+0x2e2>
    22a6:	fe 01       	movw	r30, r28
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	e4 53       	subi	r30, 0x34	; 52
    22b6:	fb 4d       	sbci	r31, 0xDB	; 219
    22b8:	a6 84       	ldd	r10, Z+14	; 0x0e
    22ba:	b7 84       	ldd	r11, Z+15	; 0x0f
    22bc:	d8 01       	movw	r26, r16
    22be:	8c 91       	ld	r24, X
    22c0:	82 ff       	sbrs	r24, 2
    22c2:	19 c0       	rjmp	.+50     	; 0x22f6 <udd_ep_trans_complet+0x196>
    22c4:	11 96       	adiw	r26, 0x01	; 1
    22c6:	ed 91       	ld	r30, X+
    22c8:	fc 91       	ld	r31, X
    22ca:	12 97       	sbiw	r26, 0x02	; 2
    22cc:	15 96       	adiw	r26, 0x05	; 5
    22ce:	2d 91       	ld	r18, X+
    22d0:	3c 91       	ld	r19, X
    22d2:	16 97       	sbiw	r26, 0x06	; 6
    22d4:	13 96       	adiw	r26, 0x03	; 3
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	14 97       	sbiw	r26, 0x04	; 4
    22dc:	b4 01       	movw	r22, r8
    22de:	5a d7       	rcall	.+3764   	; 0x3194 <__udivmodhi4>
    22e0:	b0 e4       	ldi	r27, 0x40	; 64
    22e2:	db 9e       	mul	r13, r27
    22e4:	b0 01       	movw	r22, r0
    22e6:	11 24       	eor	r1, r1
    22e8:	6f 55       	subi	r22, 0x5F	; 95
    22ea:	7c 4d       	sbci	r23, 0xDC	; 220
    22ec:	ac 01       	movw	r20, r24
    22ee:	cf 01       	movw	r24, r30
    22f0:	82 0f       	add	r24, r18
    22f2:	93 1f       	adc	r25, r19
    22f4:	6c d7       	rcall	.+3800   	; 0x31ce <memcpy>
    22f6:	f8 01       	movw	r30, r16
    22f8:	25 81       	ldd	r18, Z+5	; 0x05
    22fa:	36 81       	ldd	r19, Z+6	; 0x06
    22fc:	2a 0d       	add	r18, r10
    22fe:	3b 1d       	adc	r19, r11
    2300:	25 83       	std	Z+5, r18	; 0x05
    2302:	36 83       	std	Z+6, r19	; 0x06
    2304:	83 81       	ldd	r24, Z+3	; 0x03
    2306:	94 81       	ldd	r25, Z+4	; 0x04
    2308:	82 17       	cp	r24, r18
    230a:	93 07       	cpc	r25, r19
    230c:	68 f4       	brcc	.+26     	; 0x2328 <udd_ep_trans_complet+0x1c8>
    230e:	85 83       	std	Z+5, r24	; 0x05
    2310:	96 83       	std	Z+6, r25	; 0x06
    2312:	cc 0f       	add	r28, r28
    2314:	dd 1f       	adc	r29, r29
    2316:	cc 0f       	add	r28, r28
    2318:	dd 1f       	adc	r29, r29
    231a:	cc 0f       	add	r28, r28
    231c:	dd 1f       	adc	r29, r29
    231e:	c4 53       	subi	r28, 0x34	; 52
    2320:	db 4d       	sbci	r29, 0xDB	; 219
    2322:	8a 89       	ldd	r24, Y+18	; 0x12
    2324:	9b 89       	ldd	r25, Y+19	; 0x13
    2326:	7a c0       	rjmp	.+244    	; 0x241c <udd_ep_trans_complet+0x2bc>
    2328:	fe 01       	movw	r30, r28
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	e4 53       	subi	r30, 0x34	; 52
    2338:	fb 4d       	sbci	r31, 0xDB	; 219
    233a:	42 89       	ldd	r20, Z+18	; 0x12
    233c:	53 89       	ldd	r21, Z+19	; 0x13
    233e:	4a 15       	cp	r20, r10
    2340:	5b 05       	cpc	r21, r11
    2342:	09 f0       	breq	.+2      	; 0x2346 <udd_ep_trans_complet+0x1e6>
    2344:	6b c0       	rjmp	.+214    	; 0x241c <udd_ep_trans_complet+0x2bc>
    2346:	28 17       	cp	r18, r24
    2348:	39 07       	cpc	r19, r25
    234a:	09 f4       	brne	.+2      	; 0x234e <udd_ep_trans_complet+0x1ee>
    234c:	67 c0       	rjmp	.+206    	; 0x241c <udd_ep_trans_complet+0x2bc>
    234e:	ac 01       	movw	r20, r24
    2350:	42 1b       	sub	r20, r18
    2352:	53 0b       	sbc	r21, r19
    2354:	9a 01       	movw	r18, r20
    2356:	21 15       	cp	r18, r1
    2358:	54 e0       	ldi	r21, 0x04	; 4
    235a:	35 07       	cpc	r19, r21
    235c:	50 f0       	brcs	.+20     	; 0x2372 <udd_ep_trans_complet+0x212>
    235e:	2f ef       	ldi	r18, 0xFF	; 255
    2360:	33 e0       	ldi	r19, 0x03	; 3
    2362:	c9 01       	movw	r24, r18
    2364:	b4 01       	movw	r22, r8
    2366:	16 d7       	rcall	.+3628   	; 0x3194 <__udivmodhi4>
    2368:	d9 01       	movw	r26, r18
    236a:	a8 1b       	sub	r26, r24
    236c:	b9 0b       	sbc	r27, r25
    236e:	cd 01       	movw	r24, r26
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <udd_ep_trans_complet+0x220>
    2372:	c9 01       	movw	r24, r18
    2374:	b4 01       	movw	r22, r8
    2376:	0e d7       	rcall	.+3612   	; 0x3194 <__udivmodhi4>
    2378:	f9 01       	movw	r30, r18
    237a:	e8 1b       	sub	r30, r24
    237c:	f9 0b       	sbc	r31, r25
    237e:	cf 01       	movw	r24, r30
    2380:	fe 01       	movw	r30, r28
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	e4 53       	subi	r30, 0x34	; 52
    2390:	fb 4d       	sbci	r31, 0xDB	; 219
    2392:	16 86       	std	Z+14, r1	; 0x0e
    2394:	17 86       	std	Z+15, r1	; 0x0f
    2396:	88 15       	cp	r24, r8
    2398:	99 05       	cpc	r25, r9
    239a:	00 f5       	brcc	.+64     	; 0x23dc <udd_ep_trans_complet+0x27c>
    239c:	d8 01       	movw	r26, r16
    239e:	8c 91       	ld	r24, X
    23a0:	84 60       	ori	r24, 0x04	; 4
    23a2:	8c 93       	st	X, r24
    23a4:	b0 e4       	ldi	r27, 0x40	; 64
    23a6:	db 9e       	mul	r13, r27
    23a8:	c0 01       	movw	r24, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	8f 55       	subi	r24, 0x5F	; 95
    23ae:	9c 4d       	sbci	r25, 0xDC	; 220
    23b0:	fe 01       	movw	r30, r28
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e4 52       	subi	r30, 0x24	; 36
    23c0:	fb 4d       	sbci	r31, 0xDB	; 219
    23c2:	80 83       	st	Z, r24
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	cc 0f       	add	r28, r28
    23c8:	dd 1f       	adc	r29, r29
    23ca:	cc 0f       	add	r28, r28
    23cc:	dd 1f       	adc	r29, r29
    23ce:	cc 0f       	add	r28, r28
    23d0:	dd 1f       	adc	r29, r29
    23d2:	c4 53       	subi	r28, 0x34	; 52
    23d4:	db 4d       	sbci	r29, 0xDB	; 219
    23d6:	8a 8a       	std	Y+18, r8	; 0x12
    23d8:	9b 8a       	std	Y+19, r9	; 0x13
    23da:	1c c0       	rjmp	.+56     	; 0x2414 <udd_ep_trans_complet+0x2b4>
    23dc:	f8 01       	movw	r30, r16
    23de:	41 81       	ldd	r20, Z+1	; 0x01
    23e0:	52 81       	ldd	r21, Z+2	; 0x02
    23e2:	25 81       	ldd	r18, Z+5	; 0x05
    23e4:	36 81       	ldd	r19, Z+6	; 0x06
    23e6:	24 0f       	add	r18, r20
    23e8:	35 1f       	adc	r19, r21
    23ea:	fe 01       	movw	r30, r28
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	e4 52       	subi	r30, 0x24	; 36
    23fa:	fb 4d       	sbci	r31, 0xDB	; 219
    23fc:	20 83       	st	Z, r18
    23fe:	31 83       	std	Z+1, r19	; 0x01
    2400:	cc 0f       	add	r28, r28
    2402:	dd 1f       	adc	r29, r29
    2404:	cc 0f       	add	r28, r28
    2406:	dd 1f       	adc	r29, r29
    2408:	cc 0f       	add	r28, r28
    240a:	dd 1f       	adc	r29, r29
    240c:	c4 53       	subi	r28, 0x34	; 52
    240e:	db 4d       	sbci	r29, 0xDB	; 219
    2410:	8a 8b       	std	Y+18, r24	; 0x12
    2412:	9b 8b       	std	Y+19, r25	; 0x13
    2414:	f7 01       	movw	r30, r14
    2416:	02 e0       	ldi	r16, 0x02	; 2
    2418:	06 93       	lac	Z, r16
    241a:	13 c0       	rjmp	.+38     	; 0x2442 <udd_ep_trans_complet+0x2e2>
    241c:	d8 01       	movw	r26, r16
    241e:	8c 91       	ld	r24, X
    2420:	80 ff       	sbrs	r24, 0
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <udd_ep_trans_complet+0x2e2>
    2424:	8e 7f       	andi	r24, 0xFE	; 254
    2426:	8c 93       	st	X, r24
    2428:	17 96       	adiw	r26, 0x07	; 7
    242a:	ed 91       	ld	r30, X+
    242c:	fc 91       	ld	r31, X
    242e:	18 97       	sbiw	r26, 0x08	; 8
    2430:	30 97       	sbiw	r30, 0x00	; 0
    2432:	39 f0       	breq	.+14     	; 0x2442 <udd_ep_trans_complet+0x2e2>
    2434:	15 96       	adiw	r26, 0x05	; 5
    2436:	6d 91       	ld	r22, X+
    2438:	7c 91       	ld	r23, X
    243a:	16 97       	sbiw	r26, 0x06	; 6
    243c:	4d 2d       	mov	r20, r13
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	19 95       	eicall
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	bf 90       	pop	r11
    2452:	af 90       	pop	r10
    2454:	9f 90       	pop	r9
    2456:	8f 90       	pop	r8
    2458:	08 95       	ret

0000245a <udd_attach>:
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	8f b7       	in	r24, 0x3f	; 63
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	f8 94       	cli
    246c:	19 81       	ldd	r17, Y+1	; 0x01
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	d5 dc       	rcall	.-1622   	; 0x1e1c <udd_sleep_mode>
    2472:	ea ec       	ldi	r30, 0xCA	; 202
    2474:	f4 e0       	ldi	r31, 0x04	; 4
    2476:	80 e4       	ldi	r24, 0x40	; 64
    2478:	80 83       	st	Z, r24
    247a:	80 e2       	ldi	r24, 0x20	; 32
    247c:	80 83       	st	Z, r24
    247e:	e1 ec       	ldi	r30, 0xC1	; 193
    2480:	f4 e0       	ldi	r31, 0x04	; 4
    2482:	80 81       	ld	r24, Z
    2484:	81 60       	ori	r24, 0x01	; 1
    2486:	80 83       	st	Z, r24
    2488:	a9 ec       	ldi	r26, 0xC9	; 201
    248a:	b4 e0       	ldi	r27, 0x04	; 4
    248c:	8c 91       	ld	r24, X
    248e:	82 60       	ori	r24, 0x02	; 2
    2490:	8c 93       	st	X, r24
    2492:	e8 ec       	ldi	r30, 0xC8	; 200
    2494:	f4 e0       	ldi	r31, 0x04	; 4
    2496:	80 81       	ld	r24, Z
    2498:	80 64       	ori	r24, 0x40	; 64
    249a:	80 83       	st	Z, r24
    249c:	8c 91       	ld	r24, X
    249e:	81 60       	ori	r24, 0x01	; 1
    24a0:	8c 93       	st	X, r24
    24a2:	80 81       	ld	r24, Z
    24a4:	80 68       	ori	r24, 0x80	; 128
    24a6:	80 83       	st	Z, r24
    24a8:	1f bf       	out	0x3f, r17	; 63
    24aa:	0f 90       	pop	r0
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	08 95       	ret

000024b4 <udd_enable>:
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	1f 92       	push	r1
    24be:	1f 92       	push	r1
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	00 e6       	ldi	r16, 0x60	; 96
    24c6:	10 e0       	ldi	r17, 0x00	; 0
    24c8:	f8 01       	movw	r30, r16
    24ca:	10 82       	st	Z, r1
    24cc:	80 e3       	ldi	r24, 0x30	; 48
    24ce:	02 d5       	rcall	.+2564   	; 0x2ed4 <sysclk_enable_usb>
    24d0:	e0 ec       	ldi	r30, 0xC0	; 192
    24d2:	f4 e0       	ldi	r31, 0x04	; 4
    24d4:	80 81       	ld	r24, Z
    24d6:	80 64       	ori	r24, 0x40	; 64
    24d8:	80 83       	st	Z, r24
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	f8 01       	movw	r30, r16
    24de:	80 83       	st	Z, r24
    24e0:	8f b7       	in	r24, 0x3f	; 63
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	f8 94       	cli
    24e6:	1a 81       	ldd	r17, Y+2	; 0x02
    24e8:	ec ec       	ldi	r30, 0xCC	; 204
    24ea:	f4 e2       	ldi	r31, 0x24	; 36
    24ec:	15 86       	std	Z+13, r1	; 0x0d
    24ee:	15 8a       	std	Z+21, r1	; 0x15
    24f0:	15 8e       	std	Z+29, r1	; 0x1d
    24f2:	15 a2       	std	Z+37, r1	; 0x25
    24f4:	15 a6       	std	Z+45, r1	; 0x2d
    24f6:	15 aa       	std	Z+53, r1	; 0x35
    24f8:	e1 e6       	ldi	r30, 0x61	; 97
    24fa:	f4 e2       	ldi	r31, 0x24	; 36
    24fc:	80 81       	ld	r24, Z
    24fe:	8e 7f       	andi	r24, 0xFE	; 254
    2500:	80 83       	st	Z, r24
    2502:	ea e6       	ldi	r30, 0x6A	; 106
    2504:	f4 e2       	ldi	r31, 0x24	; 36
    2506:	80 81       	ld	r24, Z
    2508:	8e 7f       	andi	r24, 0xFE	; 254
    250a:	80 83       	st	Z, r24
    250c:	e3 e7       	ldi	r30, 0x73	; 115
    250e:	f4 e2       	ldi	r31, 0x24	; 36
    2510:	80 81       	ld	r24, Z
    2512:	8e 7f       	andi	r24, 0xFE	; 254
    2514:	80 83       	st	Z, r24
    2516:	ec e7       	ldi	r30, 0x7C	; 124
    2518:	f4 e2       	ldi	r31, 0x24	; 36
    251a:	80 81       	ld	r24, Z
    251c:	8e 7f       	andi	r24, 0xFE	; 254
    251e:	80 83       	st	Z, r24
    2520:	6a e1       	ldi	r22, 0x1A	; 26
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	26 d6       	rcall	.+3148   	; 0x3174 <nvm_read_byte>
    2528:	8f 3f       	cpi	r24, 0xFF	; 255
    252a:	19 f0       	breq	.+6      	; 0x2532 <udd_enable+0x7e>
    252c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <udd_enable+0x84>
    2532:	8f e1       	ldi	r24, 0x1F	; 31
    2534:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2538:	6b e1       	ldi	r22, 0x1B	; 27
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	1a d6       	rcall	.+3124   	; 0x3174 <nvm_read_byte>
    2540:	8f 3f       	cpi	r24, 0xFF	; 255
    2542:	19 f0       	breq	.+6      	; 0x254a <udd_enable+0x96>
    2544:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <udd_enable+0x9c>
    254a:	8f e1       	ldi	r24, 0x1F	; 31
    254c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2550:	e0 ec       	ldi	r30, 0xC0	; 192
    2552:	f4 e0       	ldi	r31, 0x04	; 4
    2554:	80 81       	ld	r24, Z
    2556:	82 60       	ori	r24, 0x02	; 2
    2558:	80 83       	st	Z, r24
    255a:	80 81       	ld	r24, Z
    255c:	80 68       	ori	r24, 0x80	; 128
    255e:	80 83       	st	Z, r24
    2560:	80 81       	ld	r24, Z
    2562:	80 61       	ori	r24, 0x10	; 16
    2564:	80 83       	st	Z, r24
    2566:	88 ed       	ldi	r24, 0xD8	; 216
    2568:	94 e2       	ldi	r25, 0x24	; 36
    256a:	86 83       	std	Z+6, r24	; 0x06
    256c:	97 83       	std	Z+7, r25	; 0x07
    256e:	80 81       	ld	r24, Z
    2570:	80 62       	ori	r24, 0x20	; 32
    2572:	80 83       	st	Z, r24
    2574:	8f ef       	ldi	r24, 0xFF	; 255
    2576:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    257a:	e8 ec       	ldi	r30, 0xC8	; 200
    257c:	f4 e0       	ldi	r31, 0x04	; 4
    257e:	80 81       	ld	r24, Z
    2580:	81 60       	ori	r24, 0x01	; 1
    2582:	80 83       	st	Z, r24
    2584:	10 92 0c 25 	sts	0x250C, r1	; 0x80250c <udd_b_idle>
    2588:	80 91 4b 27 	lds	r24, 0x274B	; 0x80274b <sleepmgr_locks+0x5>
    258c:	8f 3f       	cpi	r24, 0xFF	; 255
    258e:	09 f4       	brne	.+2      	; 0x2592 <udd_enable+0xde>
    2590:	ff cf       	rjmp	.-2      	; 0x2590 <udd_enable+0xdc>
    2592:	8f b7       	in	r24, 0x3f	; 63
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	f8 94       	cli
    2598:	99 81       	ldd	r25, Y+1	; 0x01
    259a:	e6 e4       	ldi	r30, 0x46	; 70
    259c:	f7 e2       	ldi	r31, 0x27	; 39
    259e:	85 81       	ldd	r24, Z+5	; 0x05
    25a0:	8f 5f       	subi	r24, 0xFF	; 255
    25a2:	85 83       	std	Z+5, r24	; 0x05
    25a4:	9f bf       	out	0x3f, r25	; 63
    25a6:	59 df       	rcall	.-334    	; 0x245a <udd_attach>
    25a8:	1f bf       	out	0x3f, r17	; 63
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	08 95       	ret

000025b8 <udd_is_high_speed>:
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	08 95       	ret

000025bc <udd_set_address>:
    25bc:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25c0:	08 95       	ret

000025c2 <udd_getaddress>:
    25c2:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25c6:	08 95       	ret

000025c8 <udd_get_frame_number>:
    25c8:	80 91 08 25 	lds	r24, 0x2508	; 0x802508 <udd_sram+0x3c>
    25cc:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <udd_sram+0x3d>
    25d0:	08 95       	ret

000025d2 <udd_get_micro_frame_number>:
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	08 95       	ret

000025d8 <udd_set_setup_payload>:
    25d8:	e6 e3       	ldi	r30, 0x36	; 54
    25da:	f7 e2       	ldi	r31, 0x27	; 39
    25dc:	80 87       	std	Z+8, r24	; 0x08
    25de:	91 87       	std	Z+9, r25	; 0x09
    25e0:	62 87       	std	Z+10, r22	; 0x0a
    25e2:	73 87       	std	Z+11, r23	; 0x0b
    25e4:	08 95       	ret

000025e6 <udd_ep_alloc>:
    25e6:	28 2f       	mov	r18, r24
    25e8:	2f 70       	andi	r18, 0x0F	; 15
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	22 0f       	add	r18, r18
    25ee:	33 1f       	adc	r19, r19
    25f0:	08 2e       	mov	r0, r24
    25f2:	00 0c       	add	r0, r0
    25f4:	99 0b       	sbc	r25, r25
    25f6:	88 27       	eor	r24, r24
    25f8:	99 0f       	add	r25, r25
    25fa:	88 1f       	adc	r24, r24
    25fc:	99 27       	eor	r25, r25
    25fe:	82 0f       	add	r24, r18
    2600:	93 1f       	adc	r25, r19
    2602:	fc 01       	movw	r30, r24
    2604:	ee 0f       	add	r30, r30
    2606:	ff 1f       	adc	r31, r31
    2608:	ee 0f       	add	r30, r30
    260a:	ff 1f       	adc	r31, r31
    260c:	ee 0f       	add	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	e4 53       	subi	r30, 0x34	; 52
    2612:	fb 4d       	sbci	r31, 0xDB	; 219
    2614:	25 85       	ldd	r18, Z+13	; 0x0d
    2616:	20 7c       	andi	r18, 0xC0	; 192
    2618:	09 f0       	breq	.+2      	; 0x261c <udd_ep_alloc+0x36>
    261a:	69 c0       	rjmp	.+210    	; 0x26ee <udd_ep_alloc+0x108>
    261c:	63 70       	andi	r22, 0x03	; 3
    261e:	61 30       	cpi	r22, 0x01	; 1
    2620:	11 f0       	breq	.+4      	; 0x2626 <udd_ep_alloc+0x40>
    2622:	18 f4       	brcc	.+6      	; 0x262a <udd_ep_alloc+0x44>
    2624:	04 c0       	rjmp	.+8      	; 0x262e <udd_ep_alloc+0x48>
    2626:	20 ec       	ldi	r18, 0xC0	; 192
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <udd_ep_alloc+0x4a>
    262a:	20 e8       	ldi	r18, 0x80	; 128
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <udd_ep_alloc+0x4a>
    262e:	20 e4       	ldi	r18, 0x40	; 64
    2630:	40 38       	cpi	r20, 0x80	; 128
    2632:	51 05       	cpc	r21, r1
    2634:	e9 f0       	breq	.+58     	; 0x2670 <udd_ep_alloc+0x8a>
    2636:	50 f4       	brcc	.+20     	; 0x264c <udd_ep_alloc+0x66>
    2638:	40 32       	cpi	r20, 0x20	; 32
    263a:	51 05       	cpc	r21, r1
    263c:	a9 f0       	breq	.+42     	; 0x2668 <udd_ep_alloc+0x82>
    263e:	40 34       	cpi	r20, 0x40	; 64
    2640:	51 05       	cpc	r21, r1
    2642:	a1 f0       	breq	.+40     	; 0x266c <udd_ep_alloc+0x86>
    2644:	40 31       	cpi	r20, 0x10	; 16
    2646:	51 05       	cpc	r21, r1
    2648:	d9 f4       	brne	.+54     	; 0x2680 <udd_ep_alloc+0x9a>
    264a:	0c c0       	rjmp	.+24     	; 0x2664 <udd_ep_alloc+0x7e>
    264c:	41 15       	cp	r20, r1
    264e:	32 e0       	ldi	r19, 0x02	; 2
    2650:	53 07       	cpc	r21, r19
    2652:	91 f0       	breq	.+36     	; 0x2678 <udd_ep_alloc+0x92>
    2654:	4f 3f       	cpi	r20, 0xFF	; 255
    2656:	33 e0       	ldi	r19, 0x03	; 3
    2658:	53 07       	cpc	r21, r19
    265a:	81 f0       	breq	.+32     	; 0x267c <udd_ep_alloc+0x96>
    265c:	41 15       	cp	r20, r1
    265e:	51 40       	sbci	r21, 0x01	; 1
    2660:	79 f4       	brne	.+30     	; 0x2680 <udd_ep_alloc+0x9a>
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <udd_ep_alloc+0x8e>
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0d c0       	rjmp	.+26     	; 0x2682 <udd_ep_alloc+0x9c>
    2668:	42 e0       	ldi	r20, 0x02	; 2
    266a:	0b c0       	rjmp	.+22     	; 0x2682 <udd_ep_alloc+0x9c>
    266c:	43 e0       	ldi	r20, 0x03	; 3
    266e:	09 c0       	rjmp	.+18     	; 0x2682 <udd_ep_alloc+0x9c>
    2670:	44 e0       	ldi	r20, 0x04	; 4
    2672:	07 c0       	rjmp	.+14     	; 0x2682 <udd_ep_alloc+0x9c>
    2674:	45 e0       	ldi	r20, 0x05	; 5
    2676:	05 c0       	rjmp	.+10     	; 0x2682 <udd_ep_alloc+0x9c>
    2678:	46 e0       	ldi	r20, 0x06	; 6
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <udd_ep_alloc+0x9c>
    267c:	47 e0       	ldi	r20, 0x07	; 7
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <udd_ep_alloc+0x9c>
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	fc 01       	movw	r30, r24
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	e4 53       	subi	r30, 0x34	; 52
    2692:	fb 4d       	sbci	r31, 0xDB	; 219
    2694:	15 86       	std	Z+13, r1	; 0x0d
    2696:	36 e0       	ldi	r19, 0x06	; 6
    2698:	34 87       	std	Z+12, r19	; 0x0c
    269a:	24 2b       	or	r18, r20
    269c:	25 87       	std	Z+13, r18	; 0x0d
    269e:	fc 01       	movw	r30, r24
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	e4 53       	subi	r30, 0x34	; 52
    26ae:	fb 4d       	sbci	r31, 0xDB	; 219
    26b0:	25 85       	ldd	r18, Z+13	; 0x0d
    26b2:	20 7c       	andi	r18, 0xC0	; 192
    26b4:	20 3c       	cpi	r18, 0xC0	; 192
    26b6:	69 f4       	brne	.+26     	; 0x26d2 <udd_ep_alloc+0xec>
    26b8:	fc 01       	movw	r30, r24
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	e4 53       	subi	r30, 0x34	; 52
    26c8:	fb 4d       	sbci	r31, 0xDB	; 219
    26ca:	25 85       	ldd	r18, Z+13	; 0x0d
    26cc:	27 70       	andi	r18, 0x07	; 7
    26ce:	27 30       	cpi	r18, 0x07	; 7
    26d0:	81 f0       	breq	.+32     	; 0x26f2 <udd_ep_alloc+0x10c>
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	fc 01       	movw	r30, r24
    26e0:	e4 53       	subi	r30, 0x34	; 52
    26e2:	fb 4d       	sbci	r31, 0xDB	; 219
    26e4:	85 85       	ldd	r24, Z+13	; 0x0d
    26e6:	80 62       	ori	r24, 0x20	; 32
    26e8:	85 87       	std	Z+13, r24	; 0x0d
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	08 95       	ret
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	08 95       	ret
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	08 95       	ret

000026f6 <udd_ep_is_halted>:
    26f6:	e8 2f       	mov	r30, r24
    26f8:	ef 70       	andi	r30, 0x0F	; 15
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	08 2e       	mov	r0, r24
    2702:	00 0c       	add	r0, r0
    2704:	99 0b       	sbc	r25, r25
    2706:	88 27       	eor	r24, r24
    2708:	99 0f       	add	r25, r25
    270a:	88 1f       	adc	r24, r24
    270c:	99 27       	eor	r25, r25
    270e:	e8 0f       	add	r30, r24
    2710:	f9 1f       	adc	r31, r25
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	e4 53       	subi	r30, 0x34	; 52
    2720:	fb 4d       	sbci	r31, 0xDB	; 219
    2722:	85 85       	ldd	r24, Z+13	; 0x0d
    2724:	82 fb       	bst	r24, 2
    2726:	88 27       	eor	r24, r24
    2728:	80 f9       	bld	r24, 0
    272a:	08 95       	ret

0000272c <udd_ep_clear_halt>:
    272c:	0f 93       	push	r16
    272e:	28 2f       	mov	r18, r24
    2730:	2f 70       	andi	r18, 0x0F	; 15
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	a9 01       	movw	r20, r18
    2736:	44 0f       	add	r20, r20
    2738:	55 1f       	adc	r21, r21
    273a:	28 2f       	mov	r18, r24
    273c:	08 2e       	mov	r0, r24
    273e:	00 0c       	add	r0, r0
    2740:	33 0b       	sbc	r19, r19
    2742:	22 27       	eor	r18, r18
    2744:	33 0f       	add	r19, r19
    2746:	22 1f       	adc	r18, r18
    2748:	33 27       	eor	r19, r19
    274a:	24 0f       	add	r18, r20
    274c:	35 1f       	adc	r19, r21
    274e:	a9 01       	movw	r20, r18
    2750:	44 0f       	add	r20, r20
    2752:	55 1f       	adc	r21, r21
    2754:	44 0f       	add	r20, r20
    2756:	55 1f       	adc	r21, r21
    2758:	44 0f       	add	r20, r20
    275a:	55 1f       	adc	r21, r21
    275c:	fa 01       	movw	r30, r20
    275e:	e8 52       	subi	r30, 0x28	; 40
    2760:	fb 4d       	sbci	r31, 0xDB	; 219
    2762:	01 e0       	ldi	r16, 0x01	; 1
    2764:	06 93       	lac	Z, r16
    2766:	fa 01       	movw	r30, r20
    2768:	e4 53       	subi	r30, 0x34	; 52
    276a:	fb 4d       	sbci	r31, 0xDB	; 219
    276c:	95 85       	ldd	r25, Z+13	; 0x0d
    276e:	92 ff       	sbrs	r25, 2
    2770:	11 c0       	rjmp	.+34     	; 0x2794 <udd_ep_clear_halt+0x68>
    2772:	fa 01       	movw	r30, r20
    2774:	e4 53       	subi	r30, 0x34	; 52
    2776:	fb 4d       	sbci	r31, 0xDB	; 219
    2778:	95 85       	ldd	r25, Z+13	; 0x0d
    277a:	9b 7f       	andi	r25, 0xFB	; 251
    277c:	95 87       	std	Z+13, r25	; 0x0d
    277e:	64 dc       	rcall	.-1848   	; 0x2048 <udd_ep_get_job>
    2780:	fc 01       	movw	r30, r24
    2782:	80 81       	ld	r24, Z
    2784:	80 ff       	sbrs	r24, 0
    2786:	06 c0       	rjmp	.+12     	; 0x2794 <udd_ep_clear_halt+0x68>
    2788:	8e 7f       	andi	r24, 0xFE	; 254
    278a:	80 83       	st	Z, r24
    278c:	07 80       	ldd	r0, Z+7	; 0x07
    278e:	f0 85       	ldd	r31, Z+8	; 0x08
    2790:	e0 2d       	mov	r30, r0
    2792:	19 95       	eicall
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	0f 91       	pop	r16
    2798:	08 95       	ret

0000279a <udd_ep_run>:
    279a:	5f 92       	push	r5
    279c:	6f 92       	push	r6
    279e:	7f 92       	push	r7
    27a0:	8f 92       	push	r8
    27a2:	9f 92       	push	r9
    27a4:	af 92       	push	r10
    27a6:	bf 92       	push	r11
    27a8:	cf 92       	push	r12
    27aa:	df 92       	push	r13
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	0f 93       	push	r16
    27b2:	1f 93       	push	r17
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	1f 92       	push	r1
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	78 2e       	mov	r7, r24
    27c0:	66 2e       	mov	r6, r22
    27c2:	4a 01       	movw	r8, r20
    27c4:	59 01       	movw	r10, r18
    27c6:	40 dc       	rcall	.-1920   	; 0x2048 <udd_ep_get_job>
    27c8:	6c 01       	movw	r12, r24
    27ca:	57 2c       	mov	r5, r7
    27cc:	55 1c       	adc	r5, r5
    27ce:	55 24       	eor	r5, r5
    27d0:	55 1c       	adc	r5, r5
    27d2:	87 2d       	mov	r24, r7
    27d4:	8f 70       	andi	r24, 0x0F	; 15
    27d6:	e8 2e       	mov	r14, r24
    27d8:	f1 2c       	mov	r15, r1
    27da:	ee 0c       	add	r14, r14
    27dc:	ff 1c       	adc	r15, r15
    27de:	e5 0c       	add	r14, r5
    27e0:	f1 1c       	adc	r15, r1
    27e2:	f7 01       	movw	r30, r14
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	e4 53       	subi	r30, 0x34	; 52
    27f2:	fb 4d       	sbci	r31, 0xDB	; 219
    27f4:	85 85       	ldd	r24, Z+13	; 0x0d
    27f6:	80 7c       	andi	r24, 0xC0	; 192
    27f8:	09 f4       	brne	.+2      	; 0x27fc <udd_ep_run+0x62>
    27fa:	81 c0       	rjmp	.+258    	; 0x28fe <udd_ep_run+0x164>
    27fc:	f7 01       	movw	r30, r14
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	e4 53       	subi	r30, 0x34	; 52
    280c:	fb 4d       	sbci	r31, 0xDB	; 219
    280e:	85 85       	ldd	r24, Z+13	; 0x0d
    2810:	80 7c       	andi	r24, 0xC0	; 192
    2812:	80 3c       	cpi	r24, 0xC0	; 192
    2814:	61 f0       	breq	.+24     	; 0x282e <udd_ep_run+0x94>
    2816:	f7 01       	movw	r30, r14
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	e4 53       	subi	r30, 0x34	; 52
    2826:	fb 4d       	sbci	r31, 0xDB	; 219
    2828:	85 85       	ldd	r24, Z+13	; 0x0d
    282a:	82 fd       	sbrc	r24, 2
    282c:	6a c0       	rjmp	.+212    	; 0x2902 <udd_ep_run+0x168>
    282e:	8f b7       	in	r24, 0x3f	; 63
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	f8 94       	cli
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	f6 01       	movw	r30, r12
    2838:	90 81       	ld	r25, Z
    283a:	90 ff       	sbrs	r25, 0
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <udd_ep_run+0xaa>
    283e:	8f bf       	out	0x3f, r24	; 63
    2840:	51 2c       	mov	r5, r1
    2842:	60 c0       	rjmp	.+192    	; 0x2904 <udd_ep_run+0x16a>
    2844:	f6 01       	movw	r30, r12
    2846:	90 81       	ld	r25, Z
    2848:	91 60       	ori	r25, 0x01	; 1
    284a:	90 83       	st	Z, r25
    284c:	8f bf       	out	0x3f, r24	; 63
    284e:	81 82       	std	Z+1, r8	; 0x01
    2850:	92 82       	std	Z+2, r9	; 0x02
    2852:	a3 82       	std	Z+3, r10	; 0x03
    2854:	b4 82       	std	Z+4, r11	; 0x04
    2856:	15 82       	std	Z+5, r1	; 0x05
    2858:	16 82       	std	Z+6, r1	; 0x06
    285a:	07 83       	std	Z+7, r16	; 0x07
    285c:	10 87       	std	Z+8, r17	; 0x08
    285e:	61 10       	cpse	r6, r1
    2860:	06 c0       	rjmp	.+12     	; 0x286e <udd_ep_run+0xd4>
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	a1 14       	cp	r10, r1
    2866:	b1 04       	cpc	r11, r1
    2868:	19 f0       	breq	.+6      	; 0x2870 <udd_ep_run+0xd6>
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <udd_ep_run+0xd6>
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	f6 01       	movw	r30, r12
    2872:	80 81       	ld	r24, Z
    2874:	90 fb       	bst	r25, 0
    2876:	81 f9       	bld	r24, 1
    2878:	8b 7f       	andi	r24, 0xFB	; 251
    287a:	80 83       	st	Z, r24
    287c:	55 20       	and	r5, r5
    287e:	61 f0       	breq	.+24     	; 0x2898 <udd_ep_run+0xfe>
    2880:	f7 01       	movw	r30, r14
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e4 53       	subi	r30, 0x34	; 52
    2890:	fb 4d       	sbci	r31, 0xDB	; 219
    2892:	12 8a       	std	Z+18, r1	; 0x12
    2894:	13 8a       	std	Z+19, r1	; 0x13
    2896:	2e c0       	rjmp	.+92     	; 0x28f4 <udd_ep_run+0x15a>
    2898:	f7 01       	movw	r30, r14
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	ee 0f       	add	r30, r30
    28a0:	ff 1f       	adc	r31, r31
    28a2:	ee 0f       	add	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	e4 53       	subi	r30, 0x34	; 52
    28a8:	fb 4d       	sbci	r31, 0xDB	; 219
    28aa:	85 85       	ldd	r24, Z+13	; 0x0d
    28ac:	80 7c       	andi	r24, 0xC0	; 192
    28ae:	80 3c       	cpi	r24, 0xC0	; 192
    28b0:	a1 f4       	brne	.+40     	; 0x28da <udd_ep_run+0x140>
    28b2:	c7 01       	movw	r24, r14
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 52       	subi	r24, 0x28	; 40
    28c2:	9b 4d       	sbci	r25, 0xDB	; 219
    28c4:	98 db       	rcall	.-2256   	; 0x1ff6 <udd_ep_get_size>
    28c6:	bc 01       	movw	r22, r24
    28c8:	c5 01       	movw	r24, r10
    28ca:	64 d4       	rcall	.+2248   	; 0x3194 <__udivmodhi4>
    28cc:	89 2b       	or	r24, r25
    28ce:	29 f0       	breq	.+10     	; 0x28da <udd_ep_run+0x140>
    28d0:	f6 01       	movw	r30, r12
    28d2:	80 81       	ld	r24, Z
    28d4:	8e 7f       	andi	r24, 0xFE	; 254
    28d6:	80 83       	st	Z, r24
    28d8:	15 c0       	rjmp	.+42     	; 0x2904 <udd_ep_run+0x16a>
    28da:	f7 01       	movw	r30, r14
    28dc:	ee 0f       	add	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	e4 53       	subi	r30, 0x34	; 52
    28ea:	fb 4d       	sbci	r31, 0xDB	; 219
    28ec:	16 86       	std	Z+14, r1	; 0x0e
    28ee:	17 86       	std	Z+15, r1	; 0x0f
    28f0:	12 8a       	std	Z+18, r1	; 0x12
    28f2:	13 8a       	std	Z+19, r1	; 0x13
    28f4:	87 2d       	mov	r24, r7
    28f6:	34 dc       	rcall	.-1944   	; 0x2160 <udd_ep_trans_complet>
    28f8:	55 24       	eor	r5, r5
    28fa:	53 94       	inc	r5
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <udd_ep_run+0x16a>
    28fe:	51 2c       	mov	r5, r1
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <udd_ep_run+0x16a>
    2902:	51 2c       	mov	r5, r1
    2904:	85 2d       	mov	r24, r5
    2906:	0f 90       	pop	r0
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
    291a:	af 90       	pop	r10
    291c:	9f 90       	pop	r9
    291e:	8f 90       	pop	r8
    2920:	7f 90       	pop	r7
    2922:	6f 90       	pop	r6
    2924:	5f 90       	pop	r5
    2926:	08 95       	ret

00002928 <udd_ep_abort>:
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	18 2f       	mov	r17, r24
    2934:	f8 2e       	mov	r15, r24
    2936:	ff 1c       	adc	r15, r15
    2938:	ff 24       	eor	r15, r15
    293a:	ff 1c       	adc	r15, r15
    293c:	c8 2f       	mov	r28, r24
    293e:	cf 70       	andi	r28, 0x0F	; 15
    2940:	d0 e0       	ldi	r29, 0x00	; 0
    2942:	cc 0f       	add	r28, r28
    2944:	dd 1f       	adc	r29, r29
    2946:	cf 0d       	add	r28, r15
    2948:	d1 1d       	adc	r29, r1
    294a:	7e db       	rcall	.-2308   	; 0x2048 <udd_ep_get_job>
    294c:	dc 01       	movw	r26, r24
    294e:	fe 01       	movw	r30, r28
    2950:	ee 0f       	add	r30, r30
    2952:	ff 1f       	adc	r31, r31
    2954:	ee 0f       	add	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	ee 0f       	add	r30, r30
    295a:	ff 1f       	adc	r31, r31
    295c:	e8 52       	subi	r30, 0x28	; 40
    295e:	fb 4d       	sbci	r31, 0xDB	; 219
    2960:	02 e0       	ldi	r16, 0x02	; 2
    2962:	05 93       	las	Z, r16
    2964:	8c 91       	ld	r24, X
    2966:	80 ff       	sbrs	r24, 0
    2968:	22 c0       	rjmp	.+68     	; 0x29ae <udd_ep_abort+0x86>
    296a:	8e 7f       	andi	r24, 0xFE	; 254
    296c:	8c 93       	st	X, r24
    296e:	17 96       	adiw	r26, 0x07	; 7
    2970:	ed 91       	ld	r30, X+
    2972:	fc 91       	ld	r31, X
    2974:	18 97       	sbiw	r26, 0x08	; 8
    2976:	30 97       	sbiw	r30, 0x00	; 0
    2978:	d1 f0       	breq	.+52     	; 0x29ae <udd_ep_abort+0x86>
    297a:	ff 20       	and	r15, r15
    297c:	59 f0       	breq	.+22     	; 0x2994 <udd_ep_abort+0x6c>
    297e:	cc 0f       	add	r28, r28
    2980:	dd 1f       	adc	r29, r29
    2982:	cc 0f       	add	r28, r28
    2984:	dd 1f       	adc	r29, r29
    2986:	cc 0f       	add	r28, r28
    2988:	dd 1f       	adc	r29, r29
    298a:	c4 53       	subi	r28, 0x34	; 52
    298c:	db 4d       	sbci	r29, 0xDB	; 219
    298e:	6a 89       	ldd	r22, Y+18	; 0x12
    2990:	7b 89       	ldd	r23, Y+19	; 0x13
    2992:	0a c0       	rjmp	.+20     	; 0x29a8 <udd_ep_abort+0x80>
    2994:	cc 0f       	add	r28, r28
    2996:	dd 1f       	adc	r29, r29
    2998:	cc 0f       	add	r28, r28
    299a:	dd 1f       	adc	r29, r29
    299c:	cc 0f       	add	r28, r28
    299e:	dd 1f       	adc	r29, r29
    29a0:	c4 53       	subi	r28, 0x34	; 52
    29a2:	db 4d       	sbci	r29, 0xDB	; 219
    29a4:	6e 85       	ldd	r22, Y+14	; 0x0e
    29a6:	7f 85       	ldd	r23, Y+15	; 0x0f
    29a8:	41 2f       	mov	r20, r17
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	19 95       	eicall
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	08 95       	ret

000029ba <udd_ep_free>:
    29ba:	cf 93       	push	r28
    29bc:	c8 2f       	mov	r28, r24
    29be:	b4 df       	rcall	.-152    	; 0x2928 <udd_ep_abort>
    29c0:	ec 2f       	mov	r30, r28
    29c2:	ef 70       	andi	r30, 0x0F	; 15
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	8c 2f       	mov	r24, r28
    29cc:	cc 0f       	add	r28, r28
    29ce:	99 0b       	sbc	r25, r25
    29d0:	88 27       	eor	r24, r24
    29d2:	99 0f       	add	r25, r25
    29d4:	88 1f       	adc	r24, r24
    29d6:	99 27       	eor	r25, r25
    29d8:	e8 0f       	add	r30, r24
    29da:	f9 1f       	adc	r31, r25
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	e4 53       	subi	r30, 0x34	; 52
    29ea:	fb 4d       	sbci	r31, 0xDB	; 219
    29ec:	15 86       	std	Z+13, r1	; 0x0d
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <udd_ep_set_halt>:
    29f2:	e8 2f       	mov	r30, r24
    29f4:	ef 70       	andi	r30, 0x0F	; 15
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	28 2f       	mov	r18, r24
    29fe:	08 2e       	mov	r0, r24
    2a00:	00 0c       	add	r0, r0
    2a02:	33 0b       	sbc	r19, r19
    2a04:	22 27       	eor	r18, r18
    2a06:	33 0f       	add	r19, r19
    2a08:	22 1f       	adc	r18, r18
    2a0a:	33 27       	eor	r19, r19
    2a0c:	e2 0f       	add	r30, r18
    2a0e:	f3 1f       	adc	r31, r19
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	ee 0f       	add	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	e4 53       	subi	r30, 0x34	; 52
    2a1e:	fb 4d       	sbci	r31, 0xDB	; 219
    2a20:	95 85       	ldd	r25, Z+13	; 0x0d
    2a22:	94 60       	ori	r25, 0x04	; 4
    2a24:	95 87       	std	Z+13, r25	; 0x0d
    2a26:	80 df       	rcall	.-256    	; 0x2928 <udd_ep_abort>
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	08 95       	ret

00002a2c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	08 b6       	in	r0, 0x38	; 56
    2a38:	0f 92       	push	r0
    2a3a:	18 be       	out	0x38, r1	; 56
    2a3c:	09 b6       	in	r0, 0x39	; 57
    2a3e:	0f 92       	push	r0
    2a40:	19 be       	out	0x39, r1	; 57
    2a42:	0b b6       	in	r0, 0x3b	; 59
    2a44:	0f 92       	push	r0
    2a46:	1b be       	out	0x3b, r1	; 59
    2a48:	0f 93       	push	r16
    2a4a:	2f 93       	push	r18
    2a4c:	3f 93       	push	r19
    2a4e:	4f 93       	push	r20
    2a50:	5f 93       	push	r21
    2a52:	6f 93       	push	r22
    2a54:	7f 93       	push	r23
    2a56:	8f 93       	push	r24
    2a58:	9f 93       	push	r25
    2a5a:	af 93       	push	r26
    2a5c:	bf 93       	push	r27
    2a5e:	ef 93       	push	r30
    2a60:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a62:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a66:	88 23       	and	r24, r24
    2a68:	34 f4       	brge	.+12     	; 0x2a76 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    2a6a:	80 e8       	ldi	r24, 0x80	; 128
    2a6c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a70:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2a74:	86 c0       	rjmp	.+268    	; 0x2b82 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a76:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a7a:	82 ff       	sbrs	r24, 2
    2a7c:	20 c0       	rjmp	.+64     	; 0x2abe <__vector_125+0x92>
		udd_ack_underflow_event();
    2a7e:	84 e0       	ldi	r24, 0x04	; 4
    2a80:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2a84:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <udd_sram+0x14>
    2a88:	86 ff       	sbrs	r24, 6
    2a8a:	7b c0       	rjmp	.+246    	; 0x2b82 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a8c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a90:	81 fd       	sbrc	r24, 1
    2a92:	77 c0       	rjmp	.+238    	; 0x2b82 <__vector_125+0x156>
    2a94:	f4 da       	rcall	.-2584   	; 0x207e <udd_ctrl_interrupt_tc_setup>
    2a96:	81 11       	cpse	r24, r1
    2a98:	74 c0       	rjmp	.+232    	; 0x2b82 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2a9a:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <udd_ep_control_state>
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	11 f4       	brne	.+4      	; 0x2aa6 <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2aa2:	27 da       	rcall	.-2994   	; 0x1ef2 <udd_ctrl_send_zlp_in>
    2aa4:	6e c0       	rjmp	.+220    	; 0x2b82 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2aa6:	84 30       	cpi	r24, 0x04	; 4
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <__vector_125+0x80>
    2aaa:	6b c0       	rjmp	.+214    	; 0x2b82 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2aac:	e1 ee       	ldi	r30, 0xE1	; 225
    2aae:	f4 e2       	ldi	r31, 0x24	; 36
    2ab0:	04 e0       	ldi	r16, 0x04	; 4
    2ab2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ab4:	e9 ed       	ldi	r30, 0xD9	; 217
    2ab6:	f4 e2       	ldi	r31, 0x24	; 36
    2ab8:	04 e0       	ldi	r16, 0x04	; 4
    2aba:	05 93       	las	Z, r16
    2abc:	62 c0       	rjmp	.+196    	; 0x2b82 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2abe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ac2:	81 ff       	sbrs	r24, 1
    2ac4:	59 c0       	rjmp	.+178    	; 0x2b78 <__vector_125+0x14c>
		udd_ack_overflow_event();
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2acc:	80 91 d8 24 	lds	r24, 0x24D8	; 0x8024d8 <udd_sram+0xc>
    2ad0:	86 ff       	sbrs	r24, 6
    2ad2:	57 c0       	rjmp	.+174    	; 0x2b82 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2ad4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ad8:	81 fd       	sbrc	r24, 1
    2ada:	53 c0       	rjmp	.+166    	; 0x2b82 <__vector_125+0x156>
    2adc:	d0 da       	rcall	.-2656   	; 0x207e <udd_ctrl_interrupt_tc_setup>
    2ade:	81 11       	cpse	r24, r1
    2ae0:	50 c0       	rjmp	.+160    	; 0x2b82 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2ae2:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <udd_ep_control_state>
    2ae6:	82 30       	cpi	r24, 0x02	; 2
    2ae8:	41 f4       	brne	.+16     	; 0x2afa <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2aea:	84 e0       	ldi	r24, 0x04	; 4
    2aec:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2af0:	e8 ed       	ldi	r30, 0xD8	; 216
    2af2:	f4 e2       	ldi	r31, 0x24	; 36
    2af4:	02 e0       	ldi	r16, 0x02	; 2
    2af6:	06 93       	lac	Z, r16
    2af8:	44 c0       	rjmp	.+136    	; 0x2b82 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2afa:	83 30       	cpi	r24, 0x03	; 3
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <__vector_125+0xd4>
    2afe:	41 c0       	rjmp	.+130    	; 0x2b82 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b00:	e1 ee       	ldi	r30, 0xE1	; 225
    2b02:	f4 e2       	ldi	r31, 0x24	; 36
    2b04:	04 e0       	ldi	r16, 0x04	; 4
    2b06:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b08:	e9 ed       	ldi	r30, 0xD9	; 217
    2b0a:	f4 e2       	ldi	r31, 0x24	; 36
    2b0c:	04 e0       	ldi	r16, 0x04	; 4
    2b0e:	05 93       	las	Z, r16
    2b10:	38 c0       	rjmp	.+112    	; 0x2b82 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b12:	80 e1       	ldi	r24, 0x10	; 16
    2b14:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	06 df       	rcall	.-500    	; 0x2928 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b1c:	81 e8       	ldi	r24, 0x81	; 129
    2b1e:	04 df       	rcall	.-504    	; 0x2928 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	02 df       	rcall	.-508    	; 0x2928 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b24:	82 e8       	ldi	r24, 0x82	; 130
    2b26:	00 df       	rcall	.-512    	; 0x2928 <udd_ep_abort>
		}
#endif
		udc_reset();
    2b28:	0e 94 35 0c 	call	0x186a	; 0x186a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b2c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b30:	ec ec       	ldi	r30, 0xCC	; 204
    2b32:	f4 e2       	ldi	r31, 0x24	; 36
    2b34:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2b36:	96 e0       	ldi	r25, 0x06	; 6
    2b38:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b3a:	83 e4       	ldi	r24, 0x43	; 67
    2b3c:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b3e:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2b40:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b42:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b44:	85 e8       	ldi	r24, 0x85	; 133
    2b46:	94 e2       	ldi	r25, 0x24	; 36
    2b48:	80 8b       	std	Z+16, r24	; 0x10
    2b4a:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    2b4c:	9f d9       	rcall	.-3266   	; 0x1e8c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2b4e:	19 c0       	rjmp	.+50     	; 0x2b82 <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    2b50:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b54:	86 ff       	sbrs	r24, 6
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <__vector_125+0x138>
		udd_ack_suspend_event();
    2b58:	80 e4       	ldi	r24, 0x40	; 64
    2b5a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	5d d9       	rcall	.-3398   	; 0x1e1c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    2b64:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b68:	85 ff       	sbrs	r24, 5
    2b6a:	0b c0       	rjmp	.+22     	; 0x2b82 <__vector_125+0x156>
		udd_ack_resume_event();
    2b6c:	80 e2       	ldi	r24, 0x20	; 32
    2b6e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	53 d9       	rcall	.-3418   	; 0x1e1c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2b76:	05 c0       	rjmp	.+10     	; 0x2b82 <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2b78:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b7c:	84 fd       	sbrc	r24, 4
    2b7e:	c9 cf       	rjmp	.-110    	; 0x2b12 <__vector_125+0xe6>
    2b80:	e7 cf       	rjmp	.-50     	; 0x2b50 <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2b82:	ff 91       	pop	r31
    2b84:	ef 91       	pop	r30
    2b86:	bf 91       	pop	r27
    2b88:	af 91       	pop	r26
    2b8a:	9f 91       	pop	r25
    2b8c:	8f 91       	pop	r24
    2b8e:	7f 91       	pop	r23
    2b90:	6f 91       	pop	r22
    2b92:	5f 91       	pop	r21
    2b94:	4f 91       	pop	r20
    2b96:	3f 91       	pop	r19
    2b98:	2f 91       	pop	r18
    2b9a:	0f 91       	pop	r16
    2b9c:	0f 90       	pop	r0
    2b9e:	0b be       	out	0x3b, r0	; 59
    2ba0:	0f 90       	pop	r0
    2ba2:	09 be       	out	0x39, r0	; 57
    2ba4:	0f 90       	pop	r0
    2ba6:	08 be       	out	0x38, r0	; 56
    2ba8:	0f 90       	pop	r0
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	0f 90       	pop	r0
    2bae:	1f 90       	pop	r1
    2bb0:	18 95       	reti

00002bb2 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2bb2:	1f 92       	push	r1
    2bb4:	0f 92       	push	r0
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	0f 92       	push	r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	08 b6       	in	r0, 0x38	; 56
    2bbe:	0f 92       	push	r0
    2bc0:	18 be       	out	0x38, r1	; 56
    2bc2:	09 b6       	in	r0, 0x39	; 57
    2bc4:	0f 92       	push	r0
    2bc6:	19 be       	out	0x39, r1	; 57
    2bc8:	0a b6       	in	r0, 0x3a	; 58
    2bca:	0f 92       	push	r0
    2bcc:	1a be       	out	0x3a, r1	; 58
    2bce:	0b b6       	in	r0, 0x3b	; 59
    2bd0:	0f 92       	push	r0
    2bd2:	1b be       	out	0x3b, r1	; 59
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	ef 93       	push	r30
    2bf2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2bf4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bf8:	81 fd       	sbrc	r24, 1
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2bfc:	40 da       	rcall	.-2944   	; 0x207e <udd_ctrl_interrupt_tc_setup>
    2bfe:	81 11       	cpse	r24, r1
    2c00:	c3 c0       	rjmp	.+390    	; 0x2d88 <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c08:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2c0c:	81 95       	neg	r24
    2c0e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2c10:	e8 ed       	ldi	r30, 0xD8	; 216
    2c12:	f4 e2       	ldi	r31, 0x24	; 36
    2c14:	e8 1b       	sub	r30, r24
    2c16:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c18:	20 81       	ld	r18, Z
    2c1a:	31 81       	ldd	r19, Z+1	; 0x01
    2c1c:	28 5d       	subi	r18, 0xD8	; 216
    2c1e:	34 42       	sbci	r19, 0x24	; 36
    2c20:	36 95       	lsr	r19
    2c22:	27 95       	ror	r18
    2c24:	36 95       	lsr	r19
    2c26:	27 95       	ror	r18
    2c28:	36 95       	lsr	r19
    2c2a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c2c:	82 2f       	mov	r24, r18
    2c2e:	86 95       	lsr	r24
    2c30:	20 fd       	sbrc	r18, 0
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <__vector_126+0x86>
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	01 c0       	rjmp	.+2      	; 0x2c3a <__vector_126+0x88>
    2c38:	90 e8       	ldi	r25, 0x80	; 128
    2c3a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c3c:	e8 2f       	mov	r30, r24
    2c3e:	ef 70       	andi	r30, 0x0F	; 15
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2c46:	28 2f       	mov	r18, r24
    2c48:	08 2e       	mov	r0, r24
    2c4a:	00 0c       	add	r0, r0
    2c4c:	33 0b       	sbc	r19, r19
    2c4e:	22 27       	eor	r18, r18
    2c50:	33 0f       	add	r19, r19
    2c52:	22 1f       	adc	r18, r18
    2c54:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c56:	e2 0f       	add	r30, r18
    2c58:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c5a:	df 01       	movw	r26, r30
    2c5c:	aa 0f       	add	r26, r26
    2c5e:	bb 1f       	adc	r27, r27
    2c60:	aa 0f       	add	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	aa 0f       	add	r26, r26
    2c66:	bb 1f       	adc	r27, r27
    2c68:	a4 53       	subi	r26, 0x34	; 52
    2c6a:	bb 4d       	sbci	r27, 0xDB	; 219
    2c6c:	1c 96       	adiw	r26, 0x0c	; 12
    2c6e:	9c 91       	ld	r25, X
    2c70:	95 ff       	sbrs	r25, 5
    2c72:	8a c0       	rjmp	.+276    	; 0x2d88 <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c74:	ee 0f       	add	r30, r30
    2c76:	ff 1f       	adc	r31, r31
    2c78:	ee 0f       	add	r30, r30
    2c7a:	ff 1f       	adc	r31, r31
    2c7c:	ee 0f       	add	r30, r30
    2c7e:	ff 1f       	adc	r31, r31
    2c80:	e8 52       	subi	r30, 0x28	; 40
    2c82:	fb 4d       	sbci	r31, 0xDB	; 219
    2c84:	00 e2       	ldi	r16, 0x20	; 32
    2c86:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2c88:	81 11       	cpse	r24, r1
    2c8a:	79 c0       	rjmp	.+242    	; 0x2d7e <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c8c:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <udd_ep_control_state>
    2c90:	84 30       	cpi	r24, 0x04	; 4
    2c92:	19 f4       	brne	.+6      	; 0x2c9a <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2c94:	3c d9       	rcall	.-3464   	; 0x1f0e <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c96:	fa d8       	rcall	.-3596   	; 0x1e8c <udd_ctrl_init>
    2c98:	77 c0       	rjmp	.+238    	; 0x2d88 <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c9a:	00 91 da 24 	lds	r16, 0x24DA	; 0x8024da <udd_sram+0xe>
    2c9e:	10 91 db 24 	lds	r17, 0x24DB	; 0x8024db <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2ca2:	80 91 40 27 	lds	r24, 0x2740	; 0x802740 <udd_g_ctrlreq+0xa>
    2ca6:	90 91 41 27 	lds	r25, 0x2741	; 0x802741 <udd_g_ctrlreq+0xb>
    2caa:	c0 91 c5 24 	lds	r28, 0x24C5	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    2cae:	d0 91 c6 24 	lds	r29, 0x24C6	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    2cb2:	9e 01       	movw	r18, r28
    2cb4:	20 0f       	add	r18, r16
    2cb6:	31 1f       	adc	r19, r17
    2cb8:	82 17       	cp	r24, r18
    2cba:	93 07       	cpc	r25, r19
    2cbc:	18 f4       	brcc	.+6      	; 0x2cc4 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cbe:	8c 01       	movw	r16, r24
    2cc0:	0c 1b       	sub	r16, r28
    2cc2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2cc4:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <udd_g_ctrlreq+0x8>
    2cc8:	90 91 3f 27 	lds	r25, 0x273F	; 0x80273f <udd_g_ctrlreq+0x9>
    2ccc:	a8 01       	movw	r20, r16
    2cce:	65 e8       	ldi	r22, 0x85	; 133
    2cd0:	74 e2       	ldi	r23, 0x24	; 36
    2cd2:	8c 0f       	add	r24, r28
    2cd4:	9d 1f       	adc	r25, r29
    2cd6:	7b d2       	rcall	.+1270   	; 0x31ce <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2cd8:	c0 0f       	add	r28, r16
    2cda:	d1 1f       	adc	r29, r17
    2cdc:	c0 93 c5 24 	sts	0x24C5, r28	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    2ce0:	d0 93 c6 24 	sts	0x24C6, r29	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2ce4:	00 34       	cpi	r16, 0x40	; 64
    2ce6:	11 05       	cpc	r17, r1
    2ce8:	69 f4       	brne	.+26     	; 0x2d04 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2cea:	80 91 c7 24 	lds	r24, 0x24C7	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    2cee:	90 91 c8 24 	lds	r25, 0x24C8	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2cf2:	8c 0f       	add	r24, r28
    2cf4:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2cf6:	20 91 3c 27 	lds	r18, 0x273C	; 0x80273c <udd_g_ctrlreq+0x6>
    2cfa:	30 91 3d 27 	lds	r19, 0x273D	; 0x80273d <udd_g_ctrlreq+0x7>
    2cfe:	82 17       	cp	r24, r18
    2d00:	93 07       	cpc	r25, r19
    2d02:	80 f0       	brcs	.+32     	; 0x2d24 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2d04:	e6 e3       	ldi	r30, 0x36	; 54
    2d06:	f7 e2       	ldi	r31, 0x27	; 39
    2d08:	c2 87       	std	Z+10, r28	; 0x0a
    2d0a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d0c:	06 84       	ldd	r0, Z+14	; 0x0e
    2d0e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d10:	e0 2d       	mov	r30, r0
    2d12:	30 97       	sbiw	r30, 0x00	; 0
    2d14:	29 f0       	breq	.+10     	; 0x2d20 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2d16:	19 95       	eicall
    2d18:	81 11       	cpse	r24, r1
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    2d1c:	dc d8       	rcall	.-3656   	; 0x1ed6 <udd_ctrl_stall_data>
    2d1e:	34 c0       	rjmp	.+104    	; 0x2d88 <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d20:	e8 d8       	rcall	.-3632   	; 0x1ef2 <udd_ctrl_send_zlp_in>
    2d22:	32 c0       	rjmp	.+100    	; 0x2d88 <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d24:	80 91 40 27 	lds	r24, 0x2740	; 0x802740 <udd_g_ctrlreq+0xa>
    2d28:	90 91 41 27 	lds	r25, 0x2741	; 0x802741 <udd_g_ctrlreq+0xb>
    2d2c:	c8 17       	cp	r28, r24
    2d2e:	d9 07       	cpc	r29, r25
    2d30:	f9 f4       	brne	.+62     	; 0x2d70 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d32:	e0 91 44 27 	lds	r30, 0x2744	; 0x802744 <udd_g_ctrlreq+0xe>
    2d36:	f0 91 45 27 	lds	r31, 0x2745	; 0x802745 <udd_g_ctrlreq+0xf>
    2d3a:	30 97       	sbiw	r30, 0x00	; 0
    2d3c:	11 f4       	brne	.+4      	; 0x2d42 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d3e:	cb d8       	rcall	.-3690   	; 0x1ed6 <udd_ctrl_stall_data>
    2d40:	23 c0       	rjmp	.+70     	; 0x2d88 <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2d42:	19 95       	eicall
    2d44:	81 11       	cpse	r24, r1
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2d48:	c6 d8       	rcall	.-3700   	; 0x1ed6 <udd_ctrl_stall_data>
    2d4a:	1e c0       	rjmp	.+60     	; 0x2d88 <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d4c:	20 91 c7 24 	lds	r18, 0x24C7	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    2d50:	30 91 c8 24 	lds	r19, 0x24C8	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d54:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    2d58:	90 91 c6 24 	lds	r25, 0x24C6	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
    2d5c:	82 0f       	add	r24, r18
    2d5e:	93 1f       	adc	r25, r19
    2d60:	80 93 c7 24 	sts	0x24C7, r24	; 0x8024c7 <udd_ctrl_prev_payload_nb_trans>
    2d64:	90 93 c8 24 	sts	0x24C8, r25	; 0x8024c8 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2d68:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <udd_ctrl_payload_nb_trans>
    2d6c:	10 92 c6 24 	sts	0x24C6, r1	; 0x8024c6 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d70:	e8 ed       	ldi	r30, 0xD8	; 216
    2d72:	f4 e2       	ldi	r31, 0x24	; 36
    2d74:	02 e0       	ldi	r16, 0x02	; 2
    2d76:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2d78:	00 e2       	ldi	r16, 0x20	; 32
    2d7a:	06 93       	lac	Z, r16
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d7e:	80 38       	cpi	r24, 0x80	; 128
    2d80:	11 f4       	brne	.+4      	; 0x2d86 <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    2d82:	cd d8       	rcall	.-3686   	; 0x1f1e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d84:	01 c0       	rjmp	.+2      	; 0x2d88 <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d86:	ec d9       	rcall	.-3112   	; 0x2160 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d88:	ff 91       	pop	r31
    2d8a:	ef 91       	pop	r30
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	bf 91       	pop	r27
    2d92:	af 91       	pop	r26
    2d94:	9f 91       	pop	r25
    2d96:	8f 91       	pop	r24
    2d98:	7f 91       	pop	r23
    2d9a:	6f 91       	pop	r22
    2d9c:	5f 91       	pop	r21
    2d9e:	4f 91       	pop	r20
    2da0:	3f 91       	pop	r19
    2da2:	2f 91       	pop	r18
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	0f 90       	pop	r0
    2daa:	0b be       	out	0x3b, r0	; 59
    2dac:	0f 90       	pop	r0
    2dae:	0a be       	out	0x3a, r0	; 58
    2db0:	0f 90       	pop	r0
    2db2:	09 be       	out	0x39, r0	; 57
    2db4:	0f 90       	pop	r0
    2db6:	08 be       	out	0x38, r0	; 56
    2db8:	0f 90       	pop	r0
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	0f 90       	pop	r0
    2dbe:	1f 90       	pop	r1
    2dc0:	18 95       	reti

00002dc2 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	27 97       	sbiw	r28, 0x07	; 7
    2dd0:	cd bf       	out	0x3d, r28	; 61
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	8f ef       	ldi	r24, 0xFF	; 255
    2dd6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2dda:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2dde:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2de2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2de6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2dea:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2dee:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    2df2:	6c e1       	ldi	r22, 0x1C	; 28
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	bd d1       	rcall	.+890    	; 0x3174 <nvm_read_byte>
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
    2dfc:	6d e1       	ldi	r22, 0x1D	; 29
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	b8 d1       	rcall	.+880    	; 0x3174 <nvm_read_byte>
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	21 f4       	brne	.+8      	; 0x2e16 <sysclk_init+0x54>
    2e0e:	80 e4       	ldi	r24, 0x40	; 64
    2e10:	93 e2       	ldi	r25, 0x23	; 35
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	9a 83       	std	Y+2, r25	; 0x02
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	e0 e6       	ldi	r30, 0x60	; 96
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	82 83       	std	Z+2, r24	; 0x02
    2e24:	8c 81       	ldd	r24, Y+4	; 0x04
    2e26:	83 83       	std	Z+3, r24	; 0x03
    2e28:	8f b7       	in	r24, 0x3f	; 63
    2e2a:	8f 83       	std	Y+7, r24	; 0x07
    2e2c:	f8 94       	cli
    2e2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e30:	e0 e5       	ldi	r30, 0x50	; 80
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	82 60       	ori	r24, 0x02	; 2
    2e38:	80 83       	st	Z, r24
    2e3a:	9f bf       	out	0x3f, r25	; 63
    2e3c:	81 81       	ldd	r24, Z+1	; 0x01
    2e3e:	81 ff       	sbrs	r24, 1
    2e40:	fd cf       	rjmp	.-6      	; 0x2e3c <sysclk_init+0x7a>
    2e42:	8f b7       	in	r24, 0x3f	; 63
    2e44:	8d 83       	std	Y+5, r24	; 0x05
    2e46:	f8 94       	cli
    2e48:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4a:	00 e5       	ldi	r16, 0x50	; 80
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	d8 01       	movw	r26, r16
    2e50:	16 96       	adiw	r26, 0x06	; 6
    2e52:	8c 91       	ld	r24, X
    2e54:	16 97       	sbiw	r26, 0x06	; 6
    2e56:	89 7f       	andi	r24, 0xF9	; 249
    2e58:	16 96       	adiw	r26, 0x06	; 6
    2e5a:	8c 93       	st	X, r24
    2e5c:	16 97       	sbiw	r26, 0x06	; 6
    2e5e:	e0 e6       	ldi	r30, 0x60	; 96
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 e8       	ldi	r24, 0x80	; 128
    2e64:	85 83       	std	Z+5, r24	; 0x05
    2e66:	8b eb       	ldi	r24, 0xBB	; 187
    2e68:	86 83       	std	Z+6, r24	; 0x06
    2e6a:	16 96       	adiw	r26, 0x06	; 6
    2e6c:	8c 91       	ld	r24, X
    2e6e:	16 97       	sbiw	r26, 0x06	; 6
    2e70:	84 60       	ori	r24, 0x04	; 4
    2e72:	16 96       	adiw	r26, 0x06	; 6
    2e74:	8c 93       	st	X, r24
    2e76:	80 81       	ld	r24, Z
    2e78:	81 60       	ori	r24, 0x01	; 1
    2e7a:	80 83       	st	Z, r24
    2e7c:	9f bf       	out	0x3f, r25	; 63
    2e7e:	61 e0       	ldi	r22, 0x01	; 1
    2e80:	80 e4       	ldi	r24, 0x40	; 64
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	81 d1       	rcall	.+770    	; 0x3188 <ccp_write_io>
    2e86:	8f b7       	in	r24, 0x3f	; 63
    2e88:	8e 83       	std	Y+6, r24	; 0x06
    2e8a:	f8 94       	cli
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	f8 01       	movw	r30, r16
    2e90:	80 81       	ld	r24, Z
    2e92:	8e 7f       	andi	r24, 0xFE	; 254
    2e94:	80 83       	st	Z, r24
    2e96:	9f bf       	out	0x3f, r25	; 63
    2e98:	27 96       	adiw	r28, 0x07	; 7
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	08 95       	ret

00002ea8 <sysclk_enable_module>:
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	1f 92       	push	r1
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9f b7       	in	r25, 0x3f	; 63
    2eb4:	99 83       	std	Y+1, r25	; 0x01
    2eb6:	f8 94       	cli
    2eb8:	99 81       	ldd	r25, Y+1	; 0x01
    2eba:	e8 2f       	mov	r30, r24
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	e0 59       	subi	r30, 0x90	; 144
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 95       	com	r22
    2ec4:	80 81       	ld	r24, Z
    2ec6:	68 23       	and	r22, r24
    2ec8:	60 83       	st	Z, r22
    2eca:	9f bf       	out	0x3f, r25	; 63
    2ecc:	0f 90       	pop	r0
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	1f 92       	push	r1
    2eda:	1f 92       	push	r1
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2ee0:	86 30       	cpi	r24, 0x06	; 6
    2ee2:	11 f0       	breq	.+4      	; 0x2ee8 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2ee8:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2eea:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2eee:	81 fd       	sbrc	r24, 1
    2ef0:	2a c0       	rjmp	.+84     	; 0x2f46 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ef2:	8f b7       	in	r24, 0x3f	; 63
    2ef4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2ef6:	f8 94       	cli
	return flags;
    2ef8:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2efa:	e0 e5       	ldi	r30, 0x50	; 80
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	82 60       	ori	r24, 0x02	; 2
    2f02:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f04:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2f06:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2f08:	81 ff       	sbrs	r24, 1
    2f0a:	fd cf       	rjmp	.-6      	; 0x2f06 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f0c:	8f b7       	in	r24, 0x3f	; 63
    2f0e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f10:	f8 94       	cli
	return flags;
    2f12:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2f14:	a0 e5       	ldi	r26, 0x50	; 80
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	16 96       	adiw	r26, 0x06	; 6
    2f1a:	8c 91       	ld	r24, X
    2f1c:	16 97       	sbiw	r26, 0x06	; 6
    2f1e:	89 7f       	andi	r24, 0xF9	; 249
    2f20:	16 96       	adiw	r26, 0x06	; 6
    2f22:	8c 93       	st	X, r24
    2f24:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2f26:	e0 e6       	ldi	r30, 0x60	; 96
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 e8       	ldi	r24, 0x80	; 128
    2f2c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2f2e:	8b eb       	ldi	r24, 0xBB	; 187
    2f30:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2f32:	16 96       	adiw	r26, 0x06	; 6
    2f34:	8c 91       	ld	r24, X
    2f36:	16 97       	sbiw	r26, 0x06	; 6
    2f38:	84 60       	ori	r24, 0x04	; 4
    2f3a:	16 96       	adiw	r26, 0x06	; 6
    2f3c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2f3e:	80 81       	ld	r24, Z
    2f40:	81 60       	ori	r24, 0x01	; 1
    2f42:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f44:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2f46:	63 60       	ori	r22, 0x03	; 3
    2f48:	84 e4       	ldi	r24, 0x44	; 68
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	1d d1       	rcall	.+570    	; 0x3188 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2f4e:	60 e4       	ldi	r22, 0x40	; 64
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	aa df       	rcall	.-172    	; 0x2ea8 <sysclk_enable_module>
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	08 95       	ret

00002f5e <nvm_eeprom_read_byte>:
	// Write flash buffer
	if (b_flag_erase) {
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    2f5e:	dc 01       	movw	r26, r24
    2f60:	e0 ec       	ldi	r30, 0xC0	; 192
    2f62:	f1 e0       	ldi	r31, 0x01	; 1
    2f64:	97 85       	ldd	r25, Z+15	; 0x0f
    2f66:	99 23       	and	r25, r25
    2f68:	ec f3       	brlt	.-6      	; 0x2f64 <nvm_eeprom_read_byte+0x6>
    2f6a:	ec ec       	ldi	r30, 0xCC	; 204
    2f6c:	f1 e0       	ldi	r31, 0x01	; 1
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 60       	ori	r24, 0x08	; 8
    2f72:	80 83       	st	Z, r24
    2f74:	b0 5f       	subi	r27, 0xF0	; 240
    2f76:	8c 91       	ld	r24, X
    2f78:	90 81       	ld	r25, Z
    2f7a:	97 7f       	andi	r25, 0xF7	; 247
    2f7c:	90 83       	st	Z, r25
    2f7e:	08 95       	ret

00002f80 <nvm_flash_read_buffer>:
    2f80:	da 01       	movw	r26, r20
    2f82:	a9 01       	movw	r20, r18
    2f84:	e0 ec       	ldi	r30, 0xC0	; 192
    2f86:	f1 e0       	ldi	r31, 0x01	; 1
    2f88:	37 85       	ldd	r19, Z+15	; 0x0f
    2f8a:	33 23       	and	r19, r19
    2f8c:	ec f3       	brlt	.-6      	; 0x2f88 <nvm_flash_read_buffer+0x8>
    2f8e:	41 15       	cp	r20, r1
    2f90:	51 05       	cpc	r21, r1
    2f92:	79 f0       	breq	.+30     	; 0x2fb2 <nvm_flash_read_buffer+0x32>
    2f94:	4a 0f       	add	r20, r26
    2f96:	5b 1f       	adc	r21, r27
    2f98:	0b b6       	in	r0, 0x3b	; 59
    2f9a:	8b bf       	out	0x3b, r24	; 59
    2f9c:	fb 01       	movw	r30, r22
    2f9e:	37 91       	elpm	r19, Z+
    2fa0:	0b be       	out	0x3b, r0	; 59
    2fa2:	3d 93       	st	X+, r19
    2fa4:	6f 5f       	subi	r22, 0xFF	; 255
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	a4 17       	cp	r26, r20
    2fae:	b5 07       	cpc	r27, r21
    2fb0:	99 f7       	brne	.-26     	; 0x2f98 <nvm_flash_read_buffer+0x18>
    2fb2:	08 95       	ret

00002fb4 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    2fb4:	2f 92       	push	r2
    2fb6:	3f 92       	push	r3
    2fb8:	4f 92       	push	r4
    2fba:	5f 92       	push	r5
    2fbc:	6f 92       	push	r6
    2fbe:	7f 92       	push	r7
    2fc0:	8f 92       	push	r8
    2fc2:	9f 92       	push	r9
    2fc4:	af 92       	push	r10
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	2a 97       	sbiw	r28, 0x0a	; 10
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	2b 01       	movw	r4, r22
    2fe4:	3c 01       	movw	r6, r24
    2fe6:	1a 01       	movw	r2, r20
    2fe8:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	88 27       	eor	r24, r24

	// For each page
	while ( len ) {
    2ff0:	23 2b       	or	r18, r19
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <nvm_flash_erase_and_write_buffer+0x42>
    2ff4:	a9 c0       	rjmp	.+338    	; 0x3148 <nvm_flash_erase_and_write_buffer+0x194>
    2ff6:	8f 83       	std	Y+7, r24	; 0x07
    2ff8:	98 87       	std	Y+8, r25	; 0x08
    2ffa:	a9 87       	std	Y+9, r26	; 0x09
    2ffc:	ba 87       	std	Y+10, r27	; 0x0a
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    2ffe:	88 24       	eor	r8, r8
    3000:	8a 94       	dec	r8
    3002:	98 2c       	mov	r9, r8
    3004:	4b 82       	std	Y+3, r4	; 0x03
    3006:	5c 82       	std	Y+4, r5	; 0x04
    3008:	6d 82       	std	Y+5, r6	; 0x05
    300a:	7e 82       	std	Y+6, r7	; 0x06
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    300c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    3010:	88 23       	and	r24, r24
    3012:	e4 f3       	brlt	.-8      	; 0x300c <nvm_flash_erase_and_write_buffer+0x58>
    3014:	cf 80       	ldd	r12, Y+7	; 0x07
    3016:	d8 84       	ldd	r13, Y+8	; 0x08
    3018:	e9 84       	ldd	r14, Y+9	; 0x09
    301a:	fa 84       	ldd	r15, Y+10	; 0x0a
    301c:	21 e0       	ldi	r18, 0x01	; 1
    301e:	c2 0e       	add	r12, r18
    3020:	d2 1e       	adc	r13, r18
    3022:	e1 1c       	adc	r14, r1
    3024:	f1 1c       	adc	r15, r1
    3026:	4f 80       	ldd	r4, Y+7	; 0x07
    3028:	58 84       	ldd	r5, Y+8	; 0x08
    302a:	69 84       	ldd	r6, Y+9	; 0x09
    302c:	7a 84       	ldd	r7, Y+10	; 0x0a
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	43 1a       	sub	r4, r19
    3032:	53 0a       	sbc	r5, r19
    3034:	63 0a       	sbc	r6, r19
    3036:	73 0a       	sbc	r7, r19
    3038:	10 e0       	ldi	r17, 0x00	; 0
    303a:	c3 01       	movw	r24, r6
    303c:	b2 01       	movw	r22, r4
    303e:	61 50       	subi	r22, 0x01	; 1
    3040:	71 09       	sbc	r23, r1
    3042:	81 09       	sbc	r24, r1
    3044:	91 09       	sbc	r25, r1
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    3046:	00 23       	and	r16, r16
    3048:	69 f0       	breq	.+26     	; 0x3064 <nvm_flash_erase_and_write_buffer+0xb0>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    304a:	0b b6       	in	r0, 0x3b	; 59
    304c:	8b bf       	out	0x3b, r24	; 59
    304e:	fb 01       	movw	r30, r22
    3050:	27 91       	elpm	r18, Z+
    3052:	36 91       	elpm	r19, Z
    3054:	0b be       	out	0x3b, r0	; 59
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    3056:	29 83       	std	Y+1, r18	; 0x01
    3058:	3a 83       	std	Y+2, r19	; 0x02
				if (w_value!=0xFFFF) {
    305a:	2f 3f       	cpi	r18, 0xFF	; 255
    305c:	3f 4f       	sbci	r19, 0xFF	; 255
    305e:	21 f0       	breq	.+8      	; 0x3068 <nvm_flash_erase_and_write_buffer+0xb4>
					b_flag_erase = true; // The page is not empty
    3060:	11 e0       	ldi	r17, 0x01	; 1
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <nvm_flash_erase_and_write_buffer+0xb4>
				}
			}else{
				w_value = 0xFFFF;
    3064:	89 82       	std	Y+1, r8	; 0x01
    3066:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    3068:	a1 14       	cp	r10, r1
    306a:	b1 04       	cpc	r11, r1
    306c:	51 f1       	breq	.+84     	; 0x30c2 <nvm_flash_erase_and_write_buffer+0x10e>
				if (opt_address == page_address) {
    306e:	2b 81       	ldd	r18, Y+3	; 0x03
    3070:	3c 81       	ldd	r19, Y+4	; 0x04
    3072:	4d 81       	ldd	r20, Y+5	; 0x05
    3074:	5e 81       	ldd	r21, Y+6	; 0x06
    3076:	62 17       	cp	r22, r18
    3078:	73 07       	cpc	r23, r19
    307a:	84 07       	cpc	r24, r20
    307c:	95 07       	cpc	r25, r21
    307e:	09 f0       	breq	.+2      	; 0x3082 <nvm_flash_erase_and_write_buffer+0xce>
    3080:	58 c0       	rjmp	.+176    	; 0x3132 <nvm_flash_erase_and_write_buffer+0x17e>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    3082:	31 e0       	ldi	r19, 0x01	; 1
    3084:	a3 1a       	sub	r10, r19
    3086:	b1 08       	sbc	r11, r1
					opt_address++;
					LSB(w_value)=*(uint8_t*)buf;
    3088:	d1 01       	movw	r26, r2
    308a:	2d 91       	ld	r18, X+
    308c:	1d 01       	movw	r2, r26
    308e:	29 83       	std	Y+1, r18	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    3090:	a1 14       	cp	r10, r1
    3092:	b1 04       	cpc	r11, r1
    3094:	29 f4       	brne	.+10     	; 0x30a0 <nvm_flash_erase_and_write_buffer+0xec>
			if (len) {
				if (opt_address == page_address) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
					opt_address++;
    3096:	4b 82       	std	Y+3, r4	; 0x03
    3098:	5c 82       	std	Y+4, r5	; 0x04
    309a:	6d 82       	std	Y+5, r6	; 0x05
    309c:	7e 82       	std	Y+6, r7	; 0x06
    309e:	11 c0       	rjmp	.+34     	; 0x30c2 <nvm_flash_erase_and_write_buffer+0x10e>
			}
			if (len) {
				if (opt_address == (page_address+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    30a0:	b1 e0       	ldi	r27, 0x01	; 1
    30a2:	ab 1a       	sub	r10, r27
    30a4:	b1 08       	sbc	r11, r1
					opt_address++;
    30a6:	a3 01       	movw	r20, r6
    30a8:	92 01       	movw	r18, r4
    30aa:	2f 5f       	subi	r18, 0xFF	; 255
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	4f 4f       	sbci	r20, 0xFF	; 255
    30b0:	5f 4f       	sbci	r21, 0xFF	; 255
    30b2:	2b 83       	std	Y+3, r18	; 0x03
    30b4:	3c 83       	std	Y+4, r19	; 0x04
    30b6:	4d 83       	std	Y+5, r20	; 0x05
    30b8:	5e 83       	std	Y+6, r21	; 0x06
					MSB(w_value)=*(uint8_t*)buf;
    30ba:	d1 01       	movw	r26, r2
    30bc:	2d 91       	ld	r18, X+
    30be:	1d 01       	movw	r2, r26
    30c0:	2a 83       	std	Y+2, r18	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    30c2:	49 81       	ldd	r20, Y+1	; 0x01
    30c4:	5a 81       	ldd	r21, Y+2	; 0x02
    30c6:	0f 94 30 00 	call	0x20060	; 0x20060 <nvm_flash_load_word_to_buffer>
    30ca:	b2 e0       	ldi	r27, 0x02	; 2
    30cc:	4b 0e       	add	r4, r27
    30ce:	51 1c       	adc	r5, r1
    30d0:	61 1c       	adc	r6, r1
    30d2:	71 1c       	adc	r7, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    30d4:	4c 14       	cp	r4, r12
    30d6:	5d 04       	cpc	r5, r13
    30d8:	6e 04       	cpc	r6, r14
    30da:	7f 04       	cpc	r7, r15
    30dc:	09 f0       	breq	.+2      	; 0x30e0 <nvm_flash_erase_and_write_buffer+0x12c>
    30de:	ad cf       	rjmp	.-166    	; 0x303a <nvm_flash_erase_and_write_buffer+0x86>
    30e0:	75 01       	movw	r14, r10
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    30e2:	11 23       	and	r17, r17
    30e4:	61 f0       	breq	.+24     	; 0x30fe <nvm_flash_erase_and_write_buffer+0x14a>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    30e6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    30ea:	88 23       	and	r24, r24
    30ec:	e4 f3       	brlt	.-8      	; 0x30e6 <nvm_flash_erase_and_write_buffer+0x132>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    30ee:	45 e2       	ldi	r20, 0x25	; 37
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	0f 94 21 00 	call	0x20042	; 0x20042 <nvm_common_spm>
    30fc:	0b c0       	rjmp	.+22     	; 0x3114 <nvm_flash_erase_and_write_buffer+0x160>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    30fe:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    3102:	88 23       	and	r24, r24
    3104:	e4 f3       	brlt	.-8      	; 0x30fe <nvm_flash_erase_and_write_buffer+0x14a>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    3106:	44 e2       	ldi	r20, 0x24	; 36
    3108:	6f 81       	ldd	r22, Y+7	; 0x07
    310a:	78 85       	ldd	r23, Y+8	; 0x08
    310c:	89 85       	ldd	r24, Y+9	; 0x09
    310e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3110:	0f 94 21 00 	call	0x20042	; 0x20042 <nvm_common_spm>
    3114:	2f 81       	ldd	r18, Y+7	; 0x07
    3116:	38 85       	ldd	r19, Y+8	; 0x08
    3118:	49 85       	ldd	r20, Y+9	; 0x09
    311a:	5a 85       	ldd	r21, Y+10	; 0x0a
    311c:	3f 5f       	subi	r19, 0xFF	; 255
    311e:	4f 4f       	sbci	r20, 0xFF	; 255
    3120:	5f 4f       	sbci	r21, 0xFF	; 255
    3122:	2f 83       	std	Y+7, r18	; 0x07
    3124:	38 87       	std	Y+8, r19	; 0x08
    3126:	49 87       	std	Y+9, r20	; 0x09
    3128:	5a 87       	std	Y+10, r21	; 0x0a

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    312a:	ef 28       	or	r14, r15
    312c:	09 f0       	breq	.+2      	; 0x3130 <nvm_flash_erase_and_write_buffer+0x17c>
    312e:	6e cf       	rjmp	.-292    	; 0x300c <nvm_flash_erase_and_write_buffer+0x58>
    3130:	0b c0       	rjmp	.+22     	; 0x3148 <nvm_flash_erase_and_write_buffer+0x194>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_address+1)) {
    3132:	2b 81       	ldd	r18, Y+3	; 0x03
    3134:	3c 81       	ldd	r19, Y+4	; 0x04
    3136:	4d 81       	ldd	r20, Y+5	; 0x05
    3138:	5e 81       	ldd	r21, Y+6	; 0x06
    313a:	42 16       	cp	r4, r18
    313c:	53 06       	cpc	r5, r19
    313e:	64 06       	cpc	r6, r20
    3140:	75 06       	cpc	r7, r21
    3142:	09 f0       	breq	.+2      	; 0x3146 <nvm_flash_erase_and_write_buffer+0x192>
    3144:	be cf       	rjmp	.-132    	; 0x30c2 <nvm_flash_erase_and_write_buffer+0x10e>
    3146:	ac cf       	rjmp	.-168    	; 0x30a0 <nvm_flash_erase_and_write_buffer+0xec>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    3148:	2a 96       	adiw	r28, 0x0a	; 10
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	ff 90       	pop	r15
    3158:	ef 90       	pop	r14
    315a:	df 90       	pop	r13
    315c:	cf 90       	pop	r12
    315e:	bf 90       	pop	r11
    3160:	af 90       	pop	r10
    3162:	9f 90       	pop	r9
    3164:	8f 90       	pop	r8
    3166:	7f 90       	pop	r7
    3168:	6f 90       	pop	r6
    316a:	5f 90       	pop	r5
    316c:	4f 90       	pop	r4
    316e:	3f 90       	pop	r3
    3170:	2f 90       	pop	r2
    3172:	08 95       	ret

00003174 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3174:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3178:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    317a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    317c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3180:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3182:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3186:	08 95       	ret

00003188 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3188:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    318a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    318c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    318e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3190:	60 83       	st	Z, r22
	ret                             // Return to caller
    3192:	08 95       	ret

00003194 <__udivmodhi4>:
    3194:	aa 1b       	sub	r26, r26
    3196:	bb 1b       	sub	r27, r27
    3198:	51 e1       	ldi	r21, 0x11	; 17
    319a:	07 c0       	rjmp	.+14     	; 0x31aa <__udivmodhi4_ep>

0000319c <__udivmodhi4_loop>:
    319c:	aa 1f       	adc	r26, r26
    319e:	bb 1f       	adc	r27, r27
    31a0:	a6 17       	cp	r26, r22
    31a2:	b7 07       	cpc	r27, r23
    31a4:	10 f0       	brcs	.+4      	; 0x31aa <__udivmodhi4_ep>
    31a6:	a6 1b       	sub	r26, r22
    31a8:	b7 0b       	sbc	r27, r23

000031aa <__udivmodhi4_ep>:
    31aa:	88 1f       	adc	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	5a 95       	dec	r21
    31b0:	a9 f7       	brne	.-22     	; 0x319c <__udivmodhi4_loop>
    31b2:	80 95       	com	r24
    31b4:	90 95       	com	r25
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	08 95       	ret

000031bc <__tablejump2__>:
    31bc:	ee 0f       	add	r30, r30
    31be:	ff 1f       	adc	r31, r31
    31c0:	88 1f       	adc	r24, r24
    31c2:	8b bf       	out	0x3b, r24	; 59
    31c4:	07 90       	elpm	r0, Z+
    31c6:	f6 91       	elpm	r31, Z
    31c8:	e0 2d       	mov	r30, r0
    31ca:	1b be       	out	0x3b, r1	; 59
    31cc:	19 94       	eijmp

000031ce <memcpy>:
    31ce:	fb 01       	movw	r30, r22
    31d0:	dc 01       	movw	r26, r24
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <memcpy+0xa>
    31d4:	01 90       	ld	r0, Z+
    31d6:	0d 92       	st	X+, r0
    31d8:	41 50       	subi	r20, 0x01	; 1
    31da:	50 40       	sbci	r21, 0x00	; 0
    31dc:	d8 f7       	brcc	.-10     	; 0x31d4 <memcpy+0x6>
    31de:	08 95       	ret

000031e0 <strcmp>:
    31e0:	fb 01       	movw	r30, r22
    31e2:	dc 01       	movw	r26, r24
    31e4:	8d 91       	ld	r24, X+
    31e6:	01 90       	ld	r0, Z+
    31e8:	80 19       	sub	r24, r0
    31ea:	01 10       	cpse	r0, r1
    31ec:	d9 f3       	breq	.-10     	; 0x31e4 <strcmp+0x4>
    31ee:	99 0b       	sbc	r25, r25
    31f0:	08 95       	ret

000031f2 <printf>:
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	ae 01       	movw	r20, r28
    31fc:	4a 5f       	subi	r20, 0xFA	; 250
    31fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3200:	fa 01       	movw	r30, r20
    3202:	61 91       	ld	r22, Z+
    3204:	71 91       	ld	r23, Z+
    3206:	af 01       	movw	r20, r30
    3208:	80 91 4e 27 	lds	r24, 0x274E	; 0x80274e <__iob+0x2>
    320c:	90 91 4f 27 	lds	r25, 0x274F	; 0x80274f <__iob+0x3>
    3210:	33 d0       	rcall	.+102    	; 0x3278 <vfprintf>
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	08 95       	ret

00003218 <puts>:
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	e0 91 4e 27 	lds	r30, 0x274E	; 0x80274e <__iob+0x2>
    3224:	f0 91 4f 27 	lds	r31, 0x274F	; 0x80274f <__iob+0x3>
    3228:	23 81       	ldd	r18, Z+3	; 0x03
    322a:	21 ff       	sbrs	r18, 1
    322c:	1b c0       	rjmp	.+54     	; 0x3264 <puts+0x4c>
    322e:	8c 01       	movw	r16, r24
    3230:	d0 e0       	ldi	r29, 0x00	; 0
    3232:	c0 e0       	ldi	r28, 0x00	; 0
    3234:	f8 01       	movw	r30, r16
    3236:	81 91       	ld	r24, Z+
    3238:	8f 01       	movw	r16, r30
    323a:	60 91 4e 27 	lds	r22, 0x274E	; 0x80274e <__iob+0x2>
    323e:	70 91 4f 27 	lds	r23, 0x274F	; 0x80274f <__iob+0x3>
    3242:	db 01       	movw	r26, r22
    3244:	18 96       	adiw	r26, 0x08	; 8
    3246:	ed 91       	ld	r30, X+
    3248:	fc 91       	ld	r31, X
    324a:	19 97       	sbiw	r26, 0x09	; 9
    324c:	88 23       	and	r24, r24
    324e:	31 f0       	breq	.+12     	; 0x325c <puts+0x44>
    3250:	19 95       	eicall
    3252:	89 2b       	or	r24, r25
    3254:	79 f3       	breq	.-34     	; 0x3234 <puts+0x1c>
    3256:	df ef       	ldi	r29, 0xFF	; 255
    3258:	cf ef       	ldi	r28, 0xFF	; 255
    325a:	ec cf       	rjmp	.-40     	; 0x3234 <puts+0x1c>
    325c:	8a e0       	ldi	r24, 0x0A	; 10
    325e:	19 95       	eicall
    3260:	89 2b       	or	r24, r25
    3262:	19 f0       	breq	.+6      	; 0x326a <puts+0x52>
    3264:	8f ef       	ldi	r24, 0xFF	; 255
    3266:	9f ef       	ldi	r25, 0xFF	; 255
    3268:	02 c0       	rjmp	.+4      	; 0x326e <puts+0x56>
    326a:	8d 2f       	mov	r24, r29
    326c:	9c 2f       	mov	r25, r28
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	08 95       	ret

00003278 <vfprintf>:
    3278:	2f 92       	push	r2
    327a:	3f 92       	push	r3
    327c:	4f 92       	push	r4
    327e:	5f 92       	push	r5
    3280:	6f 92       	push	r6
    3282:	7f 92       	push	r7
    3284:	8f 92       	push	r8
    3286:	9f 92       	push	r9
    3288:	af 92       	push	r10
    328a:	bf 92       	push	r11
    328c:	cf 92       	push	r12
    328e:	df 92       	push	r13
    3290:	ef 92       	push	r14
    3292:	ff 92       	push	r15
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	2c 97       	sbiw	r28, 0x0c	; 12
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	7c 01       	movw	r14, r24
    32a8:	6b 01       	movw	r12, r22
    32aa:	8a 01       	movw	r16, r20
    32ac:	fc 01       	movw	r30, r24
    32ae:	16 82       	std	Z+6, r1	; 0x06
    32b0:	17 82       	std	Z+7, r1	; 0x07
    32b2:	83 81       	ldd	r24, Z+3	; 0x03
    32b4:	81 ff       	sbrs	r24, 1
    32b6:	b0 c1       	rjmp	.+864    	; 0x3618 <vfprintf+0x3a0>
    32b8:	ce 01       	movw	r24, r28
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	4c 01       	movw	r8, r24
    32be:	f7 01       	movw	r30, r14
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	f6 01       	movw	r30, r12
    32c4:	93 fd       	sbrc	r25, 3
    32c6:	85 91       	lpm	r24, Z+
    32c8:	93 ff       	sbrs	r25, 3
    32ca:	81 91       	ld	r24, Z+
    32cc:	6f 01       	movw	r12, r30
    32ce:	88 23       	and	r24, r24
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <vfprintf+0x5c>
    32d2:	9e c1       	rjmp	.+828    	; 0x3610 <vfprintf+0x398>
    32d4:	85 32       	cpi	r24, 0x25	; 37
    32d6:	39 f4       	brne	.+14     	; 0x32e6 <vfprintf+0x6e>
    32d8:	93 fd       	sbrc	r25, 3
    32da:	85 91       	lpm	r24, Z+
    32dc:	93 ff       	sbrs	r25, 3
    32de:	81 91       	ld	r24, Z+
    32e0:	6f 01       	movw	r12, r30
    32e2:	85 32       	cpi	r24, 0x25	; 37
    32e4:	21 f4       	brne	.+8      	; 0x32ee <vfprintf+0x76>
    32e6:	b7 01       	movw	r22, r14
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	c4 d1       	rcall	.+904    	; 0x3674 <fputc>
    32ec:	e8 cf       	rjmp	.-48     	; 0x32be <vfprintf+0x46>
    32ee:	51 2c       	mov	r5, r1
    32f0:	31 2c       	mov	r3, r1
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	20 32       	cpi	r18, 0x20	; 32
    32f6:	a0 f4       	brcc	.+40     	; 0x3320 <vfprintf+0xa8>
    32f8:	8b 32       	cpi	r24, 0x2B	; 43
    32fa:	69 f0       	breq	.+26     	; 0x3316 <vfprintf+0x9e>
    32fc:	30 f4       	brcc	.+12     	; 0x330a <vfprintf+0x92>
    32fe:	80 32       	cpi	r24, 0x20	; 32
    3300:	59 f0       	breq	.+22     	; 0x3318 <vfprintf+0xa0>
    3302:	83 32       	cpi	r24, 0x23	; 35
    3304:	69 f4       	brne	.+26     	; 0x3320 <vfprintf+0xa8>
    3306:	20 61       	ori	r18, 0x10	; 16
    3308:	2c c0       	rjmp	.+88     	; 0x3362 <vfprintf+0xea>
    330a:	8d 32       	cpi	r24, 0x2D	; 45
    330c:	39 f0       	breq	.+14     	; 0x331c <vfprintf+0xa4>
    330e:	80 33       	cpi	r24, 0x30	; 48
    3310:	39 f4       	brne	.+14     	; 0x3320 <vfprintf+0xa8>
    3312:	21 60       	ori	r18, 0x01	; 1
    3314:	26 c0       	rjmp	.+76     	; 0x3362 <vfprintf+0xea>
    3316:	22 60       	ori	r18, 0x02	; 2
    3318:	24 60       	ori	r18, 0x04	; 4
    331a:	23 c0       	rjmp	.+70     	; 0x3362 <vfprintf+0xea>
    331c:	28 60       	ori	r18, 0x08	; 8
    331e:	21 c0       	rjmp	.+66     	; 0x3362 <vfprintf+0xea>
    3320:	27 fd       	sbrc	r18, 7
    3322:	27 c0       	rjmp	.+78     	; 0x3372 <vfprintf+0xfa>
    3324:	30 ed       	ldi	r19, 0xD0	; 208
    3326:	38 0f       	add	r19, r24
    3328:	3a 30       	cpi	r19, 0x0A	; 10
    332a:	78 f4       	brcc	.+30     	; 0x334a <vfprintf+0xd2>
    332c:	26 ff       	sbrs	r18, 6
    332e:	06 c0       	rjmp	.+12     	; 0x333c <vfprintf+0xc4>
    3330:	fa e0       	ldi	r31, 0x0A	; 10
    3332:	5f 9e       	mul	r5, r31
    3334:	30 0d       	add	r19, r0
    3336:	11 24       	eor	r1, r1
    3338:	53 2e       	mov	r5, r19
    333a:	13 c0       	rjmp	.+38     	; 0x3362 <vfprintf+0xea>
    333c:	8a e0       	ldi	r24, 0x0A	; 10
    333e:	38 9e       	mul	r3, r24
    3340:	30 0d       	add	r19, r0
    3342:	11 24       	eor	r1, r1
    3344:	33 2e       	mov	r3, r19
    3346:	20 62       	ori	r18, 0x20	; 32
    3348:	0c c0       	rjmp	.+24     	; 0x3362 <vfprintf+0xea>
    334a:	8e 32       	cpi	r24, 0x2E	; 46
    334c:	21 f4       	brne	.+8      	; 0x3356 <vfprintf+0xde>
    334e:	26 fd       	sbrc	r18, 6
    3350:	5f c1       	rjmp	.+702    	; 0x3610 <vfprintf+0x398>
    3352:	20 64       	ori	r18, 0x40	; 64
    3354:	06 c0       	rjmp	.+12     	; 0x3362 <vfprintf+0xea>
    3356:	8c 36       	cpi	r24, 0x6C	; 108
    3358:	11 f4       	brne	.+4      	; 0x335e <vfprintf+0xe6>
    335a:	20 68       	ori	r18, 0x80	; 128
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <vfprintf+0xea>
    335e:	88 36       	cpi	r24, 0x68	; 104
    3360:	41 f4       	brne	.+16     	; 0x3372 <vfprintf+0xfa>
    3362:	f6 01       	movw	r30, r12
    3364:	93 fd       	sbrc	r25, 3
    3366:	85 91       	lpm	r24, Z+
    3368:	93 ff       	sbrs	r25, 3
    336a:	81 91       	ld	r24, Z+
    336c:	6f 01       	movw	r12, r30
    336e:	81 11       	cpse	r24, r1
    3370:	c1 cf       	rjmp	.-126    	; 0x32f4 <vfprintf+0x7c>
    3372:	98 2f       	mov	r25, r24
    3374:	9f 7d       	andi	r25, 0xDF	; 223
    3376:	95 54       	subi	r25, 0x45	; 69
    3378:	93 30       	cpi	r25, 0x03	; 3
    337a:	28 f4       	brcc	.+10     	; 0x3386 <vfprintf+0x10e>
    337c:	0c 5f       	subi	r16, 0xFC	; 252
    337e:	1f 4f       	sbci	r17, 0xFF	; 255
    3380:	ff e3       	ldi	r31, 0x3F	; 63
    3382:	f9 83       	std	Y+1, r31	; 0x01
    3384:	0d c0       	rjmp	.+26     	; 0x33a0 <vfprintf+0x128>
    3386:	83 36       	cpi	r24, 0x63	; 99
    3388:	31 f0       	breq	.+12     	; 0x3396 <vfprintf+0x11e>
    338a:	83 37       	cpi	r24, 0x73	; 115
    338c:	71 f0       	breq	.+28     	; 0x33aa <vfprintf+0x132>
    338e:	83 35       	cpi	r24, 0x53	; 83
    3390:	09 f0       	breq	.+2      	; 0x3394 <vfprintf+0x11c>
    3392:	57 c0       	rjmp	.+174    	; 0x3442 <vfprintf+0x1ca>
    3394:	21 c0       	rjmp	.+66     	; 0x33d8 <vfprintf+0x160>
    3396:	f8 01       	movw	r30, r16
    3398:	80 81       	ld	r24, Z
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	0e 5f       	subi	r16, 0xFE	; 254
    339e:	1f 4f       	sbci	r17, 0xFF	; 255
    33a0:	44 24       	eor	r4, r4
    33a2:	43 94       	inc	r4
    33a4:	51 2c       	mov	r5, r1
    33a6:	54 01       	movw	r10, r8
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <vfprintf+0x15a>
    33aa:	38 01       	movw	r6, r16
    33ac:	f2 e0       	ldi	r31, 0x02	; 2
    33ae:	6f 0e       	add	r6, r31
    33b0:	71 1c       	adc	r7, r1
    33b2:	f8 01       	movw	r30, r16
    33b4:	a0 80       	ld	r10, Z
    33b6:	b1 80       	ldd	r11, Z+1	; 0x01
    33b8:	26 ff       	sbrs	r18, 6
    33ba:	03 c0       	rjmp	.+6      	; 0x33c2 <vfprintf+0x14a>
    33bc:	65 2d       	mov	r22, r5
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <vfprintf+0x14e>
    33c2:	6f ef       	ldi	r22, 0xFF	; 255
    33c4:	7f ef       	ldi	r23, 0xFF	; 255
    33c6:	c5 01       	movw	r24, r10
    33c8:	2c 87       	std	Y+12, r18	; 0x0c
    33ca:	49 d1       	rcall	.+658    	; 0x365e <strnlen>
    33cc:	2c 01       	movw	r4, r24
    33ce:	83 01       	movw	r16, r6
    33d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    33d2:	2f 77       	andi	r18, 0x7F	; 127
    33d4:	22 2e       	mov	r2, r18
    33d6:	16 c0       	rjmp	.+44     	; 0x3404 <vfprintf+0x18c>
    33d8:	38 01       	movw	r6, r16
    33da:	f2 e0       	ldi	r31, 0x02	; 2
    33dc:	6f 0e       	add	r6, r31
    33de:	71 1c       	adc	r7, r1
    33e0:	f8 01       	movw	r30, r16
    33e2:	a0 80       	ld	r10, Z
    33e4:	b1 80       	ldd	r11, Z+1	; 0x01
    33e6:	26 ff       	sbrs	r18, 6
    33e8:	03 c0       	rjmp	.+6      	; 0x33f0 <vfprintf+0x178>
    33ea:	65 2d       	mov	r22, r5
    33ec:	70 e0       	ldi	r23, 0x00	; 0
    33ee:	02 c0       	rjmp	.+4      	; 0x33f4 <vfprintf+0x17c>
    33f0:	6f ef       	ldi	r22, 0xFF	; 255
    33f2:	7f ef       	ldi	r23, 0xFF	; 255
    33f4:	c5 01       	movw	r24, r10
    33f6:	2c 87       	std	Y+12, r18	; 0x0c
    33f8:	27 d1       	rcall	.+590    	; 0x3648 <strnlen_P>
    33fa:	2c 01       	movw	r4, r24
    33fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    33fe:	20 68       	ori	r18, 0x80	; 128
    3400:	22 2e       	mov	r2, r18
    3402:	83 01       	movw	r16, r6
    3404:	23 fc       	sbrc	r2, 3
    3406:	19 c0       	rjmp	.+50     	; 0x343a <vfprintf+0x1c2>
    3408:	83 2d       	mov	r24, r3
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	48 16       	cp	r4, r24
    340e:	59 06       	cpc	r5, r25
    3410:	a0 f4       	brcc	.+40     	; 0x343a <vfprintf+0x1c2>
    3412:	b7 01       	movw	r22, r14
    3414:	80 e2       	ldi	r24, 0x20	; 32
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	2d d1       	rcall	.+602    	; 0x3674 <fputc>
    341a:	3a 94       	dec	r3
    341c:	f5 cf       	rjmp	.-22     	; 0x3408 <vfprintf+0x190>
    341e:	f5 01       	movw	r30, r10
    3420:	27 fc       	sbrc	r2, 7
    3422:	85 91       	lpm	r24, Z+
    3424:	27 fe       	sbrs	r2, 7
    3426:	81 91       	ld	r24, Z+
    3428:	5f 01       	movw	r10, r30
    342a:	b7 01       	movw	r22, r14
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	22 d1       	rcall	.+580    	; 0x3674 <fputc>
    3430:	31 10       	cpse	r3, r1
    3432:	3a 94       	dec	r3
    3434:	f1 e0       	ldi	r31, 0x01	; 1
    3436:	4f 1a       	sub	r4, r31
    3438:	51 08       	sbc	r5, r1
    343a:	41 14       	cp	r4, r1
    343c:	51 04       	cpc	r5, r1
    343e:	79 f7       	brne	.-34     	; 0x341e <vfprintf+0x1a6>
    3440:	de c0       	rjmp	.+444    	; 0x35fe <vfprintf+0x386>
    3442:	84 36       	cpi	r24, 0x64	; 100
    3444:	11 f0       	breq	.+4      	; 0x344a <vfprintf+0x1d2>
    3446:	89 36       	cpi	r24, 0x69	; 105
    3448:	31 f5       	brne	.+76     	; 0x3496 <vfprintf+0x21e>
    344a:	f8 01       	movw	r30, r16
    344c:	27 ff       	sbrs	r18, 7
    344e:	07 c0       	rjmp	.+14     	; 0x345e <vfprintf+0x1e6>
    3450:	60 81       	ld	r22, Z
    3452:	71 81       	ldd	r23, Z+1	; 0x01
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	0c 5f       	subi	r16, 0xFC	; 252
    345a:	1f 4f       	sbci	r17, 0xFF	; 255
    345c:	08 c0       	rjmp	.+16     	; 0x346e <vfprintf+0x1f6>
    345e:	60 81       	ld	r22, Z
    3460:	71 81       	ldd	r23, Z+1	; 0x01
    3462:	07 2e       	mov	r0, r23
    3464:	00 0c       	add	r0, r0
    3466:	88 0b       	sbc	r24, r24
    3468:	99 0b       	sbc	r25, r25
    346a:	0e 5f       	subi	r16, 0xFE	; 254
    346c:	1f 4f       	sbci	r17, 0xFF	; 255
    346e:	2f 76       	andi	r18, 0x6F	; 111
    3470:	72 2e       	mov	r7, r18
    3472:	97 ff       	sbrs	r25, 7
    3474:	09 c0       	rjmp	.+18     	; 0x3488 <vfprintf+0x210>
    3476:	90 95       	com	r25
    3478:	80 95       	com	r24
    347a:	70 95       	com	r23
    347c:	61 95       	neg	r22
    347e:	7f 4f       	sbci	r23, 0xFF	; 255
    3480:	8f 4f       	sbci	r24, 0xFF	; 255
    3482:	9f 4f       	sbci	r25, 0xFF	; 255
    3484:	20 68       	ori	r18, 0x80	; 128
    3486:	72 2e       	mov	r7, r18
    3488:	2a e0       	ldi	r18, 0x0A	; 10
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	a4 01       	movw	r20, r8
    348e:	2a d1       	rcall	.+596    	; 0x36e4 <__ultoa_invert>
    3490:	a8 2e       	mov	r10, r24
    3492:	a8 18       	sub	r10, r8
    3494:	43 c0       	rjmp	.+134    	; 0x351c <vfprintf+0x2a4>
    3496:	85 37       	cpi	r24, 0x75	; 117
    3498:	29 f4       	brne	.+10     	; 0x34a4 <vfprintf+0x22c>
    349a:	2f 7e       	andi	r18, 0xEF	; 239
    349c:	b2 2e       	mov	r11, r18
    349e:	2a e0       	ldi	r18, 0x0A	; 10
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	25 c0       	rjmp	.+74     	; 0x34ee <vfprintf+0x276>
    34a4:	f2 2f       	mov	r31, r18
    34a6:	f9 7f       	andi	r31, 0xF9	; 249
    34a8:	bf 2e       	mov	r11, r31
    34aa:	8f 36       	cpi	r24, 0x6F	; 111
    34ac:	c1 f0       	breq	.+48     	; 0x34de <vfprintf+0x266>
    34ae:	18 f4       	brcc	.+6      	; 0x34b6 <vfprintf+0x23e>
    34b0:	88 35       	cpi	r24, 0x58	; 88
    34b2:	79 f0       	breq	.+30     	; 0x34d2 <vfprintf+0x25a>
    34b4:	ad c0       	rjmp	.+346    	; 0x3610 <vfprintf+0x398>
    34b6:	80 37       	cpi	r24, 0x70	; 112
    34b8:	19 f0       	breq	.+6      	; 0x34c0 <vfprintf+0x248>
    34ba:	88 37       	cpi	r24, 0x78	; 120
    34bc:	21 f0       	breq	.+8      	; 0x34c6 <vfprintf+0x24e>
    34be:	a8 c0       	rjmp	.+336    	; 0x3610 <vfprintf+0x398>
    34c0:	2f 2f       	mov	r18, r31
    34c2:	20 61       	ori	r18, 0x10	; 16
    34c4:	b2 2e       	mov	r11, r18
    34c6:	b4 fe       	sbrs	r11, 4
    34c8:	0d c0       	rjmp	.+26     	; 0x34e4 <vfprintf+0x26c>
    34ca:	8b 2d       	mov	r24, r11
    34cc:	84 60       	ori	r24, 0x04	; 4
    34ce:	b8 2e       	mov	r11, r24
    34d0:	09 c0       	rjmp	.+18     	; 0x34e4 <vfprintf+0x26c>
    34d2:	24 ff       	sbrs	r18, 4
    34d4:	0a c0       	rjmp	.+20     	; 0x34ea <vfprintf+0x272>
    34d6:	9f 2f       	mov	r25, r31
    34d8:	96 60       	ori	r25, 0x06	; 6
    34da:	b9 2e       	mov	r11, r25
    34dc:	06 c0       	rjmp	.+12     	; 0x34ea <vfprintf+0x272>
    34de:	28 e0       	ldi	r18, 0x08	; 8
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	05 c0       	rjmp	.+10     	; 0x34ee <vfprintf+0x276>
    34e4:	20 e1       	ldi	r18, 0x10	; 16
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <vfprintf+0x276>
    34ea:	20 e1       	ldi	r18, 0x10	; 16
    34ec:	32 e0       	ldi	r19, 0x02	; 2
    34ee:	f8 01       	movw	r30, r16
    34f0:	b7 fe       	sbrs	r11, 7
    34f2:	07 c0       	rjmp	.+14     	; 0x3502 <vfprintf+0x28a>
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	0c 5f       	subi	r16, 0xFC	; 252
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	06 c0       	rjmp	.+12     	; 0x350e <vfprintf+0x296>
    3502:	60 81       	ld	r22, Z
    3504:	71 81       	ldd	r23, Z+1	; 0x01
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	0e 5f       	subi	r16, 0xFE	; 254
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	a4 01       	movw	r20, r8
    3510:	e9 d0       	rcall	.+466    	; 0x36e4 <__ultoa_invert>
    3512:	a8 2e       	mov	r10, r24
    3514:	a8 18       	sub	r10, r8
    3516:	fb 2d       	mov	r31, r11
    3518:	ff 77       	andi	r31, 0x7F	; 127
    351a:	7f 2e       	mov	r7, r31
    351c:	76 fe       	sbrs	r7, 6
    351e:	0b c0       	rjmp	.+22     	; 0x3536 <vfprintf+0x2be>
    3520:	37 2d       	mov	r19, r7
    3522:	3e 7f       	andi	r19, 0xFE	; 254
    3524:	a5 14       	cp	r10, r5
    3526:	50 f4       	brcc	.+20     	; 0x353c <vfprintf+0x2c4>
    3528:	74 fe       	sbrs	r7, 4
    352a:	0a c0       	rjmp	.+20     	; 0x3540 <vfprintf+0x2c8>
    352c:	72 fc       	sbrc	r7, 2
    352e:	08 c0       	rjmp	.+16     	; 0x3540 <vfprintf+0x2c8>
    3530:	37 2d       	mov	r19, r7
    3532:	3e 7e       	andi	r19, 0xEE	; 238
    3534:	05 c0       	rjmp	.+10     	; 0x3540 <vfprintf+0x2c8>
    3536:	ba 2c       	mov	r11, r10
    3538:	37 2d       	mov	r19, r7
    353a:	03 c0       	rjmp	.+6      	; 0x3542 <vfprintf+0x2ca>
    353c:	ba 2c       	mov	r11, r10
    353e:	01 c0       	rjmp	.+2      	; 0x3542 <vfprintf+0x2ca>
    3540:	b5 2c       	mov	r11, r5
    3542:	34 ff       	sbrs	r19, 4
    3544:	0d c0       	rjmp	.+26     	; 0x3560 <vfprintf+0x2e8>
    3546:	fe 01       	movw	r30, r28
    3548:	ea 0d       	add	r30, r10
    354a:	f1 1d       	adc	r31, r1
    354c:	80 81       	ld	r24, Z
    354e:	80 33       	cpi	r24, 0x30	; 48
    3550:	11 f4       	brne	.+4      	; 0x3556 <vfprintf+0x2de>
    3552:	39 7e       	andi	r19, 0xE9	; 233
    3554:	09 c0       	rjmp	.+18     	; 0x3568 <vfprintf+0x2f0>
    3556:	32 ff       	sbrs	r19, 2
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <vfprintf+0x2ee>
    355a:	b3 94       	inc	r11
    355c:	b3 94       	inc	r11
    355e:	04 c0       	rjmp	.+8      	; 0x3568 <vfprintf+0x2f0>
    3560:	83 2f       	mov	r24, r19
    3562:	86 78       	andi	r24, 0x86	; 134
    3564:	09 f0       	breq	.+2      	; 0x3568 <vfprintf+0x2f0>
    3566:	b3 94       	inc	r11
    3568:	33 fd       	sbrc	r19, 3
    356a:	12 c0       	rjmp	.+36     	; 0x3590 <vfprintf+0x318>
    356c:	30 ff       	sbrs	r19, 0
    356e:	06 c0       	rjmp	.+12     	; 0x357c <vfprintf+0x304>
    3570:	5a 2c       	mov	r5, r10
    3572:	b3 14       	cp	r11, r3
    3574:	18 f4       	brcc	.+6      	; 0x357c <vfprintf+0x304>
    3576:	53 0c       	add	r5, r3
    3578:	5b 18       	sub	r5, r11
    357a:	b3 2c       	mov	r11, r3
    357c:	b3 14       	cp	r11, r3
    357e:	60 f4       	brcc	.+24     	; 0x3598 <vfprintf+0x320>
    3580:	b7 01       	movw	r22, r14
    3582:	80 e2       	ldi	r24, 0x20	; 32
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	3c 87       	std	Y+12, r19	; 0x0c
    3588:	75 d0       	rcall	.+234    	; 0x3674 <fputc>
    358a:	b3 94       	inc	r11
    358c:	3c 85       	ldd	r19, Y+12	; 0x0c
    358e:	f6 cf       	rjmp	.-20     	; 0x357c <vfprintf+0x304>
    3590:	b3 14       	cp	r11, r3
    3592:	10 f4       	brcc	.+4      	; 0x3598 <vfprintf+0x320>
    3594:	3b 18       	sub	r3, r11
    3596:	01 c0       	rjmp	.+2      	; 0x359a <vfprintf+0x322>
    3598:	31 2c       	mov	r3, r1
    359a:	34 ff       	sbrs	r19, 4
    359c:	11 c0       	rjmp	.+34     	; 0x35c0 <vfprintf+0x348>
    359e:	b7 01       	movw	r22, r14
    35a0:	80 e3       	ldi	r24, 0x30	; 48
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	3c 87       	std	Y+12, r19	; 0x0c
    35a6:	66 d0       	rcall	.+204    	; 0x3674 <fputc>
    35a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    35aa:	32 ff       	sbrs	r19, 2
    35ac:	16 c0       	rjmp	.+44     	; 0x35da <vfprintf+0x362>
    35ae:	31 fd       	sbrc	r19, 1
    35b0:	03 c0       	rjmp	.+6      	; 0x35b8 <vfprintf+0x340>
    35b2:	88 e7       	ldi	r24, 0x78	; 120
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	02 c0       	rjmp	.+4      	; 0x35bc <vfprintf+0x344>
    35b8:	88 e5       	ldi	r24, 0x58	; 88
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	b7 01       	movw	r22, r14
    35be:	0c c0       	rjmp	.+24     	; 0x35d8 <vfprintf+0x360>
    35c0:	83 2f       	mov	r24, r19
    35c2:	86 78       	andi	r24, 0x86	; 134
    35c4:	51 f0       	breq	.+20     	; 0x35da <vfprintf+0x362>
    35c6:	31 ff       	sbrs	r19, 1
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <vfprintf+0x356>
    35ca:	8b e2       	ldi	r24, 0x2B	; 43
    35cc:	01 c0       	rjmp	.+2      	; 0x35d0 <vfprintf+0x358>
    35ce:	80 e2       	ldi	r24, 0x20	; 32
    35d0:	37 fd       	sbrc	r19, 7
    35d2:	8d e2       	ldi	r24, 0x2D	; 45
    35d4:	b7 01       	movw	r22, r14
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	4d d0       	rcall	.+154    	; 0x3674 <fputc>
    35da:	a5 14       	cp	r10, r5
    35dc:	30 f4       	brcc	.+12     	; 0x35ea <vfprintf+0x372>
    35de:	b7 01       	movw	r22, r14
    35e0:	80 e3       	ldi	r24, 0x30	; 48
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	47 d0       	rcall	.+142    	; 0x3674 <fputc>
    35e6:	5a 94       	dec	r5
    35e8:	f8 cf       	rjmp	.-16     	; 0x35da <vfprintf+0x362>
    35ea:	aa 94       	dec	r10
    35ec:	f4 01       	movw	r30, r8
    35ee:	ea 0d       	add	r30, r10
    35f0:	f1 1d       	adc	r31, r1
    35f2:	80 81       	ld	r24, Z
    35f4:	b7 01       	movw	r22, r14
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	3d d0       	rcall	.+122    	; 0x3674 <fputc>
    35fa:	a1 10       	cpse	r10, r1
    35fc:	f6 cf       	rjmp	.-20     	; 0x35ea <vfprintf+0x372>
    35fe:	33 20       	and	r3, r3
    3600:	09 f4       	brne	.+2      	; 0x3604 <vfprintf+0x38c>
    3602:	5d ce       	rjmp	.-838    	; 0x32be <vfprintf+0x46>
    3604:	b7 01       	movw	r22, r14
    3606:	80 e2       	ldi	r24, 0x20	; 32
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	34 d0       	rcall	.+104    	; 0x3674 <fputc>
    360c:	3a 94       	dec	r3
    360e:	f7 cf       	rjmp	.-18     	; 0x35fe <vfprintf+0x386>
    3610:	f7 01       	movw	r30, r14
    3612:	86 81       	ldd	r24, Z+6	; 0x06
    3614:	97 81       	ldd	r25, Z+7	; 0x07
    3616:	02 c0       	rjmp	.+4      	; 0x361c <vfprintf+0x3a4>
    3618:	8f ef       	ldi	r24, 0xFF	; 255
    361a:	9f ef       	ldi	r25, 0xFF	; 255
    361c:	2c 96       	adiw	r28, 0x0c	; 12
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	df 91       	pop	r29
    3624:	cf 91       	pop	r28
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
    362a:	ff 90       	pop	r15
    362c:	ef 90       	pop	r14
    362e:	df 90       	pop	r13
    3630:	cf 90       	pop	r12
    3632:	bf 90       	pop	r11
    3634:	af 90       	pop	r10
    3636:	9f 90       	pop	r9
    3638:	8f 90       	pop	r8
    363a:	7f 90       	pop	r7
    363c:	6f 90       	pop	r6
    363e:	5f 90       	pop	r5
    3640:	4f 90       	pop	r4
    3642:	3f 90       	pop	r3
    3644:	2f 90       	pop	r2
    3646:	08 95       	ret

00003648 <strnlen_P>:
    3648:	fc 01       	movw	r30, r24
    364a:	05 90       	lpm	r0, Z+
    364c:	61 50       	subi	r22, 0x01	; 1
    364e:	70 40       	sbci	r23, 0x00	; 0
    3650:	01 10       	cpse	r0, r1
    3652:	d8 f7       	brcc	.-10     	; 0x364a <strnlen_P+0x2>
    3654:	80 95       	com	r24
    3656:	90 95       	com	r25
    3658:	8e 0f       	add	r24, r30
    365a:	9f 1f       	adc	r25, r31
    365c:	08 95       	ret

0000365e <strnlen>:
    365e:	fc 01       	movw	r30, r24
    3660:	61 50       	subi	r22, 0x01	; 1
    3662:	70 40       	sbci	r23, 0x00	; 0
    3664:	01 90       	ld	r0, Z+
    3666:	01 10       	cpse	r0, r1
    3668:	d8 f7       	brcc	.-10     	; 0x3660 <strnlen+0x2>
    366a:	80 95       	com	r24
    366c:	90 95       	com	r25
    366e:	8e 0f       	add	r24, r30
    3670:	9f 1f       	adc	r25, r31
    3672:	08 95       	ret

00003674 <fputc>:
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	fb 01       	movw	r30, r22
    367e:	23 81       	ldd	r18, Z+3	; 0x03
    3680:	21 fd       	sbrc	r18, 1
    3682:	03 c0       	rjmp	.+6      	; 0x368a <fputc+0x16>
    3684:	8f ef       	ldi	r24, 0xFF	; 255
    3686:	9f ef       	ldi	r25, 0xFF	; 255
    3688:	28 c0       	rjmp	.+80     	; 0x36da <fputc+0x66>
    368a:	22 ff       	sbrs	r18, 2
    368c:	16 c0       	rjmp	.+44     	; 0x36ba <fputc+0x46>
    368e:	46 81       	ldd	r20, Z+6	; 0x06
    3690:	57 81       	ldd	r21, Z+7	; 0x07
    3692:	24 81       	ldd	r18, Z+4	; 0x04
    3694:	35 81       	ldd	r19, Z+5	; 0x05
    3696:	42 17       	cp	r20, r18
    3698:	53 07       	cpc	r21, r19
    369a:	44 f4       	brge	.+16     	; 0x36ac <fputc+0x38>
    369c:	a0 81       	ld	r26, Z
    369e:	b1 81       	ldd	r27, Z+1	; 0x01
    36a0:	9d 01       	movw	r18, r26
    36a2:	2f 5f       	subi	r18, 0xFF	; 255
    36a4:	3f 4f       	sbci	r19, 0xFF	; 255
    36a6:	20 83       	st	Z, r18
    36a8:	31 83       	std	Z+1, r19	; 0x01
    36aa:	8c 93       	st	X, r24
    36ac:	26 81       	ldd	r18, Z+6	; 0x06
    36ae:	37 81       	ldd	r19, Z+7	; 0x07
    36b0:	2f 5f       	subi	r18, 0xFF	; 255
    36b2:	3f 4f       	sbci	r19, 0xFF	; 255
    36b4:	26 83       	std	Z+6, r18	; 0x06
    36b6:	37 83       	std	Z+7, r19	; 0x07
    36b8:	10 c0       	rjmp	.+32     	; 0x36da <fputc+0x66>
    36ba:	eb 01       	movw	r28, r22
    36bc:	09 2f       	mov	r16, r25
    36be:	18 2f       	mov	r17, r24
    36c0:	00 84       	ldd	r0, Z+8	; 0x08
    36c2:	f1 85       	ldd	r31, Z+9	; 0x09
    36c4:	e0 2d       	mov	r30, r0
    36c6:	19 95       	eicall
    36c8:	89 2b       	or	r24, r25
    36ca:	e1 f6       	brne	.-72     	; 0x3684 <fputc+0x10>
    36cc:	8e 81       	ldd	r24, Y+6	; 0x06
    36ce:	9f 81       	ldd	r25, Y+7	; 0x07
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	8e 83       	std	Y+6, r24	; 0x06
    36d4:	9f 83       	std	Y+7, r25	; 0x07
    36d6:	81 2f       	mov	r24, r17
    36d8:	90 2f       	mov	r25, r16
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

000036e4 <__ultoa_invert>:
    36e4:	fa 01       	movw	r30, r20
    36e6:	aa 27       	eor	r26, r26
    36e8:	28 30       	cpi	r18, 0x08	; 8
    36ea:	51 f1       	breq	.+84     	; 0x3740 <__ultoa_invert+0x5c>
    36ec:	20 31       	cpi	r18, 0x10	; 16
    36ee:	81 f1       	breq	.+96     	; 0x3750 <__ultoa_invert+0x6c>
    36f0:	e8 94       	clt
    36f2:	6f 93       	push	r22
    36f4:	6e 7f       	andi	r22, 0xFE	; 254
    36f6:	6e 5f       	subi	r22, 0xFE	; 254
    36f8:	7f 4f       	sbci	r23, 0xFF	; 255
    36fa:	8f 4f       	sbci	r24, 0xFF	; 255
    36fc:	9f 4f       	sbci	r25, 0xFF	; 255
    36fe:	af 4f       	sbci	r26, 0xFF	; 255
    3700:	b1 e0       	ldi	r27, 0x01	; 1
    3702:	3e d0       	rcall	.+124    	; 0x3780 <__ultoa_invert+0x9c>
    3704:	b4 e0       	ldi	r27, 0x04	; 4
    3706:	3c d0       	rcall	.+120    	; 0x3780 <__ultoa_invert+0x9c>
    3708:	67 0f       	add	r22, r23
    370a:	78 1f       	adc	r23, r24
    370c:	89 1f       	adc	r24, r25
    370e:	9a 1f       	adc	r25, r26
    3710:	a1 1d       	adc	r26, r1
    3712:	68 0f       	add	r22, r24
    3714:	79 1f       	adc	r23, r25
    3716:	8a 1f       	adc	r24, r26
    3718:	91 1d       	adc	r25, r1
    371a:	a1 1d       	adc	r26, r1
    371c:	6a 0f       	add	r22, r26
    371e:	71 1d       	adc	r23, r1
    3720:	81 1d       	adc	r24, r1
    3722:	91 1d       	adc	r25, r1
    3724:	a1 1d       	adc	r26, r1
    3726:	20 d0       	rcall	.+64     	; 0x3768 <__ultoa_invert+0x84>
    3728:	09 f4       	brne	.+2      	; 0x372c <__ultoa_invert+0x48>
    372a:	68 94       	set
    372c:	3f 91       	pop	r19
    372e:	2a e0       	ldi	r18, 0x0A	; 10
    3730:	26 9f       	mul	r18, r22
    3732:	11 24       	eor	r1, r1
    3734:	30 19       	sub	r19, r0
    3736:	30 5d       	subi	r19, 0xD0	; 208
    3738:	31 93       	st	Z+, r19
    373a:	de f6       	brtc	.-74     	; 0x36f2 <__ultoa_invert+0xe>
    373c:	cf 01       	movw	r24, r30
    373e:	08 95       	ret
    3740:	46 2f       	mov	r20, r22
    3742:	47 70       	andi	r20, 0x07	; 7
    3744:	40 5d       	subi	r20, 0xD0	; 208
    3746:	41 93       	st	Z+, r20
    3748:	b3 e0       	ldi	r27, 0x03	; 3
    374a:	0f d0       	rcall	.+30     	; 0x376a <__ultoa_invert+0x86>
    374c:	c9 f7       	brne	.-14     	; 0x3740 <__ultoa_invert+0x5c>
    374e:	f6 cf       	rjmp	.-20     	; 0x373c <__ultoa_invert+0x58>
    3750:	46 2f       	mov	r20, r22
    3752:	4f 70       	andi	r20, 0x0F	; 15
    3754:	40 5d       	subi	r20, 0xD0	; 208
    3756:	4a 33       	cpi	r20, 0x3A	; 58
    3758:	18 f0       	brcs	.+6      	; 0x3760 <__ultoa_invert+0x7c>
    375a:	49 5d       	subi	r20, 0xD9	; 217
    375c:	31 fd       	sbrc	r19, 1
    375e:	40 52       	subi	r20, 0x20	; 32
    3760:	41 93       	st	Z+, r20
    3762:	02 d0       	rcall	.+4      	; 0x3768 <__ultoa_invert+0x84>
    3764:	a9 f7       	brne	.-22     	; 0x3750 <__ultoa_invert+0x6c>
    3766:	ea cf       	rjmp	.-44     	; 0x373c <__ultoa_invert+0x58>
    3768:	b4 e0       	ldi	r27, 0x04	; 4
    376a:	a6 95       	lsr	r26
    376c:	97 95       	ror	r25
    376e:	87 95       	ror	r24
    3770:	77 95       	ror	r23
    3772:	67 95       	ror	r22
    3774:	ba 95       	dec	r27
    3776:	c9 f7       	brne	.-14     	; 0x376a <__ultoa_invert+0x86>
    3778:	00 97       	sbiw	r24, 0x00	; 0
    377a:	61 05       	cpc	r22, r1
    377c:	71 05       	cpc	r23, r1
    377e:	08 95       	ret
    3780:	9b 01       	movw	r18, r22
    3782:	ac 01       	movw	r20, r24
    3784:	0a 2e       	mov	r0, r26
    3786:	06 94       	lsr	r0
    3788:	57 95       	ror	r21
    378a:	47 95       	ror	r20
    378c:	37 95       	ror	r19
    378e:	27 95       	ror	r18
    3790:	ba 95       	dec	r27
    3792:	c9 f7       	brne	.-14     	; 0x3786 <__ultoa_invert+0xa2>
    3794:	62 0f       	add	r22, r18
    3796:	73 1f       	adc	r23, r19
    3798:	84 1f       	adc	r24, r20
    379a:	95 1f       	adc	r25, r21
    379c:	a0 1d       	adc	r26, r0
    379e:	08 95       	ret

000037a0 <_exit>:
    37a0:	f8 94       	cli

000037a2 <__stop_program>:
    37a2:	ff cf       	rjmp	.-2      	; 0x37a2 <__stop_program>
